<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue-cli3 把配置都封装了这样设计有什么好处？</title>
      <link href="/2019/05/24/vue-cli3%20%E6%8A%8A%E9%85%8D%E7%BD%AE%E9%83%BD%E5%B0%81%E8%A3%85%E4%BA%86%E8%BF%99%E6%A0%B7%E8%AE%BE%E8%AE%A1%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%BD%E5%A4%84%EF%BC%9F/"/>
      <url>/2019/05/24/vue-cli3%20%E6%8A%8A%E9%85%8D%E7%BD%AE%E9%83%BD%E5%B0%81%E8%A3%85%E4%BA%86%E8%BF%99%E6%A0%B7%E8%AE%BE%E8%AE%A1%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%BD%E5%A4%84%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue-cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dva 试用</title>
      <link href="/2019/05/12/dva%20%E8%AF%95%E7%94%A8/"/>
      <url>/2019/05/12/dva%20%E8%AF%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3 要增强 typescript？</title>
      <link href="/2019/04/23/vue3%20%E8%A6%81%E5%A2%9E%E5%BC%BA%20typescript%EF%BC%9F/"/>
      <url>/2019/04/23/vue3%20%E8%A6%81%E5%A2%9E%E5%BC%BA%20typescript%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redux 为啥叫 redux？</title>
      <link href="/2019/04/18/redux%20%E4%B8%BA%E5%95%A5%E5%8F%AB%20redux%EF%BC%9F/"/>
      <url>/2019/04/18/redux%20%E4%B8%BA%E5%95%A5%E5%8F%AB%20redux%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是react-hooks？为什么尤大佬这么关注</title>
      <link href="/2019/04/08/%E4%BB%80%E4%B9%88%E6%98%AFreact-hooks%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%E5%B0%A4%E5%A4%A7%E4%BD%AC%E8%BF%99%E4%B9%88%E5%85%B3%E6%B3%A8/"/>
      <url>/2019/04/08/%E4%BB%80%E4%B9%88%E6%98%AFreact-hooks%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%E5%B0%A4%E5%A4%A7%E4%BD%AC%E8%BF%99%E4%B9%88%E5%85%B3%E6%B3%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuex 和 redux 引发的思考</title>
      <link href="/2019/04/05/vuex%20%E5%92%8C%20redux%20%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2019/04/05/vuex%20%E5%92%8C%20redux%20%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>code view 相关总结</title>
      <link href="/2019/03/25/codeview%20%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93/"/>
      <url>/2019/03/25/codeview%20%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 代码质量 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> code view </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哪些业务逻辑应该前端处理哪些应该给后端处理？</title>
      <link href="/2019/03/06/%E5%93%AA%E4%BA%9B%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E5%BA%94%E8%AF%A5%E5%89%8D%E7%AB%AF%E5%A4%84%E7%90%86%E5%93%AA%E4%BA%9B%E5%BA%94%E8%AF%A5%E7%BB%99%E5%90%8E%E7%AB%AF%E5%A4%84%E7%90%86/"/>
      <url>/2019/03/06/%E5%93%AA%E4%BA%9B%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E5%BA%94%E8%AF%A5%E5%89%8D%E7%AB%AF%E5%A4%84%E7%90%86%E5%93%AA%E4%BA%9B%E5%BA%94%E8%AF%A5%E7%BB%99%E5%90%8E%E7%AB%AF%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> data </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据处理是否应该放在api处理中？</title>
      <link href="/2019/02/25/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%98%AF%E5%90%A6%E5%BA%94%E8%AF%A5%E6%94%BE%E5%9C%A8api%E5%A4%84%E7%90%86%E4%B8%AD%EF%BC%9F/"/>
      <url>/2019/02/25/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%98%AF%E5%90%A6%E5%BA%94%E8%AF%A5%E6%94%BE%E5%9C%A8api%E5%A4%84%E7%90%86%E4%B8%AD%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端架构思考</title>
      <link href="/2019/02/18/%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84%E6%80%9D%E8%80%83/"/>
      <url>/2019/02/18/%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react 创新在哪里？</title>
      <link href="/2019/01/18/react%20%E5%88%9B%E6%96%B0%E5%9C%A8%E5%93%AA%E9%87%8C%EF%BC%9F/"/>
      <url>/2019/01/18/react%20%E5%88%9B%E6%96%B0%E5%9C%A8%E5%93%AA%E9%87%8C%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再探 vue 框架：&lt;下篇&gt;</title>
      <link href="/2018/12/28/t-note_vue_004/"/>
      <url>/2018/12/28/t-note_vue_004/</url>
      
        <content type="html"><![CDATA[<h1 id="再探-vue-框架：-lt-下篇-gt"><a href="#再探-vue-框架：-lt-下篇-gt" class="headerlink" title="再探 vue 框架： &lt;下篇&gt;"></a>再探 vue 框架： &lt;下篇&gt;</h1><h2 id="服务器渲染"><a href="#服务器渲染" class="headerlink" title="服务器渲染"></a>服务器渲染</h2><h2 id="结合-TypeScript-使用"><a href="#结合-TypeScript-使用" class="headerlink" title="结合 TypeScript 使用"></a>结合 TypeScript 使用</h2><h2 id="vue-开发感想"><a href="#vue-开发感想" class="headerlink" title="vue 开发感想"></a>vue 开发感想</h2><h2 id="后续研究"><a href="#后续研究" class="headerlink" title="后续研究"></a>后续研究</h2><h2 id="读源码相关收获"><a href="#读源码相关收获" class="headerlink" title="读源码相关收获"></a>读源码相关收获</h2><h2 id="React-相关"><a href="#React-相关" class="headerlink" title="React 相关"></a>React 相关</h2>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再探 vue 框架 &lt;上篇&gt;</title>
      <link href="/2018/12/13/t-note_vue_003/"/>
      <url>/2018/12/13/t-note_vue_003/</url>
      
        <content type="html"><![CDATA[<h1 id="再探-vue-框架（上）"><a href="#再探-vue-框架（上）" class="headerlink" title="再探 vue 框架（上）"></a>再探 vue 框架（上）</h1><h2 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h2><h2 id="异步路由"><a href="#异步路由" class="headerlink" title="异步路由"></a>异步路由</h2><h2 id="自动化测试"><a href="#自动化测试" class="headerlink" title="自动化测试"></a>自动化测试</h2><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>头疼的 eslint ？</title>
      <link href="/2018/12/12/%E5%A4%B4%E7%96%BC%E7%9A%84%20eslint%20%EF%BC%9F/"/>
      <url>/2018/12/12/%E5%A4%B4%E7%96%BC%E7%9A%84%20eslint%20%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 规范 </tag>
            
            <tag> eslint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ci/cd 加单元测试完成前端自动打包、构建、测试、上线</title>
      <link href="/2018/11/01/cicd%20%E5%8A%A0%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%AE%8C%E6%88%90%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85%E3%80%81%E6%9E%84%E5%BB%BA%E3%80%81%E6%B5%8B%E8%AF%95%E3%80%81%E4%B8%8A%E7%BA%BF/"/>
      <url>/2018/11/01/cicd%20%E5%8A%A0%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%AE%8C%E6%88%90%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85%E3%80%81%E6%9E%84%E5%BB%BA%E3%80%81%E6%B5%8B%E8%AF%95%E3%80%81%E4%B8%8A%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端工程化 </tag>
            
            <tag> ci </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上线构建引发的思考</title>
      <link href="/2018/10/13/%E4%B8%8A%E7%BA%BF%E6%9E%84%E5%BB%BA%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2018/10/13/%E4%B8%8A%E7%BA%BF%E6%9E%84%E5%BB%BA%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端工程化 </tag>
            
            <tag> ci </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极端数据情况下的处理</title>
      <link href="/2018/09/13/%E6%9E%81%E7%AB%AF%E6%95%B0%E6%8D%AE%E6%83%85%E5%86%B5%E4%B8%8B%E7%9A%84%E5%A4%84%E7%90%86/"/>
      <url>/2018/09/13/%E6%9E%81%E7%AB%AF%E6%95%B0%E6%8D%AE%E6%83%85%E5%86%B5%E4%B8%8B%E7%9A%84%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> data </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式研究</title>
      <link href="/2018/09/02/t-design_mode/"/>
      <url>/2018/09/02/t-design_mode/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 卡在了一个奇怪的问题上了？</title>
      <link href="/2018/08/20/vue%20%E5%8D%A1%E5%9C%A8%E4%BA%86%E4%B8%80%E4%B8%AA%E5%A5%87%E6%80%AA%E7%9A%84%E9%97%AE%E9%A2%98%E4%B8%8A%E4%BA%86%EF%BC%9F/"/>
      <url>/2018/08/20/vue%20%E5%8D%A1%E5%9C%A8%E4%BA%86%E4%B8%80%E4%B8%AA%E5%A5%87%E6%80%AA%E7%9A%84%E9%97%AE%E9%A2%98%E4%B8%8A%E4%BA%86%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> question </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两天开发一个敏感词检测工具并参加黑客比赛</title>
      <link href="/2018/08/10/%E4%B8%A4%E5%A4%A9%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E6%95%8F%E6%84%9F%E8%AF%8D%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7%E5%B9%B6%E5%8F%82%E5%8A%A0%E9%BB%91%E5%AE%A2%E6%AF%94%E8%B5%9B/"/>
      <url>/2018/08/10/%E4%B8%A4%E5%A4%A9%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E6%95%8F%E6%84%9F%E8%AF%8D%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7%E5%B9%B6%E5%8F%82%E5%8A%A0%E9%BB%91%E5%AE%A2%E6%AF%94%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 谷歌插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apiza 管理api</title>
      <link href="/2018/07/23/t-note_apiza/"/>
      <url>/2018/07/23/t-note_apiza/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> api </category>
          
      </categories>
      
      
        <tags>
            
            <tag> api </tag>
            
            <tag> data </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM事件流</title>
      <link href="/2018/06/23/t-dom-event/"/>
      <url>/2018/06/23/t-dom-event/</url>
      
        <content type="html"><![CDATA[<h1 id="DOM-事件流"><a href="#DOM-事件流" class="headerlink" title="DOM 事件流"></a>DOM 事件流</h1><h2 id="基本概念（dom级别）"><a href="#基本概念（dom级别）" class="headerlink" title="基本概念（dom级别）"></a>基本概念（dom级别）</h2><h3 id="级别"><a href="#级别" class="headerlink" title="级别"></a>级别</h3><ul><li>dom0<br><code>element.onclick = function() {}</code></li><li>dom2<br><code>element.addEventListener(&#39;click&#39;, function(){}, false)</code></li><li>dom3<br><code>element.addEventListener(&#39;keyup&#39;, function(){}, false)</code></li></ul><h2 id="DOM事件模型（捕获、冒泡）"><a href="#DOM事件模型（捕获、冒泡）" class="headerlink" title="DOM事件模型（捕获、冒泡）"></a>DOM事件模型（捕获、冒泡）</h2><ul><li>捕获</li><li>冒泡</li></ul><h2 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h2><ol><li>捕获</li><li>目标阶段</li><li>冒泡</li></ol><h2 id="DOM事件捕获的具体流程"><a href="#DOM事件捕获的具体流程" class="headerlink" title="DOM事件捕获的具体流程"></a>DOM事件捕获的具体流程</h2><ol><li>window</li><li>document</li><li>html （document.documentElement）</li><li>body</li><li>…</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 捕获 true</span></span><br><span class="line"><span class="comment">// 冒泡 false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> event = <span class="built_in">document</span>.getElementById(<span class="string">'ev'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'window'</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'document'</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.documentElement.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'html'</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'body'</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">event.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'el'</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h2 id="Event对象的常见应用（监听、响应）"><a href="#Event对象的常见应用（监听、响应）" class="headerlink" title="Event对象的常见应用（监听、响应）"></a>Event对象的常见应用（监听、响应）</h2><ol><li><code>event.preventDefault()</code></li><li><code>event.stopPropagation()</code> 阻止冒泡</li><li><code>event.stopImmediatePropagation()</code> 阻止立即冒泡</li><li><code>event.currentTarget</code> 当前绑定事件的元素</li><li><code>event.target</code> 当前被点击的元素</li></ol><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> Event(<span class="string">'myClick'</span>)</span><br><span class="line">event.addEventListener(<span class="string">'myClick'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'custome'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">event.dispatchEvent(event)</span><br><span class="line"></span><br><span class="line"><span class="comment">// CostomEvent</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> es5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复杂的图表业务临时实现方案</title>
      <link href="/2018/06/18/%E5%A4%8D%E6%9D%82%E7%9A%84%E5%9B%BE%E8%A1%A8%E4%B8%9A%E5%8A%A1%E4%B8%B4%E6%97%B6%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/"/>
      <url>/2018/06/18/%E5%A4%8D%E6%9D%82%E7%9A%84%E5%9B%BE%E8%A1%A8%E4%B8%9A%E5%8A%A1%E4%B8%B4%E6%97%B6%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> echart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>echart 使用与各个图表工具比较</title>
      <link href="/2018/06/14/echart%20%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%90%84%E4%B8%AA%E5%9B%BE%E8%A1%A8%E5%B7%A5%E5%85%B7%E6%AF%94%E8%BE%83/"/>
      <url>/2018/06/14/echart%20%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%90%84%E4%B8%AA%E5%9B%BE%E8%A1%A8%E5%B7%A5%E5%85%B7%E6%AF%94%E8%BE%83/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> echart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>build 应该放在本地还是远程？</title>
      <link href="/2018/06/13/build%20%E5%BA%94%E8%AF%A5%E6%94%BE%E5%9C%A8%E6%9C%AC%E5%9C%B0%E8%BF%98%E6%98%AF%E8%BF%9C%E7%A8%8B/"/>
      <url>/2018/06/13/build%20%E5%BA%94%E8%AF%A5%E6%94%BE%E5%9C%A8%E6%9C%AC%E5%9C%B0%E8%BF%98%E6%98%AF%E8%BF%9C%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题 </tag>
            
            <tag> 前端工程化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 初探基本知识概念（上）</title>
      <link href="/2018/06/13/cicd%20%E6%90%AD%E5%BB%BA%E5%AE%9E%E6%88%98%EF%BC%88gitlab%EF%BC%89/"/>
      <url>/2018/06/13/cicd%20%E6%90%AD%E5%BB%BA%E5%AE%9E%E6%88%98%EF%BC%88gitlab%EF%BC%89/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 初探基本知识概念（上）</title>
      <link href="/2018/06/13/t-typescript/"/>
      <url>/2018/06/13/t-typescript/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>[TOC]</p><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><h3 id="布尔类型-boolean"><a href="#布尔类型-boolean" class="headerlink" title="布尔类型 boolean"></a>布尔类型 boolean</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> flag:<span class="built_in">boolean</span> = <span class="literal">true</span></span><br><span class="line">flag = <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="字符串-string"><a href="#字符串-string" class="headerlink" title="字符串 string"></a>字符串 string</h3><h3 id="数组类型-array"><a href="#数组类型-array" class="headerlink" title="数组类型 array"></a>数组类型 array</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种定义数组</span></span><br><span class="line"><span class="keyword">const</span> arr:number[] = [<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>]</span><br><span class="line"><span class="comment">// 第二种定义数组</span></span><br><span class="line"><span class="keyword">const</span> arr1:<span class="built_in">Array</span>&lt;number&gt; = [<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>]</span><br></pre></td></tr></table></figure><h3 id="元组类型-tuple"><a href="#元组类型-tuple" class="headerlink" title="元组类型 tuple"></a>元组类型 tuple</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每一个位置指定一个类型</span></span><br><span class="line"><span class="keyword">let</span> arr:[<span class="built_in">number</span>, <span class="built_in">string</span>] = [<span class="number">123</span>, <span class="string">'suo'</span>]</span><br></pre></td></tr></table></figure><h3 id="枚举类型-enum"><a href="#枚举类型-enum" class="headerlink" title="枚举类型 enum"></a>枚举类型 enum</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数值代替类型不直观易读性差</span></span><br><span class="line"><span class="keyword">enum</span> Flag &#123;success = <span class="number">1</span>, error = <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">let</span> s:Flag = Flag.success</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标识符没有赋值，默认为下标</span></span><br></pre></td></tr></table></figure><h3 id="任意类型-any"><a href="#任意类型-any" class="headerlink" title="任意类型 any"></a>任意类型 any</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有指定类型相似</span></span><br><span class="line"><span class="comment">// TODO：任意类型的作用</span></span><br><span class="line"><span class="keyword">let</span> num:<span class="built_in">any</span> = <span class="number">123</span></span><br></pre></td></tr></table></figure><h3 id="未定义类型-undefined"><a href="#未定义类型-undefined" class="headerlink" title="未定义类型 undefined"></a>未定义类型 undefined</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义未赋值</span></span><br><span class="line"><span class="keyword">const</span> num:number | <span class="literal">undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(num)</span><br></pre></td></tr></table></figure><h3 id="空指针类型-null"><a href="#空指针类型-null" class="headerlink" title="空指针类型 null"></a>空指针类型 null</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num:<span class="literal">null</span></span><br></pre></td></tr></table></figure><h3 id="空类型-void"><a href="#空类型-void" class="headerlink" title="空类型 void"></a>空类型 void</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'a'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>):<span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'a'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他类型-never"><a href="#其他类型-never" class="headerlink" title="其他类型 never"></a>其他类型 never</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从不会出现的值</span></span><br><span class="line"><span class="keyword">var</span> a:never</span><br><span class="line"></span><br><span class="line">a = <span class="function">(<span class="params">(<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>)</span></span><br></pre></td></tr></table></figure><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><h4 id="访问联合类型的属性或方法"><a href="#访问联合类型的属性或方法" class="headerlink" title="访问联合类型的属性或方法"></a>访问联合类型的属性或方法</h4><p>当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，<strong>我们只能访问此联合类型的所有类型里共有的属性或方法</strong></p><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><h3 id="声明合并"><a href="#声明合并" class="headerlink" title="声明合并"></a>声明合并</h3><p>### </p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>):<span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">get</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>):<span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数传参数"><a href="#函数传参数" class="headerlink" title="函数传参数"></a>函数传参数</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可选参数（必须配置到最后面）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">name:<span class="built_in">string</span>, age?:<span class="built_in">number</span></span>):<span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (age) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span> -- <span class="subst">$&#123;age&#125;</span>`</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span>(<span class="string">'shao'</span>)</span><br><span class="line"><span class="keyword">get</span>(<span class="string">'shaosuo'</span>, <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">name:<span class="built_in">string</span>, age:<span class="built_in">number</span> = 20</span>):<span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (age) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span> -- <span class="subst">$&#123;age&#125;</span>`</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">get</span>(<span class="string">'shao'</span>)</span><br><span class="line"><span class="keyword">get</span>(<span class="string">'shaosuo'</span>, <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 剩余参数（三点运输符）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...rest:<span class="built_in">number</span>[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> rest.reduce(<span class="function">(<span class="params">it, cur, index, arr</span>) =&gt;</span> it + cur）</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数的重载(函数名相同参数不同)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">css</span>(<span class="params">config:<span class="built_in">any</span></span>):<span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">css</span>(<span class="params">config: <span class="built_in">any</span>, value: <span class="built_in">number</span></span>): <span class="title">any</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 构造属性、方法</span></span><br><span class="line">  <span class="keyword">this</span>.name</span><br><span class="line">  <span class="keyword">this</span>.age</span><br><span class="line">  <span class="keyword">this</span>.work = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'work'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型属性、方法</span></span><br><span class="line">Person.prototype.phone = <span class="string">'12343435'</span></span><br><span class="line">Person.prototype.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'run'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 静态属性、方法</span></span><br><span class="line">Person.address = <span class="string">'guangzhou'</span></span><br><span class="line">Person.jump = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> suo = <span class="keyword">new</span> Person()</span><br><span class="line">suo.work()</span><br><span class="line">suo.run()</span><br><span class="line"></span><br><span class="line"><span class="comment">// TS</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">static</span> sex: <span class="built_in">string</span> = <span class="string">'男'</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  setName(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  getName(name: <span class="built_in">string</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  run(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 静态方法无法直接调用属性</span></span><br><span class="line">  <span class="keyword">static</span> print(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`static print <span class="subst">$&#123;sex&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person(<span class="string">'张三'</span>)</span><br><span class="line">p.run()</span><br></pre></td></tr></table></figure><h3 id="继承类"><a href="#继承类" class="headerlink" title="继承类"></a>继承类</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="comment">// 对象冒充</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PersonOther</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>) <span class="comment">// 继承构造函数</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型链继承</span></span><br><span class="line">PersonOther.prototype = <span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line"><span class="comment">// TS</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  run(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;this.name&#125;</span> 运动`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> personOther <span class="keyword">extends</span> Penson &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> other = <span class="keyword">new</span> personOther(<span class="string">'李四'</span>)</span><br><span class="line">other.run()</span><br></pre></td></tr></table></figure><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// public, protected, private</span></span><br><span class="line"><span class="comment">// public 父子都可以访问，外部可以访问</span></span><br><span class="line"><span class="comment">// protected 父子类可以访问，外部不可以访问</span></span><br><span class="line"><span class="comment">// private 只要自己才能访问</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  public name: string</span><br><span class="line">  getName(): string &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">  &#125;</span><br><span class="line">  setName(name: string): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person()</span><br><span class="line">p.name <span class="comment">// 外部</span></span><br><span class="line">p.getName() <span class="comment">// 内部</span></span><br></pre></td></tr></table></figure><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类实现一个方法不实现，子类实现，不同类不同表现</span></span><br><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">params: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = params.name</span><br><span class="line">  &#125;</span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'eat...'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">parmas: nay</span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(parmas)</span><br><span class="line">  &#125;</span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="keyword">return</span> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象方法不实现，只能在抽象类中，要求子类必须包含方法</span></span><br><span class="line"><span class="comment">// 抽象类一般有抽象方法才有意义</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Animal &#123;</span><br><span class="line">  <span class="keyword">abstract</span> eat(): <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 无法创建</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">parmas: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(parmas)</span><br><span class="line">  &#125;</span><br><span class="line">  eat(): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;parmas.name&#125;</span> eat bone`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>标准的一种定义，对类的属性方法，行为规范的规范和约束。</p><h3 id="属性接口"><a href="#属性接口" class="headerlink" title="属性接口"></a>属性接口</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 属性接口 </span></span><br><span class="line"><span class="comment">* 对json的约束</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">label: <span class="built_in">string</span></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(label)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对对象的约束</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">obj: &#123;label: <span class="built_in">string</span>&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(label)</span><br><span class="line">&#125;</span><br><span class="line">print(&#123;label: <span class="string">'123'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量对函数进行约束</span></span><br><span class="line"><span class="keyword">interface</span> FullName &#123;</span><br><span class="line">  firstName: <span class="built_in">string</span></span><br><span class="line">  secondName: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printName</span>(<span class="params">name: FullName</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name.firstName + <span class="string">' '</span> name.secondName)</span><br><span class="line">&#125;</span><br><span class="line">printName(&#123;firstName: <span class="string">'shao'</span>, secondName: <span class="string">'suo'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">info</span>(<span class="params">name: Fullname</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name.firstName + <span class="string">' '</span> name.secondName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选属性接口</span></span><br><span class="line"><span class="keyword">interface</span> FullName &#123;</span><br><span class="line">  firstName: <span class="built_in">string</span></span><br><span class="line">  secondName?: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">name: FullName</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="keyword">interface</span> config &#123;</span><br><span class="line">  <span class="keyword">type</span>: <span class="built_in">string</span></span><br><span class="line">  url: <span class="built_in">string</span></span><br><span class="line">  data?: <span class="built_in">string</span></span><br><span class="line">  dataType: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">config: config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  xhr.open(config.type, <span class="string">'true'</span>)</span><br><span class="line">  xhr.send(config.data)</span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (config.dataType === <span class="string">'json'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(xhr.responseText))</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(xhr.responseText)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ajax(&#123;</span><br><span class="line">  <span class="keyword">type</span>: <span class="string">'get'</span>,</span><br><span class="line">  url: <span class="string">'www.baidu.com'</span>,</span><br><span class="line">  dataType: <span class="string">'json'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="函数接口"><a href="#函数接口" class="headerlink" title="函数接口"></a>函数接口</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对方法传入参数和返回值约束</span></span><br><span class="line"><span class="keyword">interface</span> encrypt &#123;</span><br><span class="line">  (key: <span class="built_in">string</span>, value: <span class="built_in">string</span>): <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> md5: encrypt = <span class="function"><span class="keyword">function</span>(<span class="params">key: <span class="built_in">string</span>, value: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> key + value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可索引接口"><a href="#可索引接口" class="headerlink" title="可索引接口"></a>可索引接口</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对数组的约束</span></span><br><span class="line"><span class="keyword">interface</span> userArr &#123;</span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr: userArr = [<span class="string">'aaa'</span>, <span class="string">'bbb'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对对象的约束</span></span><br><span class="line"><span class="keyword">interface</span> userObj &#123;</span><br><span class="line">  [index: <span class="built_in">string</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj: userObj = &#123;name: <span class="string">'shap'</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="类接口"><a href="#类接口" class="headerlink" title="类接口"></a>类接口</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对类类型接口</span></span><br><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  eat(str: <span class="built_in">string</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">implements</span> Animal &#123;</span><br><span class="line">  name: strin</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  eat(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'eat bone'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口扩展"><a href="#接口扩展" class="headerlink" title="接口扩展"></a>接口扩展</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">  eat(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Person <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  work(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Web <span class="keyword">implements</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  eat() &#123;&#125;</span><br><span class="line">  work() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="范型"><a href="#范型" class="headerlink" title="范型"></a>范型</h2><h3 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h3><p>不特定的数据类型<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解决类接口方法复用性。不特定数据类型支持</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">value: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入什么返回什么</span></span><br><span class="line"><span class="comment">// 放弃了类型检查</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">value: <span class="built_in">any</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 范性，可以支持不特定的类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>&lt;<span class="title">T</span>&gt;(<span class="params">value: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getData&lt;<span class="built_in">number</span>&gt;(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数时候指定参数类型</span></span><br></pre></td></tr></table></figure></p><h3 id="类-1"><a href="#类-1" class="headerlink" title="类"></a>类</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Min &#123;</span><br><span class="line">  list: <span class="built_in">number</span>[] = [];</span><br><span class="line">  add(num: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.list.push(num);</span><br><span class="line">  &#125;</span><br><span class="line">  min(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> minNum = <span class="keyword">this</span>.list[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">this</span>.list.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      minNum = minNum &lt; item ? minNum : item</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Min&lt;T&gt; &#123;</span><br><span class="line">  list: T[] = [];</span><br><span class="line">  add(num: T) &#123;</span><br><span class="line">    <span class="keyword">this</span>.list.push(num);</span><br><span class="line">  &#125;</span><br><span class="line">  min(): T &#123;</span><br><span class="line">    <span class="keyword">this</span>.list.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      minNum = minNum &lt; item ? minNum : item)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化时候确定内部类型</span></span><br><span class="line"><span class="keyword">const</span> m1 = <span class="keyword">new</span> Min&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line"><span class="keyword">const</span> m2 = <span class="keyword">new</span> Min&lt;<span class="built_in">string</span>&gt;();</span><br></pre></td></tr></table></figure><h3 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ConfigFn &#123;</span><br><span class="line">  (value1: <span class="built_in">string</span>, vlaue2: <span class="built_in">string</span>): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setData: ConfigFn = <span class="function"><span class="keyword">function</span>(<span class="params">value1: <span class="built_in">string</span>, value2: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value + value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 范型接口</span></span><br><span class="line"><span class="comment">// 第一种写法</span></span><br><span class="line"><span class="keyword">interface</span> ConfigFn &#123;</span><br><span class="line">  &lt;T&gt;(value1: T, value2: T): T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> getData: ConfigFn = <span class="function"><span class="keyword">function</span>&lt;<span class="title">T</span>&gt;(<span class="params">value1: T, value2: T</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value1 + value2;</span><br><span class="line">&#125;</span><br><span class="line">getData&lt;<span class="built_in">number</span>&gt;(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 第二种写法</span></span><br><span class="line"><span class="keyword">interface</span> ConfigFn&lt;T&gt; &#123;</span><br><span class="line">  &lt;T&gt;(value1: T, value2: T): T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> getMyData:ConfigFn&lt;<span class="built_in">number</span>&gt; = getData;</span><br></pre></td></tr></table></figure><p>over..</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>antd 组件使用</title>
      <link href="/2018/06/02/antd%20%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/06/02/antd%20%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> ui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sass 怎样写才不冲突？</title>
      <link href="/2018/05/18/sass%20%E6%80%8E%E6%A0%B7%E5%86%99%E6%89%8D%E4%B8%8D%E5%86%B2%E7%AA%81%EF%BC%9F/"/>
      <url>/2018/05/18/sass%20%E6%80%8E%E6%A0%B7%E5%86%99%E6%89%8D%E4%B8%8D%E5%86%B2%E7%AA%81%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> sass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 源码分析之编译</title>
      <link href="/2018/05/18/vue%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E7%BC%96%E8%AF%91/"/>
      <url>/2018/05/18/vue%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单元测试探究</title>
      <link href="/2018/05/02/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%8E%A2%E7%A9%B6/"/>
      <url>/2018/05/02/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%8E%A2%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端工程化 </tag>
            
            <tag> 单元测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git rebase 与 git tag</title>
      <link href="/2018/04/18/git%20rebase%20%E4%B8%8E%20git%20tag/"/>
      <url>/2018/04/18/git%20rebase%20%E4%B8%8E%20git%20tag/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 协作开发规范与git flow开发流程</title>
      <link href="/2018/04/13/git%20%E5%8D%8F%E4%BD%9C%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E4%B8%8Egit%20flow%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/"/>
      <url>/2018/04/13/git%20%E5%8D%8F%E4%BD%9C%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E4%B8%8Egit%20flow%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>添加 download 下载文件</title>
      <link href="/2018/04/03/%E6%B7%BB%E5%8A%A0%20download%20%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"/>
      <url>/2018/04/03/%E6%B7%BB%E5%8A%A0%20download%20%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高阶组件封装</title>
      <link href="/2018/03/25/%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85/"/>
      <url>/2018/03/25/%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用element实现复杂的业务</title>
      <link href="/2018/03/20/%E4%BD%BF%E7%94%A8element%E5%AE%9E%E7%8E%B0%E5%A4%8D%E6%9D%82%E7%9A%84%E4%B8%9A%E5%8A%A1/"/>
      <url>/2018/03/20/%E4%BD%BF%E7%94%A8element%E5%AE%9E%E7%8E%B0%E5%A4%8D%E6%9D%82%E7%9A%84%E4%B8%9A%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用mock搭建前后分离环境</title>
      <link href="/2018/03/13/%E4%BD%BF%E7%94%A8mock%E6%90%AD%E5%BB%BA%E5%89%8D%E5%90%8E%E5%88%86%E7%A6%BB%E7%8E%AF%E5%A2%83/"/>
      <url>/2018/03/13/%E4%BD%BF%E7%94%A8mock%E6%90%AD%E5%BB%BA%E5%89%8D%E5%90%8E%E5%88%86%E7%A6%BB%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端工程化 </tag>
            
            <tag> Mock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Restful api 规范来约束后端行为</title>
      <link href="/2018/03/02/%E7%94%A8Resful%20api%20%E8%A7%84%E8%8C%83%E6%9D%A5%E7%BA%A6%E6%9D%9F%E5%90%8E%E7%AB%AF%E8%A1%8C%E4%B8%BA/"/>
      <url>/2018/03/02/%E7%94%A8Resful%20api%20%E8%A7%84%E8%8C%83%E6%9D%A5%E7%BA%A6%E6%9D%9F%E5%90%8E%E7%AB%AF%E8%A1%8C%E4%B8%BA/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> api </category>
          
      </categories>
      
      
        <tags>
            
            <tag> api </tag>
            
            <tag> restful </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端工程化之路：初探 Webpack 打包工具</title>
      <link href="/2018/03/01/t-note_webpack_001/"/>
      <url>/2018/03/01/t-note_webpack_001/</url>
      
        <content type="html"><![CDATA[<p>最近一段时间前端的工具越来越多，让人不禁眼花缭绕。其中也不乏好的工具，比如 Webpack 和 Gulp 两种不同风格的前端工具。感觉再不学都跟不上技术的节奏了。所以最近尝试的去学习了一些。收获也是颇丰。现在记下笔记，以便日后，查看。</p><h3 id="Webpack-作用Webpack-被称为前端打包工具。将项目当作一个整体，通过给定主文件，使用-loaders-处理后生成浏览器可识别的-JavaScript-文件"><a href="#Webpack-作用Webpack-被称为前端打包工具。将项目当作一个整体，通过给定主文件，使用-loaders-处理后生成浏览器可识别的-JavaScript-文件" class="headerlink" title="Webpack 作用Webpack 被称为前端打包工具。将项目当作一个整体，通过给定主文件，使用 loaders 处理后生成浏览器可识别的 JavaScript 文件"></a>Webpack 作用Webpack 被称为前端打包工具。将项目当作一个整体，通过给定主文件，使用 loaders 处理后生成浏览器可识别的 JavaScript 文件</h3><h3 id="Webpack-原理"><a href="#Webpack-原理" class="headerlink" title="Webpack 原理"></a>Webpack 原理</h3><ul><li>模块化，处理依赖关系</li><li>CommonJs 标准</li><li>加载工具，集成在一起</li></ul><h3 id="Webpack-安装"><a href="#Webpack-安装" class="headerlink" title="Webpack 安装"></a>Webpack 安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装</span></span><br><span class="line">npm install -g webpack</span><br><span class="line"><span class="comment"># 安装到项目目录</span></span><br><span class="line">npm install --save-dev webpack</span><br></pre></td></tr></table></figure><h3 id="Webpack-使用"><a href="#Webpack-使用" class="headerlink" title="Webpack 使用"></a>Webpack 使用</h3><p>1.建立npn环境<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure></p><p>2.使用webpack工具<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack &#123;entry file&#125; &#123;destination file&#125;</span><br></pre></td></tr></table></figure></p><p>3.添加配置文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: _dirname + <span class="string">"/app/main.js"</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: _dirname + <span class="string">"/public"</span>,</span><br><span class="line">        filename: <span class="string">"bundle.js"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4.添加调试工具<br>(1)安装<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure></p><p>(2)配置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devtools: <span class="string">"eval-source-map"</span>,</span><br><span class="line">    entry: _dirname + <span class="string">"/app/main.js"</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: _dirname + <span class="string">"/public"</span>,</span><br><span class="line">        filename: <span class="string">"bundle.js"</span></span><br><span class="line">    &#125;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: <span class="string">"./public"</span>,</span><br><span class="line">        historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">        inline: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(3)开启服务器<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">"script": &#123;</span><br><span class="line">    "server": "webpack-dev-server --open"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(4)运行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run server</span><br></pre></td></tr></table></figure></p><p>5.使用loaders</p>]]></content>
      
      
      <categories>
          
          <category> 前端工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 初探（下）</title>
      <link href="/2018/02/16/react%20%E5%88%9D%E6%8E%A2%20%E4%B8%8B/"/>
      <url>/2018/02/16/react%20%E5%88%9D%E6%8E%A2%20%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redux 探索其用法和原理</title>
      <link href="/2018/02/15/redux%20%E5%8E%9F%E7%90%86/"/>
      <url>/2018/02/15/redux%20%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 初探（上）</title>
      <link href="/2018/02/13/react%20%E5%88%9D%E6%8E%A2%20%E4%B8%8A/"/>
      <url>/2018/02/13/react%20%E5%88%9D%E6%8E%A2%20%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各大编辑器快捷键收集</title>
      <link href="/2018/01/17/t-note_kj_001/"/>
      <url>/2018/01/17/t-note_kj_001/</url>
      
        <content type="html"><![CDATA[<h4 id="Sublime-text-转载"><a href="#Sublime-text-转载" class="headerlink" title="Sublime text [转载]"></a>Sublime text [转载]</h4><ul><li>Mac版</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">作者：77plus</span><br><span class="line">链接：https://www.zhihu.com/question/39190896/answer/264524567</span><br><span class="line"></span><br><span class="line">cmd+n 新建页面</span><br><span class="line">cmd+数字键 切换到对应页面</span><br><span class="line">cmd+p 搜索跳转到对应页</span><br><span class="line">cmd+w 关闭页面</span><br><span class="line">cmd+j 合并一行</span><br><span class="line">cmd+d 选中当前单词，继续敲可以选中多个</span><br><span class="line">cmd+l 选中当前行</span><br><span class="line">cmd+z 撤销</span><br><span class="line">cmd+c 复制</span><br><span class="line">cmd+v 粘贴</span><br><span class="line">cmd+s 保存</span><br><span class="line">cmd+x 删除当前行</span><br><span class="line">cmd+delete 删除光标定位到当前行起始的一块</span><br><span class="line">cmd+]缩进当前行，[回缩当前行，对应tab/<span class="built_in">shift</span>+tab功能</span><br><span class="line">cmd+enter 向下开辟一行</span><br><span class="line">cmd+<span class="built_in">shift</span>+enter 向上开辟一行</span><br><span class="line">cmd+f 查询内容</span><br><span class="line">cmd+<span class="built_in">shift</span>+f 全局查询，可替换</span><br><span class="line">cmd+g 查询到的内容下一个</span><br><span class="line">cmd+鼠标右键 多点编辑</span><br><span class="line">cmd+~ 调出控制台</span><br><span class="line">cmd+k <span class="keyword">then</span> u 大写</span><br><span class="line">cmd+k <span class="keyword">then</span> l 小写</span><br><span class="line">cmd+<span class="built_in">shift</span>+p 调出命令面板</span><br><span class="line">cmd+⬅️ 光标定位到当前行最前 +<span class="built_in">shift</span> 选中</span><br><span class="line">cmd+➡️ 光标定位到当前行最后 +<span class="built_in">shift</span> 选中</span><br><span class="line">cmd+⬇️ 光标定位到当前页最后 +<span class="built_in">shift</span> 选中</span><br><span class="line">cmd+⬆️ 光标定位到当前页最前 +<span class="built_in">shift</span> 选中</span><br><span class="line"></span><br><span class="line">ctrl+g 跳转到对应行号</span><br><span class="line">ctrl+tab 切换到下一个页面</span><br><span class="line">ctrl+<span class="built_in">shift</span>+tab 切换到上一个页面</span><br><span class="line">ctrl+delete 删除光标定位到当前单词起始的一块</span><br><span class="line"></span><br><span class="line">opt+鼠标左键 纵向选择编辑</span><br><span class="line">opt+⬅️ 光标定位到当前块最前 +<span class="built_in">shift</span> 选中</span><br><span class="line">opt+➡️ 光标定位到当前块最后 +<span class="built_in">shift</span> 选中</span><br></pre></td></tr></table></figure><h4 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h4>]]></content>
      
      
      <categories>
          
          <category> 通用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git熟练运用</title>
      <link href="/2017/12/23/t-note_git_001/"/>
      <url>/2017/12/23/t-note_git_001/</url>
      
        <content type="html"><![CDATA[<h4 id="git与gitflow使用"><a href="#git与gitflow使用" class="headerlink" title="git与gitflow使用"></a>git与gitflow使用</h4><p>自从接触 git 来一直用一些简单的命令，但是最近工作经常遇到一些 git 的这种那种麻烦冲突，所以决定一定要熟练使用，先列出一个清单，然后多记多用，直到熟练为止</p><h4 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建本地 git 仓库</span></span><br><span class="line">git init [repoName]</span><br><span class="line"><span class="comment"># 克隆远程仓库</span></span><br><span class="line">git <span class="built_in">clone</span> [repoUrl]</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看配置内容</span></span><br><span class="line">git config --list</span><br><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">git config -e</span><br><span class="line"><span class="comment"># 配置姓名</span></span><br><span class="line">git config [--global] user.name <span class="string">"suoyue"</span></span><br><span class="line"><span class="comment"># 配置邮箱 </span></span><br><span class="line">git config [--glabal] .user.email <span class="string">"email"</span></span><br></pre></td></tr></table></figure><h4 id="分解"><a href="#分解" class="headerlink" title="分解"></a>分解</h4><p>平时我们</p><ul><li>工作区(workspace):平时编写代码的地方,本地的文件</li><li>暂存区(stash):我们在提交到本地仓库前的一个暂存处</li><li>本地仓库(repo)：提交后的本地仓库</li><li>远程仓库(remote)：远端的一个代码托管的仓库</li></ul><h4 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h4><ul><li>未跟踪(untracked)</li><li>未修改(ummodified)</li><li>已修改(modified)</li><li>已暂存(stashed)</li></ul><h4 id="添加、删除"><a href="#添加、删除" class="headerlink" title="添加、删除"></a>添加、删除</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加工作区改变的到暂存区</span></span><br><span class="line">git add [file1] [file2]</span><br><span class="line"><span class="comment"># 编辑工作区与本地不同的地方</span></span><br><span class="line">git add -e</span><br><span class="line"><span class="comment"># 添加所有修改或者删除的文件</span></span><br><span class="line">git add -u</span><br><span class="line"><span class="comment"># 添加变动的文件到暂存区</span></span><br><span class="line">git add -A</span><br><span class="line"><span class="comment"># 移除暂存区文件</span></span><br><span class="line">git rm [file1] [file2]</span><br><span class="line"><span class="comment"># 停止追踪某个文件</span></span><br><span class="line">git rm --cached [file1] [file2]</span><br><span class="line"><span class="comment"># 改名</span></span><br><span class="line">git mv [oriFile] [distFile]</span><br></pre></td></tr></table></figure><h4 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区的文件到仓库</span></span><br><span class="line">git commit -m <span class="string">"test commit"</span></span><br><span class="line">git commit [file1] [file2] -m <span class="string">"test commit"</span></span><br><span class="line"><span class="comment"># 全部直接提交</span></span><br><span class="line">git commit -a</span><br><span class="line"><span class="comment"># 显示diff</span></span><br><span class="line">git commit -v</span><br><span class="line"><span class="comment"># 替代上次提交</span></span><br><span class="line">git commit -ament -m <span class="string">"replace commit last"</span></span><br><span class="line">git commit -ament [file1] [file2] -m <span class="string">"replace commit last"</span></span><br></pre></td></tr></table></figure><h4 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用checkout </span></span><br><span class="line"><span class="comment"># 恢复暂存区文件到工作区 stash --&gt; work （撤销暂存）</span></span><br><span class="line">git checkout [file]</span><br><span class="line">git checkout</span><br><span class="line"><span class="comment"># 恢复某个commit到暂存区和工作区</span></span><br><span class="line">git checkout [commit] [file]</span><br><span class="line"><span class="comment"># 重置暂存区到仓库 stash --&gt; repo</span></span><br><span class="line">git reset [file]</span><br><span class="line">git reset [commit]</span><br><span class="line"><span class="comment"># 回滚commit stash &amp; work --&gt; repo (回滚提交)</span></span><br><span class="line">git reset --hard <span class="comment">#上一次</span></span><br><span class="line">git reset --hard [commit] <span class="comment">#指定</span></span><br><span class="line"><span class="comment"># 回滚commit 但是工作区和暂存区不变</span></span><br><span class="line">git reset --keep [commit] <span class="comment">#指定</span></span><br><span class="line"><span class="comment"># 新建commit 回滚应用当前分支</span></span><br><span class="line">git revert [commit]</span><br></pre></td></tr></table></figure><h4 id="忽略"><a href="#忽略" class="headerlink" title="忽略"></a>忽略</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑 git 忽略配置文件</span></span><br><span class="line">vim .gitignore</span><br><span class="line"><span class="comment"># 被写 git 忽略文件, git add 会自动忽略它</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># .gitignore 自动忽略log文件和文件名为suo结尾的文件</span></span><br><span class="line">*.<span class="built_in">log</span></span><br><span class="line">*suo</span><br></pre></td></tr></table></figure><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看本地分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="comment"># 查看远程的分支</span></span><br><span class="line">git branch -vgit</span><br><span class="line"><span class="comment"># 查看已跟踪到远程和本地所有分支</span></span><br><span class="line">git branch -a</span><br><span class="line"><span class="comment"># 新建一个分支名为ss的分支（不切换）</span></span><br><span class="line">git branch ss</span><br><span class="line"><span class="comment"># 新建一个分支名为test的分支并切换过去</span></span><br><span class="line">git checkout -b <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 切换分支并更新工作区</span></span><br><span class="line">git checkout ss</span><br><span class="line"><span class="comment"># 合并分支到当前</span></span><br><span class="line">git merge <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 如果有冲突手动改代码在添加提交</span></span><br><span class="line"><span class="comment"># 删除不用分支</span></span><br><span class="line">git checkout -d <span class="built_in">test</span> -m</span><br><span class="line"><span class="comment"># 新建远程分支</span></span><br><span class="line">git push origin ss:ss</span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">git push origin --delete ss</span><br><span class="line"><span class="comment"># 建立远程追踪关系</span></span><br><span class="line">git branch --<span class="built_in">set</span>-upstream-to=origin/ss <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h4 id="远程"><a href="#远程" class="headerlink" title="远程"></a>远程</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载远程变动</span></span><br><span class="line">git fetch xx </span><br><span class="line"><span class="comment"># 显示远程分支</span></span><br><span class="line">git remote -v</span><br><span class="line"><span class="comment"># 显示远程仓库信息</span></span><br><span class="line">git remote show xx</span><br><span class="line"><span class="comment"># 增加远程仓库</span></span><br><span class="line">git remote add xx[name] xx[url]</span><br><span class="line"><span class="comment"># 拉取远程变化,合并本地</span></span><br><span class="line">git pull xx[remote] xx[b]</span><br><span class="line"><span class="comment"># 推送本地到远程仓库</span></span><br><span class="line">git push xx[remote] xx[b]</span><br><span class="line"><span class="comment"># 强推，全推</span></span><br><span class="line">git push xx[remote] --force/--all</span><br></pre></td></tr></table></figure><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示变更文件</span></span><br><span class="line">git status</span><br><span class="line"><span class="comment"># 当前分支版本信息</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line">git reflog</span><br><span class="line">git <span class="built_in">log</span> --follow [file]</span><br><span class="line">git whatchanged [file] <span class="comment"># 追踪文件修改</span></span><br><span class="line">git <span class="built_in">log</span> -p [file] <span class="comment"># 文件相关diff</span></span><br><span class="line">git blame [file] <span class="comment"># 追责</span></span><br><span class="line"><span class="comment"># 比较</span></span><br><span class="line">git diff <span class="comment"># 暂存区与工作区</span></span><br><span class="line">git diff --cached [file] <span class="comment"># 暂存区与上一个commit</span></span><br><span class="line">git diff HEAD <span class="comment"># 工作区与最新commit</span></span><br><span class="line">git show [commit] <span class="comment"># commit的内容变化</span></span><br><span class="line">git show [commit] [file]</span><br></pre></td></tr></table></figure><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><ul><li>拉取远程合并本地（切换分支-&gt;拉取-&gt;修改-&gt;提交-&gt;推送）</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git commit -am <span class="string">'xx'</span> [提交] [or] git stash [暂存]</span><br><span class="line">git checkout xx [切换分支]</span><br><span class="line">git status [查看状态]</span><br><span class="line">git pull [拉取远程并合并]</span><br><span class="line">git <span class="built_in">log</span> [查看历史]</span><br><span class="line">git diff [对比]</span><br><span class="line">git status [查看忽略文件]</span><br><span class="line">git commit -am <span class="string">'xx'</span> [提交修改]</span><br><span class="line">git push [推到远程]</span><br></pre></td></tr></table></figure><ul><li>本地修复issue分支 (切换并新建分支-&gt;修改-&gt;提交-&gt;切回-&gt;合并-&gt;删除临时分支)</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b new-issue [切换新分支]</span><br><span class="line">git status [重要]</span><br><span class="line">git diff [对比]</span><br><span class="line">git commit -am <span class="string">"xx"</span></span><br><span class="line">git checkout ss [切换]</span><br><span class="line">git merge new-issue [合并分支]</span><br><span class="line">git checkout -d new-issue [删除分支]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 通用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各大编辑器快捷键收集</title>
      <link href="/2017/12/17/t-note_tools_001/"/>
      <url>/2017/12/17/t-note_tools_001/</url>
      
        <content type="html"><![CDATA[<h4 id="Sublime-text-转载"><a href="#Sublime-text-转载" class="headerlink" title="Sublime text [转载]"></a>Sublime text [转载]</h4><ul><li>Mac版</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">作者：77plus</span><br><span class="line">链接：https://www.zhihu.com/question/39190896/answer/264524567</span><br><span class="line"></span><br><span class="line">cmd+n 新建页面</span><br><span class="line">cmd+数字键 切换到对应页面</span><br><span class="line">cmd+p 搜索跳转到对应页</span><br><span class="line">cmd+w 关闭页面</span><br><span class="line">cmd+j 合并一行</span><br><span class="line">cmd+d 选中当前单词，继续敲可以选中多个</span><br><span class="line">cmd+l 选中当前行</span><br><span class="line">cmd+z 撤销</span><br><span class="line">cmd+c 复制</span><br><span class="line">cmd+v 粘贴</span><br><span class="line">cmd+s 保存</span><br><span class="line">cmd+x 删除当前行</span><br><span class="line">cmd+delete 删除光标定位到当前行起始的一块</span><br><span class="line">cmd+]缩进当前行，[回缩当前行，对应tab/<span class="built_in">shift</span>+tab功能</span><br><span class="line">cmd+enter 向下开辟一行</span><br><span class="line">cmd+<span class="built_in">shift</span>+enter 向上开辟一行</span><br><span class="line">cmd+f 查询内容</span><br><span class="line">cmd+<span class="built_in">shift</span>+f 全局查询，可替换</span><br><span class="line">cmd+g 查询到的内容下一个</span><br><span class="line">cmd+鼠标右键 多点编辑</span><br><span class="line">cmd+~ 调出控制台</span><br><span class="line">cmd+k <span class="keyword">then</span> u 大写</span><br><span class="line">cmd+k <span class="keyword">then</span> l 小写</span><br><span class="line">cmd+<span class="built_in">shift</span>+p 调出命令面板</span><br><span class="line">cmd+⬅️ 光标定位到当前行最前 +<span class="built_in">shift</span> 选中</span><br><span class="line">cmd+➡️ 光标定位到当前行最后 +<span class="built_in">shift</span> 选中</span><br><span class="line">cmd+⬇️ 光标定位到当前页最后 +<span class="built_in">shift</span> 选中</span><br><span class="line">cmd+⬆️ 光标定位到当前页最前 +<span class="built_in">shift</span> 选中</span><br><span class="line"></span><br><span class="line">ctrl+g 跳转到对应行号</span><br><span class="line">ctrl+tab 切换到下一个页面</span><br><span class="line">ctrl+<span class="built_in">shift</span>+tab 切换到上一个页面</span><br><span class="line">ctrl+delete 删除光标定位到当前单词起始的一块</span><br><span class="line"></span><br><span class="line">opt+鼠标左键 纵向选择编辑</span><br><span class="line">opt+⬅️ 光标定位到当前块最前 +<span class="built_in">shift</span> 选中</span><br><span class="line">opt+➡️ 光标定位到当前块最后 +<span class="built_in">shift</span> 选中</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 通用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一周上手 vue 框架：&lt;下篇&gt;</title>
      <link href="/2017/12/13/t-note_vue_002/"/>
      <url>/2017/12/13/t-note_vue_002/</url>
      
        <content type="html"><![CDATA[<h4 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h4><p>1.单组件过渡<br>2.初始渲染过渡<br>3.多组件过渡<br>4.列表过渡<br>5.可复用过渡<br>6.动态过渡<br>7.状态过渡</p><h4 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h4><p>混合mixins 分发vue组件中可复用功能的非常灵活的方式，混合对象可以包含任意组件选项<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">myMinxi = &#123;</span><br><span class="line">    created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hello()</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        hello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'hello from mixin!'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Component = Vue.extend(&#123;</span><br><span class="line">    mixins: [myMixin]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> component = <span class="keyword">new</span> Component()</span><br></pre></td></tr></table></figure></p><p>1.选项合并<br>组件和混合对象含有同名选项时，这些选项以恰当的方式混合<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mixin = &#123;</span><br><span class="line">    created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'混合对象的钩子被调用'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    mixins: [mixin],</span><br><span class="line">    created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'组件的钩子被调用'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 注意，命名冲突取组件对象的键值对</span></span><br></pre></td></tr></table></figure></p><p>2.全局混合<br>全局注册混合对象，一旦使用全局混合对象，将会影响到所有之后创建的vue 实例。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue.mixin(&#123;</span><br><span class="line">    created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> myOption = <span class="keyword">this</span>.$option.myOption</span><br><span class="line">        <span class="keyword">if</span> (myOption) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(myOption)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    myOption: <span class="string">'hello'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>3.自定义选项合并(省)</p><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><p>1.开发插件<br>全局插件</p><ul><li>添加全局方法或者属性</li><li>添加全局资源</li><li>通过全局 mixin 方法，添加一些组件选项</li><li>添加 Vue 实例方法，通过把他们添加到 Vue.prototype 上实现</li><li>一个库，提供自己的API，同时提供提到的一个或者多个功能<br>方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">myPlugin.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">    Vue.myGlobalMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    Vue.directive(<span class="string">'my-directive'</span>, &#123;</span><br><span class="line">        bind(el, binding, vnode, oldVnode)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>2.使用插件<br>通过全局方法使用插件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.use(MyPlugin)</span><br><span class="line"><span class="comment">// </span></span><br><span class="line">Vue.use(MyPlugin, &#123; <span class="attr">someOption</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"><span class="comment">// 自动阻止多次注册相同插件，只会注册一次</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用 Browserify 或者 webpack 提供的commonJS模块环境时</span></span><br><span class="line"><span class="keyword">var</span> Vue = <span class="built_in">require</span>(<span class="string">'vue'</span>)</span><br><span class="line"><span class="keyword">var</span> VueRouter = <span class="built_in">require</span>(<span class="string">'vue-router'</span>)</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br></pre></td></tr></table></figure><h4 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h4><p>用于常见的文本格式化，过滤用在两个地方：双花括号插值和v-bind表达式<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; msg | capitalize &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"rawId|formatId"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p>单页应用非常简单，增加路由后，要将组件映射到路由，然后告诉vue-router在哪里渲染他们<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello App<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用 router-link 组件来导航 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通过传人 `to` 属性指定链接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/foo"</span>&gt;</span>Go to Foo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/bar"</span>&gt;</span>Go to Bar<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由出口 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.定义组件</span></span><br><span class="line"><span class="keyword">const</span> Foo = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;foo&lt;/div&gt;'</span> &#125;</span><br><span class="line"><span class="keyword">const</span> Bar = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;bar&lt;/div&gt;'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.定义路由</span></span><br><span class="line"><span class="keyword">const</span> routers = [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/foo'</span>, <span class="attr">component</span>: Foo &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/bar'</span>, <span class="attr">component</span>: Bar &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.创建 router 实例，然后 `routers` 配置</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.创建和挂载根实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    router</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><h4 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h4><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一周上手 vue 框架：&lt;上篇&gt;</title>
      <link href="/2017/12/12/t-note_vue_001/"/>
      <url>/2017/12/12/t-note_vue_001/</url>
      
        <content type="html"><![CDATA[<p>接触 vue 时间并不长，之前一直用的 react，也很想学习一下 Vue，但是没有什么机会去接触。刚入职不久，公司用的 Vue，用了3-5天的时间学习了下 Vue 的官方教程。知识点还挺多的，现在重新梳理一遍，以备后续查看。</p><h2 id="一周内-Vue-框架快速上手"><a href="#一周内-Vue-框架快速上手" class="headerlink" title="一周内 Vue 框架快速上手"></a>一周内 Vue 框架快速上手</h2><p>首先列一个计划，打算一个星期能上手 Vue 的中型项目，任务还有点重，给自己加下油。</p><h3 id="计划表"><a href="#计划表" class="headerlink" title="计划表"></a>计划表</h3><table><thead><tr><th>时间</th><th>任务 </th></tr></thead><tbody><tr><td>周一</td><td><a href="https://cn.vuejs.org/v2/guide/list.html" target="_blank" rel="noopener">学习官方教程</a></td></tr><tr><td>周二</td><td><a href="">vue-demo</a></td></tr><tr><td>周三</td><td><a href="">vue-todo-list</a></td></tr><tr><td>周四</td><td><a href="">vue-exam-system</a></td></tr><tr><td>周五</td><td><a href="">vue-elma-admin</a></td></tr><tr><td>周六</td><td><a href="">总结</a></td></tr><tr><td>周日</td><td><a href="">整理</a></td></tr></tbody></table><h3 id="基础准备"><a href="#基础准备" class="headerlink" title="基础准备"></a>基础准备</h3><ul><li>HTML 基本标签语法(掌握）</li><li>CSS 基本语法(掌握）</li><li>JavaScript ES5以上的语法（掌握)</li><li>Jslint (掌握）</li><li>前端组件化(了解)</li><li>前端工程化 webpack(掌握)</li><li>UMD 模块标准(掌握)</li><li>Sass css编程式写法</li><li>npm 命令基本使用</li></ul><h3 id="官方教程知识点汇总"><a href="#官方教程知识点汇总" class="headerlink" title="官方教程知识点汇总"></a>官方教程知识点汇总</h3><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ol><li><p>直接引入 vue.js 文件<br>新手入门先用引入的js文件来做一些 demo，再过渡到大型的单文件的环境中去</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在线引入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 本地引入 这个js文件需要到官方网站里面下载，有压缩版的，和非压缩的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>构建工具环境<br>之后学习完路由之后才能理解里面的构建形式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 全局安装vue-cli</span></span><br><span class="line">npm install --global vue-cli</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一个webpack 模版的新项目</span></span><br><span class="line">vue init webpack my-project</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖</span></span><br><span class="line">cd my-project</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure></li></ol><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><p>1.插值<br>简单的理解就是，我们现在在 html 里面增加我们的模版的语法，框架后期会帮我编译成原生的 html<br>插入的值的部分就是我们页面中动态的部分，也就是可以变化的。不仅可以插入变量，还可以插入 js 的值表达式，甚至动态的属性<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 插文本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 插HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">"rawHtml"</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 插特性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"dynamicId"</span>&gt;</span>suo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 插js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; number + 1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>2.指令（directives）<br>这些带有 v- 前缀的属性就是我们所说的指令。作用是响应式的作用于 dom，也就是让我们可以通过我们插值的变化来改变 dom</p><p>(1)常用指令汇总</p><table><thead><tr><th>指令</th><th>作用 </th></tr></thead><tbody><tr><td>v-model</td><td>表单输入绑定</td></tr><tr><td>v-html</td><td>插入原生html</td></tr><tr><td>v-bind</td><td>对属性绑定值</td></tr><tr><td>v-on</td><td>对组件绑定事件</td></tr><tr><td>v-if</td><td>分支判断功能</td></tr><tr><td>v-show</td><td>切换CSS的display</td></tr><tr><td>v-for</td><td>循环迭代功能</td></tr></tbody></table><p>(2)指令的参数<br>每个指令有不同的功能，而每个功能有不同的小功能，所以可以使用参数来，缩小功能的范围，比如<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- v-bind:参数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 给href绑定一个动态的URL --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- v-on:参数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加一个点击事件行为 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">v-on:click</span>=<span class="string">"action"</span> &gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>(3)指令的修饰符<br>这个是来说明以什么样的方式来绑定<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 告诉v-on指令对于触发的事件调用event.preventDefault --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>3.缩写</p><ul><li>v-on 缩写成@</li><li>v-bind 缩写成：</li></ul><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>我们写好了模版，现在要使用 js 来操作这个模版，Vue 已经封装好了一个操作的方法，我们之间实例化就好了<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; reversedMsg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="comment">// 选择结点</span></span><br><span class="line">    el: <span class="string">'#example'</span>,</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    data: &#123;</span><br><span class="line">        msg: <span class="string">'suo'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 计算方法</span></span><br><span class="line">    computed: &#123;</span><br><span class="line">        reversedMsg: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.msg.split(<span class="string">''</span>).reversedMsg().join(<span class="string">''</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        fullname: &#123;</span><br><span class="line">            get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            set: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 通用方法</span></span><br><span class="line">    methods: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 侦听方法</span></span><br><span class="line">    watch: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 组件列表</span></span><br><span class="line">    components: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h4><p>1.属性绑定 v-bind<br>(1)Class<br>动态的操作 class, 可以与普通 class共存<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123; active: isActive, 'text-danger': hasError&#125;"</span> <span class="attr">class</span>=<span class="string">"static"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#example'</span>,</span><br><span class="line">    date: &#123;</span><br><span class="line">        isActive: <span class="literal">true</span>,</span><br><span class="line">        hasError: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>(2)Style<br>动态绑定内联样式<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    activeColor: <span class="string">'red'</span>,</span><br><span class="line">    fontSize: <span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.条件渲染 v-if 与 v-show<br>简单的判断指令的使用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"name"</span>&gt;</span>suo<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>yue<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>使用一组元素<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>what's app?<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>author: shaosuo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>新增多分支的判断<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"type === 'A"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"type === 'B"</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"type === 'C"</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>Not A/B/C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>使用 v-show 来控制显示</p><p>3.列表渲染 v-for<br>使用 v-for 指令来循环，减少代码的冗余，每个列表都是一样的，尽量绑定一个id来识别选项<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 模板中使用 v-for，items 数组中，迭代每一项 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lu</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">        &#123;&#123; item.msg &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">lu</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只要在 data 中写好数组 item 中的值，模板中就会自动添加进去</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#example'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        items: [</span><br><span class="line">            &#123; <span class="attr">msg</span>: <span class="string">'wo'</span>, <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">msg</span>: <span class="string">'shi'</span>, <span class="attr">id</span>: <span class="number">2</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">msg</span>: <span class="string">'suo'</span>, <span class="attr">id</span>: <span class="number">3</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>4.事件处理 v-on<br>使用 v-on 给组件绑定事件,可以直接用表达式，但是更多的是，写在js的方法里<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"counter += 1"</span>&gt;</span>Add 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"hello"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;counter&#125;&#125;times.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#example'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        greet: <span class="string">'你好啊'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        hello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="keyword">this</span>.greet)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>监听鼠标时，经常会有一些模式，决定事件的触发形式，下面是鼠标修饰符汇总</p><table><thead><tr><th>修饰符</th><th>作用</th></tr></thead><tbody><tr><td>stop</td><td>阻止单击事件继续传播</td></tr><tr><td>prevent</td><td>提交事件不再重载页面</td></tr><tr><td>capture</td><td>捕获模式</td></tr><tr><td>self</td><td>事件不是从内部触发</td></tr><tr><td>once</td><td>点击事件只会触发一次</td></tr></tbody></table><p>监听按键事件时，也有一些常见的键值，下面是键值汇总</p><table><thead><tr><th>修饰符</th><th>作用</th></tr></thead><tbody><tr><td>enter</td><td>enter键</td></tr><tr><td>tab</td><td>tab键</td></tr><tr><td>delete</td><td>删除键</td></tr><tr><td>esc</td><td>esc键</td></tr><tr><td>space</td><td>空白符键</td></tr><tr><td>up</td><td>上方向键</td></tr><tr><td>down</td><td>下方向键</td></tr><tr><td>left</td><td>左方向键</td></tr><tr><td>right</td><td>右方向键</td></tr><tr><td>ctrl</td><td>ctrl键</td></tr><tr><td>alt</td><td>alt键</td></tr><tr><td>shift</td><td>shift键</td></tr><tr><td>meta</td><td>meta键</td></tr></tbody></table><p>5.输入绑定 v-model<br>使用 v-model 指令在表单控件上实现双向绑定，负责监听输入事件并更新数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span> <span class="attr">placeholder</span>=<span class="string">"edit me"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其他的用法差不多，不用细写了</p><h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><p>为了扩展 HTML 元素，封装可重用的代码。有些情况下，组件也可以表现为 is 特性进行了扩展的原生 HTML 元素<br>1.使用组件<br>(1)全局注册<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component'</span>, &#123;</span><br><span class="line">    template: <span class="string">'&lt;div&gt; component &lt;/div&gt;'</span>,</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#example'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>(2)局部注册<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Child = &#123;</span><br><span class="line">    template: <span class="string">'&lt;div&gt; A custom component!&lt;/div&gt;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        <span class="string">'my-component'</span>: Child</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>(3)模板限制<br>(4)data函数<br>(5)组件组合</p><p>2.Prop<br>(1)传递数据<br>(2)单向数据流<br>(3)prop验证</p><p>3.非Prop特性<br>替换/合并现有特性</p><p>4.自定义事件<br>(1)使用 v-on 绑定自定义事件<br>(2)给组件绑定原生事件<br>(3).sync 修饰符<br>(4)使用自定义事件的表单输入组件<br>(5)自定义组件的 v-model</p><p>5.插槽<br>(1)单插槽<br>(2)具名插槽<br>(3)作用域插槽</p><p>6.动态组件</p><p>7.杂项<br>(1)编写可复用组件<br>(2)子组件引用<br>(3)异步组件<br>(4)高级异步组件<br>(5)组件名约定<br>(6)递归组件<br>(7)组件间的循环引用<br>(8)内联模板<br>(9)X-Template<br>(10)对低开销的静态组件使用 v-once</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活杂感</title>
      <link href="/2017/10/22/l-tell_thought_001/"/>
      <url>/2017/10/22/l-tell_thought_001/</url>
      
        <content type="html"><![CDATA[<p>快毕业了，面临着各种各样的选择，同时也不停的思考着，到底自己想过怎样的生活，该拥有怎样的生活态度。经过一番的思考体悟，便写下这一小段杂感。</p><h4 id="入门：独善其身"><a href="#入门：独善其身" class="headerlink" title="入门：独善其身"></a>入门：独善其身</h4><ul><li>有明确的目标，并为之努力奋斗着</li><li>做着自己感兴趣的事情</li><li>善待家人，善待自己</li></ul><h4 id="进阶：年轻有为"><a href="#进阶：年轻有为" class="headerlink" title="进阶：年轻有为"></a>进阶：年轻有为</h4><ul><li>一步一步实现了自己的小目标</li><li>做自己喜欢的事情，并小有成就</li><li>有着稳固的社交圈，相处和睦融洽 </li></ul><h4 id="精通：海阔鱼跃"><a href="#精通：海阔鱼跃" class="headerlink" title="精通：海阔鱼跃"></a>精通：海阔鱼跃</h4><ul><li>带着一群小伙伴，成就了一番事业</li><li>在喜欢的领域中，结交了不少志趣相投的朋友</li><li>家庭和睦温馨，社交游刃有余，生活不受拘束，自由自在</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 生活杂感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析设计模式在web开发中的应用&lt;一&gt;：单一职责</title>
      <link href="/2017/09/25/t-book_php_001/"/>
      <url>/2017/09/25/t-book_php_001/</url>
      
        <content type="html"><![CDATA[<p>经过接近两年的前端知识的学习，多多少少积累了不少知识和经验。一直想着写点东西，由于时间和自己学艺不精的原因，没有太多心思去写博客，现在暂时有点闲功夫了。想着还是写一点东西吧，所以这篇博客出来了。</p><h3 id="单一职责（SRP）"><a href="#单一职责（SRP）" class="headerlink" title="单一职责（SRP）"></a>单一职责（SRP）</h3><h4 id="1-简单举个例子"><a href="#1-简单举个例子" class="headerlink" title="1.简单举个例子"></a>1.简单举个例子</h4><p>一家 2000 人的工厂生产出 1000 辆汽车，如果每 2 个人负责一辆汽车的制造，要完成这个生产任务，可能几十年都完成不了。但是如果把这个任务拆分成一个一个小的任务，这里的每个工人都有自己独有的任务，有着专业的技能，那么每个人的职责是单一的，制作轮子的不必管制作灯泡的。这样效率就大大的提升了。是不是很容易理解呢</p><h4 id="2-在敏捷软件开发中，把“职责”定义为“变化的原因”"><a href="#2-在敏捷软件开发中，把“职责”定义为“变化的原因”" class="headerlink" title="2.在敏捷软件开发中，把“职责”定义为“变化的原因”"></a>2.在敏捷软件开发中，把“职责”定义为“变化的原因”</h4><p>对于一个类而言，应该只有一个引起它变化的原因，这句话怎么理解呢？<br>简单的说：就是一个类只负责一个功能领域里的一个职责，不同变化的原因放在不同的类中。<br>比如说 MVC 框架中，表单插入数据库字段过滤与安全检查应该放在 controller 层还是 model 层？<br>数据库过滤与安全检查是表单插入这一个功能领域里的一个职责，它应该单独封装成类，所以应该放在 model 层。<br>从上面的描述中可以看出，单一职责有 2 层含义：第一是避免相同的职责分散到不同的类中，第二避免一个类承担了太多的职责。</p><h4 id="3-单一职责的好处在于"><a href="#3-单一职责的好处在于" class="headerlink" title="3.单一职责的好处在于:"></a>3.单一职责的好处在于:</h4><ul><li>减少类之间的耦合：需求发生变化时，只修改一个类从而隔离了变化。如果一个类有不同的职责，当这些职责都耦合在一起，当一个职责发生变化时就会影响其他的职责。</li><li>提高类的复用性：当需要修改某个职责时，只需要替换掉这个类，不会影响其他的类的职责。<br>现在流行的组件化开发，就是使用了单一职责这一模式。</li></ul><h4 id="4-单一职责的体现"><a href="#4-单一职责的体现" class="headerlink" title="4.单一职责的体现"></a>4.单一职责的体现</h4><p>(1)工厂模式：负责生产对象，提供不同的参数生产不同的对象<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Db_Adapter</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">($config)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">query</span><span class="params">($query, $handle)</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 抽象的接口，并未给出具体的实现</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Db_Adapter_Mysql</span> <span class="keyword">implements</span> <span class="title">Db_Adapter</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $_dbLink;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">($config)</span> </span>&#123;</span><br><span class="line">            <span class="comment">/** code */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// MySQL的操作类，也可以是SQLite或者Oracle等等</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">sqlFactory</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">factory</span><span class="params">($type)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">include_once</span> <span class="string">'Drivers/'</span>.$type.<span class="string">'.php'</span>) &#123;</span><br><span class="line">                $classname = <span class="string">'Db_Adapter_'</span>.$type;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> $classname;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Driver not found'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 工厂模式，生成不同的对象</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>思考：工厂模式与单一职责有什么关系呢？</strong><br>其实有很大关系的，从上面我们可以看出，MySQL 操作，还有 SQLite 等等数据库的操作，都是用单独的类写出来的，这样做的原因就是，避免这些职责耦合到一个功能类里，所以把这些职责用单独的类封装起来了。但是单独封装了就会有个问题，一旦产生了功能变化，就应该可以自由的切换到各自的类中生成不同的对象。所以使用工厂模式来实现这一性质，当功能发生变化时，在执行的时候，传入恰当的参数就可以切换到相应的类生成相应的对象了。</p><p>(2)命令模式<br>命令模式将“命令请求者”和“命令执行者”职责分开，生成单独的职责。<br>举个例子，你去餐馆吃饭，餐馆有员工，厨师等角色，作为顾客，你需要把菜单投递给员工，由员工去通知厨师主管去实现，厨师收到菜单后，就按照菜单上的内容开始做菜。这里命令的请求和实现就完成了解耦。<br>代码模拟这一过程<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 模拟厨师</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cooker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">meal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'meal'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'drink'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">over</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'ok'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 模拟员工和厨师,绑定命令接受者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MealCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(cooker $cooker)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;cooker = $cooker;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;cooker-&gt;meal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrinkCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(cooker $cooker)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;cooker = $cooker;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;cooker-&gt;drink();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟员工与顾客</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cookerControl</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $mealcommand;</span><br><span class="line">    <span class="keyword">private</span> $drinkcommand;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addCommand</span><span class="params">(Command $mealcommand, Command $drinkcommand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mealcommand = $mealcommand;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;drinkcommand = $drinkcommand;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calldrink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mealcommand-&gt;execute();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calldrink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;drinkcommand-&gt;exexute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现命令模式</span></span><br><span class="line">$control = <span class="keyword">new</span> cookControl;</span><br><span class="line">$cooker = <span class="keyword">new</span> cooker;</span><br><span class="line">$mealcommand = <span class="keyword">new</span> MealCommand($cooker);</span><br><span class="line">$drinkcommand = <span class="keyword">new</span> DrinkCommand($cooker);</span><br><span class="line">$control-&gt;addCommand($mealCommand, $drinkcommand);</span><br><span class="line">$control-&gt;callmeal();</span><br><span class="line">$control-&gt;calldrink();</span><br></pre></td></tr></table></figure><p>代码模拟出来了，为啥要这么写呢?当然是解耦啦，但这是怎么个解耦法呢？这样做有好处呢？<br>由上可以看出，第一个好处，厨师的做饭和做喝的是分离的，是两个不同的类，做饭这一职责和做菜这一职责相互独立互不影响。第二个好处，顾客的命令和厨师的执行是分离的，一旦厨师的执行出现了问题，重新执行就可以了，但是如果顾客未与厨师功能分离开来，这整个命令的过程都会受到影响。<br>(3)MVC 模式<br><img src="/images/dm1.png" alt="img"><br>由上图可知，这些业务是非常复杂的，各层之间分层很细，有很多子模块，系统的总体设计的原则是，把复杂的业务逻辑分成各种子模块，子系统。这样的架构更加利用，各个模块之间的解耦和分工合作。</p>]]></content>
      
      
      <categories>
          
          <category> web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>框架初探：jQuery 初体验</title>
      <link href="/2017/03/13/t-book_jq_001/"/>
      <url>/2017/03/13/t-book_jq_001/</url>
      
        <content type="html"><![CDATA[<p>学过一段时间，也用过一段时间 JavaScript，总感觉原生的 JS 需要处理太多的兼容问题。有没有一个好的工具，把这些麻烦事件都给封装起来。当然是有的，自从用了 jQuery， 代码敲得少了，处理的事情却更多。现在写一个入门的博客，以便以后翻阅。</p><h3 id="jQuery-是啥"><a href="#jQuery-是啥" class="headerlink" title="jQuery 是啥"></a>jQuery 是啥</h3><p>jQuery 本身是很小型框架的，这个有点像我们学习 C++ 中的 STL (标准模板库)，简单来说就是大神们帮我们把一些复杂的实现逻辑封装成一个函数或者类直接供我们来用。其中也考虑了健壮性和兼容性以及性能问题，真的是很好很方便的工具。就让我站在巨人们的身上敲代码吧。</p><h3 id="jQuery-原理"><a href="#jQuery-原理" class="headerlink" title="jQuery 原理"></a>jQuery 原理</h3><p>jQuery3.0.0 现在采用的是 ES5 语法并没有采用 ES6 语法的,而且全部采用的是严格模式，我仔细看了下未压缩源码总共有 10038 行，规模还算不小。<br>但是整体的结构的设计变化不大。</p><p>jQuery 的核心是一个 <strong>立即执行的匿名函数</strong>，接收两个参数，一个是 <code>global</code> 对象，一个是 <code>factory</code> 的函数对象。<br>下面是它的核心的源码结构，核心函数是507行完，大部分代码其实是在扩展里面<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">( <span class="function"><span class="keyword">function</span>(<span class="params"> global, factory </span>) </span>&#123;</span><br><span class="line">    <span class="string">"using strict"</span>;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span>.exports === <span class="string">"object"</span> ) &#123;</span><br><span class="line">        <span class="comment">// 定义模块对象</span></span><br><span class="line">        <span class="built_in">module</span>.exports = global.document ?</span><br><span class="line">            factory( global, <span class="literal">true</span> ) :</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params"> w </span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> ( !w.document ) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>( <span class="string">"jQuery requires a window with a document"</span> );</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> factory( w );</span><br><span class="line">            &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        factory( global );</span><br><span class="line">    &#125;</span><br><span class="line">&#125; )( <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">"undefined"</span> ? <span class="built_in">window</span> : <span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> window, noGlobal </span>) </span>&#123;</span><br><span class="line">    <span class="string">"using strict"</span>;</span><br><span class="line">    <span class="comment">// 代码</span></span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure></p><p>这段代码的主要作用是判断 <code>global.document</code> 是否存在，不存在就抛出错误，存在就定义的模块为传进来的 <code>factory</code> 对象。<br>所以其实真正的操作全在 <code>factory</code> 的函数里。<br>比较在意的是 jQuery 的代码风格和我们大多数人平时的风格不一样，松散性太高，有些不习惯</p><p>下面我们看看 factory 函数里到底写了些什么呢<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"> window, noGlobal </span>) </span>&#123;</span><br><span class="line">    <span class="string">"using strict"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">document</span> = <span class="built_in">window</span>.document;</span><br><span class="line">    <span class="keyword">var</span> getProto = <span class="built_in">Object</span>.getPrototypeOf;</span><br><span class="line">    <span class="keyword">var</span> slice = arr.slice;</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">    <span class="comment">// 这里是把一些数组的方法作了简化</span></span><br><span class="line">    <span class="keyword">var</span></span><br><span class="line">        varsion = <span class="string">"3.0.0"</span>,</span><br><span class="line">        jQuery = <span class="function"><span class="keyword">function</span>(<span class="params"> selector, context </span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> jQuery.fn.init( selector, context );</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// code</span></span><br><span class="line">        fcamelCase = <span class="function"><span class="keyword">function</span>(<span class="params"> all, letter </span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> letter.toUpperCase();</span><br><span class="line">        &#125;;</span><br><span class="line">    jQuery.fn = jQuery.prototype = &#123;</span><br><span class="line">        <span class="comment">// code</span></span><br><span class="line">    &#125;;</span><br><span class="line">    jQuery.extend = jQuery.fn.extend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// code</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这 500 多行整体的结构大致就是这样的，学了 ES5 理解这些代码也不难，它首先处理了基本类型数组的一些方法，然后定义了 jQuery 选择器的方法初始化过程，然后定义 jQuery 的核心方法和原型的调用过程，最后增加了 jQuery 的扩展。具体 10000 多行代码也不细说了。下面看看怎么用吧。</p><h3 id="开始用-jQuery"><a href="#开始用-jQuery" class="headerlink" title="开始用 jQuery"></a>开始用 jQuery</h3><p>开始 jQuery 真的很简单</p><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>两种方式引用<br>1.下载后引用本地库<br>我们到官网下载jQuery的不同版本，然后把文件放到我的项目目录中，供调用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jQuery初探测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/jquery-3.0.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"test.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>我下载的是最新的3.0.0版本，在html引用，后写一个js测试一下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"hello world"</span>);</span><br><span class="line">&#125;); <span class="comment">// hello world</span></span><br></pre></td></tr></table></figure></p><p>2.在线直接引用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jQuery初探测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-3.0.0.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"test.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>测试结果相同<br>说明：中间有个 min 是压缩版，就是生产版本，没有的就是开发版本。不同场景使用不同版本，开发版本可以直接修改内容，生产版本已经压缩好了，一般就是直接用于产品了。</p><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>选择一个元素或者元素集合，对选中的元素进行操作，比如<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jQuery初探测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/jquery-3.0.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"test.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>can't see me<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常写法</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"h1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).addClass(<span class="string">"color"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"h2"</span>).mouseover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).hide();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"h1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).addClass(<span class="string">"color"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"h2"</span>).mouseover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).hide();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>也可在线测试 <a href="http://runjs.cn/code/agukaw1z" target="_blank" rel="noopener"><strong>jquery在线测试</strong></a></p><h3 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h3><p>具体全面的使用，参照<a href="http://jquery.cuishifeng.cn/" target="_blank" rel="noopener"><strong>API</strong></a>;<br>我现在一个方面实现几个简单的 demo</p><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><p>先写一个模板<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"dome"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/jquery.3.0.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给body添加css</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">document</span>.body).css(<span class="string">"color"</span>, <span class="string">"red"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4><p><code>$(selector, [context])</code>,第一个参数为选择器，第二个对象是可选项，选择器的当前环境<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例1</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 给div p 增加 css</span></span><br><span class="line">    $(<span class="string">"div p"</span>).addCss(<span class="string">"color"</span>, <span class="string">"red"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 鼠标移动上去就隐藏</span></span><br><span class="line">    $(<span class="string">"div.myclass"</span>).mouseover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).hide();</span><br><span class="line">    &#125;);</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 找到页面中的第一个表单，选择里面的input,点击改变值</span></span><br><span class="line">    $(<span class="string">"input"</span>, <span class="built_in">document</span>.forms[<span class="number">0</span>]).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).attr(<span class="string">"value"</span>, <span class="string">"出来了"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="动态创建"><a href="#动态创建" class="headerlink" title="动态创建"></a>动态创建</h4><p><code>$(html, [ownerdocument])</code>第一个参数为 html 片段，第二个是可选项，为 html 所属文档文档<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个hello的div插入到.hide中</span></span><br><span class="line">$(<span class="string">"&lt;div&gt;&lt;p&gt;hello&lt;/p&gt;&lt;/div&gt;"</span>).appendTo(<span class="string">".hide"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建div元素并声明对象的属性</span></span><br><span class="line">$(<span class="string">"&lt;div&gt;"</span>, &#123;</span><br><span class="line">    <span class="string">"class"</span>: <span class="string">"test"</span>,</span><br><span class="line">    text: <span class="string">"click me"</span>,</span><br><span class="line">    click: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).toggleClass(<span class="string">'test'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).appendTo(<span class="string">"body"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个imput</span></span><br><span class="line">$(<span class="string">"&lt;input&gt;"</span>, &#123;</span><br><span class="line">    type: <span class="string">"text"</span>,</span><br><span class="line">    val: <span class="string">"Test"</span>,</span><br><span class="line">    focusin: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).addClass(<span class="string">"active"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    focusout: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).removeClass(<span class="string">"active"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).appendTo(<span class="string">"form"</span>);</span><br></pre></td></tr></table></figure></p><h4 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h4><p>简单的使用，jQuery.ajax(url, [setting])<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 发送一个ajax请求</span></span><br><span class="line"><span class="comment">// Ajax</span></span><br><span class="line">  <span class="keyword">var</span> data = $.ajax(&#123;</span><br><span class="line">      type: <span class="string">"get"</span>,</span><br><span class="line">      url: <span class="string">"demo1.php"</span>,</span><br><span class="line">      data: <span class="string">"name=suo&amp;gender=male"</span>,</span><br><span class="line">      asyns: <span class="literal">true</span>,</span><br><span class="line">      cache: <span class="literal">false</span>,</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"good"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;).reponseText;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br></pre></td></tr></table></figure></p><p>使用AJAX进行跨域请求<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"input[name='username']"</span>).keyup(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> username = $(<span class="keyword">this</span>).val();</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: <span class="string">"http://101.132.34.184/demo/demo1.php"</span>,</span><br><span class="line">            dataType: <span class="string">"json"</span>,</span><br><span class="line">            type: <span class="string">"post"</span>,</span><br><span class="line">            data: &#123; <span class="string">"username"</span>: username &#125;,</span><br><span class="line">            crossDomain: <span class="literal">true</span>,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo/demo1.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// 允许跨域</span></span><br><span class="line">    header(<span class="string">"Access-Control-Allow-Origin:*"</span>);</span><br><span class="line">    $userDB = [<span class="string">"shaosuo"</span>, <span class="string">"suoyue"</span>, <span class="string">"yue"</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">"username"</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>(in_array($_POST[<span class="string">"username"</span>], $userDB)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">php<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><em>还有一些用法，这里不一一测试了，做到这些也算是入门了，多查文档多熟悉语法，jQuery 用熟练了才算真正的好用</em></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECMAScript 6 之 Module</title>
      <link href="/2016/09/15/t-book_js_0/"/>
      <url>/2016/09/15/t-book_js_0/</url>
      
        <content type="html"><![CDATA[<h4 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h4><p>在 ES6 以前，JavaScript 始终没有模块体系，无法将一个大程序拆分成相互依赖的小程序，再用简单的方法拼装起来。而其它语言却都有这样的功能。如 Ruby的<code>require</code>,Python的<code>import</code>,甚至 css 都有<code>@import</code>。因此社区制定了一些模块加载方案，主要有 CommonJS 和 AMD 两种，前者用于服务器，后者用于浏览器。 ES6 在语言标准层面上，实现了模块功能，而且相当简单，完全可以替代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。</p><h4 id="ES6-模块设计思想"><a href="#ES6-模块设计思想" class="headerlink" title="ES6 模块设计思想"></a>ES6 模块设计思想</h4><p>是尽量的静态化，使得编译时就能确定模块之间的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块只能在运行时确定这些东西。比如，CommonJS 模块就是对象，输入时必须查找对象属性。</p><p>CommonJS 写法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; stat, exist, readFile &#125; = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> _fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">let</span> stat = _fs.stat;</span><br><span class="line"><span class="keyword">let</span> exist = _fs.exist;</span><br><span class="line"><span class="keyword">let</span> readFile = _fs.readFile;</span><br></pre></td></tr></table></figure></p><p>ES6 模块写法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; stat, exist, readFile &#125; <span class="keyword">from</span> <span class="string">'fs'</span>;</span><br></pre></td></tr></table></figure></p><p>编译时加载方法，使得静态分析成为可能，效率也更高<br>它的好处</p><ul><li>不需要 UMD 模块格式，将来服务器和浏览器都会支持</li><li>将来浏览器的新 API 就能用模块格式来提供</li><li>不再需要对象作为命令空间</li></ul><h4 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h4><p>ES6 模块自动采用严格模式</p><ul><li>变量必须声明后使用</li><li>函数参数不能同名</li><li>不能使用<code>with</code></li><li>不能对<code>const</code>变量赋值</li><li>不能用<code>0</code>表示八进制</li><li>不能删除不可删除属性</li><li><code>eval</code>不会在外层作用域引入变量</li><li><code>eval</code>和<code>agrgument</code>不能重新赋值</li><li>不能使用<code>arguments.callee</code></li><li>不能使用<code>arguments.caller</code></li><li>禁止<code>this</code>指向全局变量</li><li>增加保留字<code>protected</code>, <code>static</code>, <code>interface</code></li></ul><h4 id="import与export-命令"><a href="#import与export-命令" class="headerlink" title="import与export 命令"></a>import与export 命令</h4><p><code>import</code>和<code>export</code>构成模块的对外接口</p><p><strong>1.import</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mian.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;name, gender, age&#125; <span class="keyword">from</span> <span class="string">'./person'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重命名</span></span><br><span class="line"><span class="keyword">import</span> &#123;name <span class="keyword">as</span> n&#125; <span class="keyword">from</span> <span class="string">'./person'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只加载不输入</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./person'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模块整体加载</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> person <span class="keyword">from</span> <span class="string">'./person'</span>;</span><br></pre></td></tr></table></figure></p><p>注意：</p><ul><li>不能使用表达式，静态效果</li><li>可以提升到头部</li><li>加载两次同样的模块，只执行一次</li></ul><p><strong>2.export</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单次定义</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> name = <span class="string">"suo"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> gender = <span class="string">"male"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> age = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量定义</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'suo'</span>;</span><br><span class="line"><span class="keyword">var</span> gender = <span class="string">"male"</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;name, gender, age&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重命名</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    name <span class="keyword">as</span> n,</span><br><span class="line">    gender <span class="keyword">as</span> g,</span><br><span class="line">    age <span class="keyword">as</span> a</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x + y; &#125;</span><br><span class="line"><span class="keyword">export</span> &#123; sum &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    sum <span class="keyword">as</span> s;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认输出</span></span><br><span class="line"><span class="comment">// export-default.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"ok"</span>);</span><br><span class="line">&#125; <span class="comment">// 非匿名也可以</span></span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'./export-default'</span>;</span><br><span class="line">foo(); <span class="comment">// ok</span></span><br></pre></td></tr></table></figure></p><p>注意：后两种就算只有一个变量或者函数也要花括号</p><p><strong>3.复合写法</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;name, gender&#125; <span class="keyword">from</span> <span class="string">'person'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">import</span> &#123;name, gender&#125; <span class="keyword">from</span> <span class="string">'person'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;name, gender&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重命名</span></span><br><span class="line"><span class="keyword">export</span> &#123;name <span class="keyword">as</span> n&#125; <span class="keyword">from</span> <span class="string">'person'</span>;</span><br><span class="line"><span class="comment">// 整体</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'person'</span>;</span><br><span class="line"><span class="comment">// 默认</span></span><br><span class="line"><span class="keyword">export</span> &#123;<span class="keyword">default</span>&#125; <span class="keyword">from</span> <span class="string">'person'</span>;</span><br><span class="line"><span class="comment">// 具名改默认</span></span><br><span class="line"><span class="keyword">export</span> &#123;name <span class="keyword">as</span> <span class="keyword">default</span>&#125; <span class="keyword">from</span> <span class="string">'person'</span>;</span><br><span class="line"><span class="comment">// 默认改具名</span></span><br><span class="line"><span class="keyword">export</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> name&#125; <span class="keyword">from</span> <span class="string">'person'</span>;</span><br></pre></td></tr></table></figure></p><h4 id="模块的继承"><a href="#模块的继承" class="headerlink" title="模块的继承"></a>模块的继承</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;getName <span class="keyword">as</span> personName&#125; <span class="keyword">from</span> <span class="string">'person'</span>;</span><br><span class="line"><span class="comment">// 输出其中的一部分，并改名</span></span><br></pre></td></tr></table></figure><h4 id="跨模块常量"><a href="#跨模块常量" class="headerlink" title="跨模块常量"></a>跨模块常量</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> A = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> B = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test1.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">from</span> <span class="string">'main'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test2.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;A, B&#125; <span class="keyword">from</span> <span class="string">'main'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// db.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> db = &#123;</span><br><span class="line">    name: <span class="string">"suo"</span>,</span><br><span class="line">    paw: <span class="string">"suoyue"</span>,</span><br><span class="line">    info: <span class="string">"ok"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// user.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> user = [<span class="string">'suo'</span>, <span class="string">'yue'</span>, <span class="string">'smile'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;db&#125; <span class="keyword">from</span> <span class="string">'db'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;user&#125; <span class="keyword">from</span> <span class="string">'user'</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ECMAScript6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECMAScript 6 之 let 和 const 命令</title>
      <link href="/2016/09/10/t-book_js_012/"/>
      <url>/2016/09/10/t-book_js_012/</url>
      
        <content type="html"><![CDATA[<p>学习前端有一段时间了，ECMAScript5 也算是掌握的差不多了。经过了这段时间的实践，也从中发现ECMAScript5 有很多不方便的地方。比如只有函数作用域，块级作用域需要模拟，还有面向对象也是不足够的，等等。后来我接触到了 ECMAScript6 果然在这个新版本中，很多 ES5 的遗留问题都得到改善。所以我近期找了一些 ES6 的资料书来学习。其中入门最佳的书籍，要推阮一峰老师的 《ECMAScript 6入门》 了。感谢一峰老师的知识的整理，提升了我学习 ES6 的效率。</p><h3 id="let命令"><a href="#let命令" class="headerlink" title="let命令"></a>let命令</h3><p>类似于<code>var</code>，<strong>只在块中有效。变相的新增了块级作用域有没有</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">"suo"</span>;</span><br><span class="line">    <span class="keyword">var</span> gender = <span class="string">"male"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(name); <span class="comment">// suo</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">//</span></span><br><span class="line"><span class="built_in">console</span>.log(gender); <span class="comment">// yue</span></span><br></pre></td></tr></table></figure></p><p><strong>1.适合使用for循环</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="string">"suo"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// suo suo suo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.</span></span><br></pre></td></tr></table></figure></p><p>知道注意的地方是，<code>let</code>用在<code>for</code>循环中是输出了三次<code>suo</code>，说明<code>for</code>中的两个<code>let</code>的作用域也不一样</p><p><strong>2.不存在变量声明提升</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"><span class="keyword">let</span> name = <span class="string">"suo"</span>;</span><br><span class="line"><span class="comment">// Uncaught ReferenceError: name is not defined</span></span><br></pre></td></tr></table></figure></p><p>变量使用一定要在声明后使用，否则报错</p><p><strong>3.暂时性死区</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"suo"</span>;</span><br><span class="line">&#123;</span><br><span class="line">    name =<span class="string">"yue"</span>;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">"suo yue"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Uncaught ReferenceError: name is not defined</span></span><br></pre></td></tr></table></figure></p><p>一旦块中有<code>let</code>声明的变量，该变量即与块绑定，不受外界变量干扰</p><p><strong>4.不允许重复声明</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">"suo"</span>;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">"yue"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Identifier 'name' has already been declared</span></span><br></pre></td></tr></table></figure></p><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>let 实际是给 JavaScript 新增了块级作用域<br><strong>1.作用域嵌套</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">"suo"</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> name =<span class="string">"yue"</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(name); <span class="comment">// yue</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(name); <span class="comment">// yue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>作用域之间任意嵌套互不影响</p><p><strong>2.块级作用域域函数声明</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"suo"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"yue"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    foo(); <span class="comment">// suo</span></span><br><span class="line">&#125;</span><br><span class="line">foo(); <span class="comment">// suo</span></span><br></pre></td></tr></table></figure></p><p>函数声明互不影响，不同环境运行不一样。避免使用函数声明，用函数表达式替代</p><p><strong>3.do表达式(提案)</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">    a = a + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// Uncaught SyntaxError: Unexpected token do</span></span><br></pre></td></tr></table></figure></p><h3 id="const-命令"><a href="#const-命令" class="headerlink" title="const 命令"></a>const 命令</h3><p>与 c++ 类似，const 声明一个只读常量，一旦声明不可改变，同时也意味着声明必须初始化<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.1415926</span>;</span><br><span class="line">PI = <span class="number">3</span>; <span class="comment">//Assignment to constant variable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LENGTH; </span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure></p><p><strong>1.只在声明所在的块级作用域内有效</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(PI); <span class="comment">// VM143:4 Uncaught ReferenceError: PI is not defined</span></span><br></pre></td></tr></table></figure></p><p><strong>2.不可重复声明</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">const</span> PI = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Identifier 'PI' has already been declared</span></span><br></pre></td></tr></table></figure></p><p><strong>3.const的本质</strong><br><code>const</code>保证的是变量指向的内存地址不改变。对于引用类型来说，变量名本身就是一个指向实际的内存指针。所以总结来说<code>const</code>是让变量名与它指向的内存的地址，这一关系不变。相当于 C 语言中的指针常量而不是常量指针。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name: <span class="string">"suo"</span>,</span><br><span class="line">    gender: <span class="string">"male"</span></span><br><span class="line">&#125;;</span><br><span class="line">person.name = <span class="string">"yue"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// yue</span></span><br><span class="line"></span><br><span class="line">person1 = &#123;</span><br><span class="line">    name: <span class="string">"yue"</span>,</span><br><span class="line">    gender: <span class="string">"female"</span></span><br><span class="line">&#125;;</span><br><span class="line">person = person1; </span><br><span class="line"><span class="comment">// Uncaught TypeError: Assignment to constant variable</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ECMAScript6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 写常见算法之二分查找</title>
      <link href="/2016/06/23/t-note_ar_001/"/>
      <url>/2016/06/23/t-note_ar_001/</url>
      
        <content type="html"><![CDATA[<p>学习数据结构时，写过很多二分查找，具体细节已经忘的差不多了。现在重新用 JavaScript 捡起来，这其实和我之前写的快排有异曲同工之妙。</p><h3 id="二分查找原理"><a href="#二分查找原理" class="headerlink" title="二分查找原理"></a>二分查找原理</h3><p>1.思想：<strong>减而治之</strong><br><strong>同样先选择一个轴点，左边比轴点小，右边比轴点大。目标大于左边，则缩减整体规模为左边，反之缩减至右边规模。</strong></p><p>2.方法：<strong>迭代</strong><br>简单分为 2 步</p><ul><li>确定中间轴点</li><li>迭代深入，轴点替换换上下界</li></ul><h3 id="JavaScript-代码"><a href="#JavaScript-代码" class="headerlink" title="JavaScript 代码"></a>JavaScript 代码</h3><p>代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始数组</span></span><br><span class="line"><span class="keyword">var</span> originArr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">14</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binSearch</span>(<span class="params">arr, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> mi, <span class="comment">// 轴点下标</span></span><br><span class="line">        lo = <span class="number">0</span>, <span class="comment">// 下界下标</span></span><br><span class="line">        hi = arr.length; <span class="comment">// 上界下标</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (hi - lo &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 取整处理</span></span><br><span class="line">        mi = <span class="built_in">Math</span>.floor((hi + lo) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (target &lt; arr[mi]) &#123;</span><br><span class="line">            hi = mi;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mi] &lt; target)&#123;</span><br><span class="line">            lo = mi;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mi;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(binSearch(originArr, <span class="number">4</span>));</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 写常见算法之快速排序</title>
      <link href="/2016/06/22/t-note_ar_002/"/>
      <url>/2016/06/22/t-note_ar_002/</url>
      
        <content type="html"><![CDATA[<p>之前学习数据结构的时候，用 C++ 的模板写过快速排序，而且还写了不少的变种。现在将用 JavaScipt 再重新复习一遍吧</p><h3 id="快速排序原理"><a href="#快速排序原理" class="headerlink" title="快速排序原理"></a>快速排序原理</h3><p>1.思想： <strong>分而治之</strong><br><strong>选择一个数作为轴点，将整个序列分为左右两侧，左边不比轴点大，右边不比轴点小，对左右两边的子集迭代或递归直至缩减为最小规模。</strong></p><p>2.方法： <strong>递归</strong><br>简单分为4 步</p><ul><li>求平凡解</li><li>选取轴点</li><li>左右分组</li><li>递归连接</li></ul><h3 id="JavaScipt-代码"><a href="#JavaScipt-代码" class="headerlink" title="JavaScipt 代码"></a>JavaScipt 代码</h3><p>代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始序列</span></span><br><span class="line"><span class="keyword">var</span> originArr = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.最小规模</span></span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.确定轴点</span></span><br><span class="line">    <span class="keyword">var</span> povitIndex = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">var</span> pivot = arr.splice(povitIndex, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3.遍历集合分类</span></span><br><span class="line">    <span class="keyword">var</span> leftArr = [], rightArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &lt; pivot) &#123;</span><br><span class="line">            leftArr.push(arr[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            rightArr.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.递归子集并连接</span></span><br><span class="line">    <span class="keyword">return</span> quickSort(leftArr).concat(pivot, quickSort(rightArr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(quickSort(originArr));</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端工程化之路：初探 Gulp流式构建工具</title>
      <link href="/2016/06/10/t-note_gulp_001/"/>
      <url>/2016/06/10/t-note_gulp_001/</url>
      
        <content type="html"><![CDATA[<p>用了一段事件的 webpack，感觉挺好用的，现在也试一下 gulp，这个工具上手起来其实也很快的。虽然它和 webpack 的原理相差很大，但是都能出色的完成任务。所以写一篇入门博客供以后参考。</p><h3 id="什么是-gulp"><a href="#什么是-gulp" class="headerlink" title="什么是 gulp"></a>什么是 gulp</h3><p>流式自动化构建工具，简单的说就是，把输入的某些东西，经过某个管道处理后，输出需要的形式。</p><h3 id="为什么要用-gulp"><a href="#为什么要用-gulp" class="headerlink" title="为什么要用 gulp"></a>为什么要用 gulp</h3><p>简单来说，就是减少我们一个一个构建的时间，使用这个工具自动化构建，如：scss 转化成 css, ES6 转化成 ES5, 等等，只要装了插件都能完成，最后就是把这些功能都写在一个函数里面，一起处理。</p><h4 id="gulp-安装"><a href="#gulp-安装" class="headerlink" title="gulp 安装"></a>gulp 安装</h4><p>和其他 npm 一样，直接输入命令<br>全局安装<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global gulp</span><br></pre></td></tr></table></figure></p><p>工程安装<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp</span><br></pre></td></tr></table></figure></p><h4 id="gulp-使用"><a href="#gulp-使用" class="headerlink" title="gulp 使用"></a>gulp 使用</h4><p><strong>1.在工程目录里新建文件 gulpfile, 然后引入gulp</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br></pre></td></tr></table></figure></p><p><strong>2.gulp 四个核心方法</strong></p><ul><li>task() : 执行的任务</li><li>src()  : 输入的文件</li><li>pipe() : 执行的管道方法，接在源后面或者其他管道后面</li><li>dest() : 输出的位置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个参数为任务名（默认为default)， 第一个是任务内容</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'../source/*.js'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'../dest'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>3.gulp 插件使用</strong></p><p>安装压缩插件<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global gulp-uglify</span><br></pre></td></tr></table></figure></p><p>使用插件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'compess'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'../source/js/*.js'</span>)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'../dest/js'</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>执行任务<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp compress</span><br></pre></td></tr></table></figure></p><h4 id="gulp-实践"><a href="#gulp-实践" class="headerlink" title="gulp 实践"></a>gulp 实践</h4><p>根据需要搜索想要的插件并安装<a href="http://www.gulpjs.com.cn/docs/" target="_blank" rel="noopener">gulp文档</a>与<a href="https://gulpjs.com/plugins/" target="_blank" rel="noopener">gulp插件</a><br>任务列表：</p><table><thead><tr><th>任务</th><th>插件</th></tr></thead><tbody><tr><td>检测js</td><td>gulp-jshint</td></tr><tr><td>scss =&gt; css</td><td>gulp-sass</td></tr><tr><td>jsx =&gt; js</td><td>gulp-react</td></tr><tr><td>es6 =&gt; es5</td><td>gulp-babel</td></tr><tr><td>文件拷贝</td><td>gulp-copy</td></tr><tr><td>文件合并</td><td>gulp-concat</td></tr><tr><td>压缩js</td><td>gulp-uglify</td></tr><tr><td>压缩css</td><td>gulp-cssmin</td></tr><tr><td>压缩html</td><td>gulp-htmlmin</td></tr><tr><td>压缩img</td><td>gulp-imagemin</td></tr></tbody></table><p>安装各种插件<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm insatll --global gulp-sass </span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>写构建任务<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);</span><br><span class="line"><span class="keyword">var</span> jsinit = <span class="built_in">require</span>(<span class="string">'gulp-jsinit'</span>);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">gulp.task(<span class="string">'all'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'../source/js'</span>)</span><br><span class="line">        .pipe(react())</span><br><span class="line">        .pipe(babel())</span><br><span class="line">        .pipe(concat())</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp(<span class="string">'../dest/js'</span>));</span><br><span class="line">    gulp.src(<span class="string">'../source/css'</span>)</span><br><span class="line">        .pipe(sass())</span><br><span class="line">        .pipe(concat())</span><br><span class="line">        .pipe(cssmin())</span><br><span class="line">        .pipe(<span class="string">'../dest/css'</span>);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>执行任务<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp all</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 前端工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端工程化之路：初探 Sass 技术</title>
      <link href="/2016/03/23/t-note_sass_001/"/>
      <url>/2016/03/23/t-note_sass_001/</url>
      
        <content type="html"><![CDATA[<p>对于 CSS 来说这门语言就如同是写给设计者们的。语言本身是不需要编译的。而且写起来简单明了，但是对于程序员来说没有一种编程的感觉。对于一些重复冗余的代码，无力提高编写效率。现在推出了两个工具 Sass 和 Less，决定尝试一下，慢慢的适应用编程的方式来写 css。因此写了这篇入门的博客，以便以后忘记了的地方能很快捡起来。</p><h3 id="Sass-语法"><a href="#Sass-语法" class="headerlink" title="Sass 语法"></a>Sass 语法</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通变量：全局使用属性值</span></span><br><span class="line"><span class="variable">$mainColor</span>: <span class="number">#666666</span>;</span><br><span class="line"><span class="variable">$color</span>: <span class="number">#ff0000</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">background-color</span>: <span class="variable">$mainColor</span>; <span class="attribute">color</span>: $  color;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认变量</span></span><br><span class="line"><span class="variable">$color</span>: <span class="number">#ff0000</span>;</span><br><span class="line"><span class="variable">$color</span>: <span class="number">#000</span> !default; <span class="comment">// 组件化开发时有用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特殊变量：名字属性或者其他的</span></span><br><span class="line">$borderDire = top;</span><br><span class="line"><span class="selector-class">.border-</span>#&#123;<span class="variable">$borderDire</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">border</span>-#&#123;<span class="variable">$borderDire</span>&#125;: <span class="variable">$color</span> <span class="number">1px</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多值变量</span></span><br><span class="line">$pList = 5px 10px 15px 20px;</span><br><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">margin</span>: <span class="variable">$pList</span>;&#125;</span><br><span class="line">$hSize = (h1: 10px, h2: 15px, h3: 20px);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量(将新增)</span></span><br><span class="line"><span class="variable">$color</span>: <span class="number">#333333</span>;</span><br><span class="line"><span class="variable">$color</span>: <span class="number">#666666</span> !global;</span><br></pre></td></tr></table></figure><h4 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选择器嵌套</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="selector-class">.main</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="selector-tag">body</span> <span class="selector-class">.main</span> &#123;<span class="attribute">color</span>: <span class="variable">$color</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性嵌套</span></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: &#123;</span><br><span class="line">        left: &#123;</span><br><span class="line">            width: <span class="number">2px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">top</span>: &#123;</span><br><span class="line">            width: <span class="number">3px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="selector-class">.main</span> &#123;<span class="attribute">border-left-width</span>: <span class="number">2px</span>; <span class="attribute">border-top-width</span>: <span class="number">3px</span>;&#125;</span><br></pre></td></tr></table></figure><h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file: _reset.scss</span></span><br><span class="line">* &#123;<span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// file: test.scss</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">'reset'</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="selector-class">.main</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">* &#123;<span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span> 0;&#125;</span><br><span class="line"><span class="selector-tag">body</span> <span class="selector-class">.main</span> &#123;<span class="attribute">color</span>: <span class="number">#c</span>olor;&#125;</span><br></pre></td></tr></table></figure><h4 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无参</span></span><br><span class="line">@<span class="keyword">mixin</span> center-block &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    @<span class="keyword">include</span> center-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有参</span></span><br><span class="line">@<span class="keyword">mixin</span> box-sizing (<span class="variable">$sizing</span>) &#123;</span><br><span class="line">    -webkit-<span class="attribute">box-sizing</span>: <span class="variable">$sizing</span>;</span><br><span class="line">       -moz-bix-sizing: <span class="variable">$sizing</span>;</span><br><span class="line">                sizing: <span class="variable">$sizing</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-border</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="variable">$color</span> solid;</span><br><span class="line">    @<span class="keyword">include</span> box-sizing(border-box);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多参</span></span><br><span class="line">@<span class="keyword">mixin</span> border-default(<span class="variable">$borderWidth</span>: 1px, <span class="variable">$borderStyle</span>: dashed) &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="variable">$borderWidth</span> <span class="variable">$borderStyle</span> <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123;@<span class="keyword">include</span> border-default;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// media问题</span></span><br><span class="line">@<span class="keyword">mixin</span> screen-max(<span class="variable">$res</span>) &#123;</span><br><span class="line">    @<span class="keyword">media</span> only screen and (max-width: <span class="variable">$res</span>) &#123;</span><br><span class="line">        @<span class="keyword">content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">include</span> screen-max(<span class="number">600px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$baseFontSize</span>: <span class="number">10px</span> !default;</span><br><span class="line"><span class="variable">$greyColor</span>: <span class="number">#cccccc</span> !default;</span><br><span class="line"></span><br><span class="line">@function pxToRem(<span class="variable">$px</span>) &#123;</span><br><span class="line">    @return <span class="variable">$px</span> / <span class="variable">$baseFontSize</span> * 1rem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: pxToRem(<span class="number">20px</span>); <span class="comment">// 自定义</span></span><br><span class="line">    <span class="attribute">color</span>: darken(<span class="variable">$greyColor</span>, <span class="number">20%</span>); <span class="comment">// 内置函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;<span class="attribute">height</span>: <span class="variable">$height</span>; <span class="attribute">width</span>: <span class="variable">$width</span>;&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;@<span class="keyword">extend</span> .main; <span class="attribute">color</span>: <span class="variable">$color</span>;&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;@<span class="keyword">extend</span> .main; <span class="attribute">color</span>: <span class="number">#777777</span>;&#125;</span><br></pre></td></tr></table></figure><h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;<span class="attribute">width</span>: <span class="number">500px</span>;&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;<span class="attribute">width</span>: <span class="number">200px</span>;&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;<span class="attribute">width</span>: <span class="number">500px</span> - <span class="number">200px</span> - <span class="number">30px</span>;&#125;</span><br></pre></td></tr></table></figure><h4 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 双目判断</span></span><br><span class="line">$size = 10;</span><br><span class="line">$color = red;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    @<span class="keyword">if</span> <span class="variable">$size</span> &lt; 10 &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    @<span class="keyword">if</span> <span class="variable">$color</span> == yellow &#123;</span><br><span class="line">        <span class="attribute">color</span>: darken(yellow, <span class="number">20%</span>);</span><br><span class="line">    &#125; @<span class="keyword">else</span> if <span class="variable">$color</span> == green &#123;</span><br><span class="line">        <span class="attribute">color</span>: darken(green, <span class="number">30%</span>);</span><br><span class="line">    &#125; @<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三目判断</span></span><br><span class="line">if(true, 1px, 2px) <span class="comment">// 1px</span></span><br></pre></td></tr></table></figure><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1-10</span></span><br><span class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 1 through 10 &#123;</span><br><span class="line">    <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125;: &#123;</span><br><span class="line">        display: none;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1-10</span></span><br><span class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 1 to 11 &#123;</span><br><span class="line">    <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125;: &#123;</span><br><span class="line">        display: none;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Sass-安装"><a href="#Sass-安装" class="headerlink" title="Sass 安装"></a>Sass 安装</h3><p>1.安装 Ruby<br>2.安装 Sass<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install sass</span><br></pre></td></tr></table></figure></p><h3 id="Sass-编译"><a href="#Sass-编译" class="headerlink" title="Sass 编译"></a>Sass 编译</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单文件编译</span></span><br><span class="line">sass test.scss test.css</span><br><span class="line"><span class="comment"># 文件夹监听编译</span></span><br><span class="line">sass --watch scssDir:cssDir </span><br><span class="line"><span class="comment"># 逆向转换</span></span><br><span class="line">sass-convert test.css test.scss</span><br></pre></td></tr></table></figure><h3 id="Sass-调试"><a href="#Sass-调试" class="headerlink" title="Sass 调试"></a>Sass 调试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启调试</span></span><br><span class="line">sass --watch scssDir:cssDir --debug-info</span><br><span class="line">sass --watch scssDir:cssDir --sourcemap</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sass </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习新技术：从 HTML4 到 HTML5 的改变</title>
      <link href="/2016/03/13/t-note_h5_001/"/>
      <url>/2016/03/13/t-note_h5_001/</url>
      
        <content type="html"><![CDATA[<p>很长时间都在和 HTML5 打交道，但是并没有区分 HTML5 和 HTML4 。但是今天我偶然看了一本 H5 的书籍 《H5网页设计入门必读》 ，读完之后，才想到原来这么多特性是 HTML5 的。由此我在这里做一个分类总结。总结一下 HTML5 到底有什么新的地方。</p><p>很久之前，我读了一本CSS的书籍《CSS权威指南》，里面详细概述了关于 <strong>结构和表现分离</strong>的思想。为什么谈到这个呢？原因是现在我们说的 H5 的改变很多都是基于这种思想。为了将 HTML 从表现化中脱离出来。</p><h3 id="HTML5新增特性"><a href="#HTML5新增特性" class="headerlink" title="HTML5新增特性"></a>HTML5新增特性</h3><p>H5总得来说从6个方面做出了改变：<br>1.弃用过时元素标签<br>2.新增结构元素标签<br>3.新增富媒体元素标签<br>4.增强表单属性<br>5.新增JavaScript API<br>6.语义化，容错性提高</p><h4 id="弃用过时标签"><a href="#弃用过时标签" class="headerlink" title="弃用过时标签"></a>弃用过时标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 框架家族 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">frame</span>&gt;</span><span class="tag">&lt;/<span class="name">frame</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">frameset</span>&gt;</span><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">noframes</span>&gt;</span><span class="tag">&lt;/<span class="name">noframes</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 弃用 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 首字母缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">acronym</span> <span class="attr">title</span>=<span class="string">"Suo Yue"</span>&gt;</span>SY<span class="tag">&lt;/<span class="name">acronym</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 弃用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">abbr</span> <span class="attr">ttile</span>=<span class="string">"Suo Yue"</span>&gt;</span>SY<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 替代 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 显示元素 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 弃用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">big</span>&gt;</span><span class="tag">&lt;/<span class="name">big</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strike</span>&gt;</span><span class="tag">&lt;/<span class="name">strike</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- css替代--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="新增结构元素"><a href="#新增结构元素" class="headerlink" title="新增结构元素"></a>新增结构元素</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- section:集合理论上相关的内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>锁的博客<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是邵锁的博客<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- header:介绍和导航的辅助工具 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>邵锁<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>邵锁的博客<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- footer:内部元素信息，作者版权相关内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>邵锁<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>邵锁的博客<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>作者：邵锁<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- aside: 侧边栏，相关性不大的内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>总计文章12篇<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- nav:全站导航信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nav</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- article:与aection相似，是section一个特殊类别，用于自包含内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nav</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- hgroup:不希望内容现在在文件大纲内 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hgroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>suo yue<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>suo suo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hgroup</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="新增富媒体元素标签"><a href="#新增富媒体元素标签" class="headerlink" title="新增富媒体元素标签"></a>新增富媒体元素标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- canvas:创建动态图像的环境 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"suo"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span> </span><br><span class="line">var canvas = dociment.getElementById('suo');</span><br><span class="line">var context = canvas.getContext('2d');</span><br><span class="line">context.strokeStyle = '#666666';</span><br><span class="line">context.strokeRect(20, 20, 100, 100);</span><br><span class="line"><span class="comment">&lt;!-- 绘制一个正方形 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- audio:音频 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"canon.mp3"</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"canon.mp3"</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"canon.mp3"</span> <span class="attr">autobuffer</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 兼容音频格式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"canon.ogg"</span> <span class="attr">type</span>=<span class="string">"audio/ogg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"canon.mp3"</span> <span class="attr">type</span>=<span class="string">"audio/mp3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- video:视频 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"movie.mp4"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 兼容视频格式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"movie.ogv"</span> <span class="attr">type</span>=<span class="string">"video/ogv"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"movie.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="增强表单属性"><a href="#增强表单属性" class="headerlink" title="增强表单属性"></a>增强表单属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 以前的常规表单 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"login.php"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- placeholder:没有值则插入占位符，定位后删除，离开恢复 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- autofocus:自动聚焦模式,文件加载后自动聚焦到某一表单栏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">autofocus</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- required:将脚本变为标记 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- autocomplete:自动填写表单 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">autocomplete</span>=<span class="string">"on"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- datalist:一系列选项关联到输入栏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">list</span>=<span class="string">"suoyue"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"suoyue"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"suoyue"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"suo"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"shaosuo"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"yue"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"shaosuoyue"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- type:新增类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"url"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"tel"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">min</span>=<span class="string">"1"</span> <span class="attr">max</span>=<span class="string">"10"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">min</span>=<span class="string">"1"</span> <span class="attr">max</span>=<span class="string">"10"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"datetime"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"datetime-local"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"time"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"month"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"color"</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 自定类型:正则表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">pattern</span>=<span class="string">"[\d]5"</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《JavaScript高级程序设计》读后记&lt;十一&gt;：跨域</title>
      <link href="/2015/12/15/t-book_js_011/"/>
      <url>/2015/12/15/t-book_js_011/</url>
      
        <content type="html"><![CDATA[<p>终于到了收官之作了，学了这么长时间的 JavaScript ，对这门语言也有一个全面的认识。虽然你没有 C 系列经典健全，没有 Java 系列流行应用广泛，也许也没有 PHP 广受追捧。甚至天生的不完美给开发者带来不少麻烦，各个浏览器不同的支持兼容性也很让人头疼。但是随着前端的发展，作为一门脚本语言，你变化越来越大也越来越完善，同时好的工具也层出不穷，各种开源技术遍地开花。因此我始终相信你会成为一门理想的编程语言，让前端这个领域始终朝气蓬勃。</p><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p>什么是跨域？为什么跨域？这一切都要从它谈起：<strong>同源策略</strong>。<br>同源策略：同协议，同域，同端口<br>如果三个条件满足就是同源，两个不同源的站点是无法获取数据的。这是浏览器的一种策略。目的是为了保护用户信息安全，防止窃取数据。<br>具体是以下行为被禁止</p><ul><li>Cookie 和 LocalStroage ，indexDB 无法读取</li><li>Dom 无法获得</li><li>Ajax 请求无法获得<br>下面我们具体了解下 Ajax</li></ul><h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><p>全称 Asynchronous JavaScript + XML，这个技术能够向服务器请求额外的数据而无需卸载页面，简单的说就是无刷新技术，不需要刷新页面就可以获得新数据并显示在页面上。<br>这个技术的核心是<code>XMLHttpRequest</code>对象</p><h4 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h4><p>直接上代码吧<br>1.创建 XHR 对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建XHR对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> XMLHttpRequest != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">        <span class="comment">// IE7 以上版本</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> ActiveXObject != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">        <span class="comment">// IE7 之前的版本</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">arguments</span>.callee.activeXString != <span class="string">"string"</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> versions = [<span class="string">"MSXML2.XMLHttp6.0"</span>, <span class="string">"MSXML2.XMLHTTP.3.0"</span>, <span class="string">"MSXML2.XMLHttp"</span>];</span><br><span class="line">        <span class="keyword">var</span> <span class="number">1</span>, len;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>, len = versions.length; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">new</span> ActiveXObject(versions[i]);</span><br><span class="line">                <span class="built_in">arguments</span>.callee.activeXString = versions[i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">                <span class="comment">// 跳过</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ActivaXObject(<span class="built_in">arguments</span>.callee.activeXString);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"no xhr object avaiable"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.使用 XHR 方法和属性<br>发送同步请求<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建XHR对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = createXHR();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动请求(同步)</span></span><br><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"login.php"</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器收到请求后自动填充xhr对象的属性</span></span><br><span class="line"><span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr status &lt; <span class="number">300</span> || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"request fail!"</span> + xhr.status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发送异步请求<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = createXHR(); <span class="comment">// 0状态</span></span><br><span class="line"></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 检测请求状态</span></span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="comment">// 检测状态码，确认响应成功返回</span></span><br><span class="line">        <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span> || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"xhr.responseText"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"fail"</span> + xhr.status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1状态</span></span><br><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"login.php"</span>, <span class="string">"true"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2状态</span></span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用xhr.about()可以取消异步请求</span></span><br></pre></td></tr></table></figure></p><p>说明：</p><ul><li>responseText: 响应主体被返回的文本</li><li>responseXML: 响应的XML DOM 文档</li><li>status: 响应的HTTP状态，200成功，304资源未修改</li><li>statusText: HTTP状态说明</li><li>readyState: 0未初始-1启动-2发送-3接收-4完成</li></ul><p>3.HTTP 头部信息<br>(1)发送 XHR 时还会发送相应的头部信息</p><ul><li>Accept: 浏览器能处理的内容</li><li>Accept-Charset: 能处理的字符集</li><li>Accept-Encoding: 压缩编码</li><li>Accept-Language: 语言</li><li>Connection: 连接类型</li><li>Cookie: 设置的 Cookie</li><li>Host: 所在的域</li><li>Referer: 请求的 URL (Referrer拼写正确的单词)</li><li>User-Agent: 用户代理字符串</li></ul><p>(2)设置获取头部信息<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// send方法之前</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">"User-Agent"</span>, <span class="string">"suo"</span>); <span class="comment">// 设置</span></span><br><span class="line"></span><br><span class="line">xhr.getRequestHeader(<span class="string">"User-Agent"</span>); <span class="comment">// 获取</span></span><br><span class="line"></span><br><span class="line">xhr.getRequestHeader(); <span class="comment">// 获取所有</span></span><br></pre></td></tr></table></figure></p><p>(3)Get 请求<br>关键在于处理字符格式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理字符函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addURLParam</span>(<span class="params">url, name, value</span>) </span>&#123;</span><br><span class="line">    url += (url.indexOf(<span class="string">"?"</span>) == <span class="number">-1</span> ? <span class="string">"?"</span> : <span class="string">"&amp;"</span>);</span><br><span class="line">    url += encodeURLComponent(name) + <span class="string">"="</span> + encodeURLComponent(value);</span><br><span class="line">    <span class="keyword">return</span> url;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">"index.php"</span>;</span><br><span class="line">url = addURLParam(url, <span class="string">"name"</span>, <span class="string">"suo"</span>);</span><br><span class="line">url = addURLParam(url, <span class="string">"friend"</span>, <span class="string">"yue"</span>);</span><br><span class="line"><span class="comment">// 请求</span></span><br><span class="line">xhr.open();</span><br></pre></td></tr></table></figure></p><p>(4)Post 请求<br>模仿表单提交<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">"post"</span>, <span class="string">"login"</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"user-info"</span>);</span><br><span class="line">xhr.send(serialize(form));</span><br></pre></td></tr></table></figure></p><h4 id="XMLHttpRequest2"><a href="#XMLHttpRequest2" class="headerlink" title="XMLHttpRequest2"></a>XMLHttpRequest2</h4><p>1.FromData<br>2.超时设定<br>3.进度事件<br>4.progress 事件</p><h4 id="进度事件"><a href="#进度事件" class="headerlink" title="进度事件"></a>进度事件</h4><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>全称为Cross-Origin Resource Sharing, 跨域资源共享，W3C新出来的一个规范的跨域方法<br>在发送请求的时候添加一个 origin 头部，服务器根据头部信息决定是否响应<br>Origin: <a href="http://suosmile.cn" target="_blank" rel="noopener">http://suosmile.cn</a><br>服务器判断是否要响应，可以接受就回发一个<br>Access-Control-Allow-Origin: <a href="http://suosmile.cn" target="_blank" rel="noopener">http://suosmile.cn</a></p><h4 id="IE-实现-CORS"><a href="#IE-实现-CORS" class="headerlink" title="IE 实现 CORS"></a>IE 实现 CORS</h4><p>IE8 中引入了 XDR 类型</p><ul><li>cookie 不会随请求发出，也不会响应返回</li><li>只能设置请求头部信息中的 Content-Type 字段</li><li>不能访问响应头部信息</li><li>只支持 GET 和 POST</li><li>默认异步</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建XDR</span></span><br><span class="line"><span class="keyword">var</span> xdr = <span class="keyword">new</span> XDomainRequest();</span><br><span class="line"><span class="comment">// 成功触发</span></span><br><span class="line">xdr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(xdr.responseText);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 错误返回</span></span><br><span class="line">xdr.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"error"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 超时</span></span><br><span class="line">xdr.timeout = <span class="number">1000</span>;</span><br><span class="line">xdr.ontimeout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"timeout"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 启动</span></span><br><span class="line">xdr.open(<span class="string">"post"</span>, <span class="string">"http://suosmile.cn"</span>);</span><br><span class="line"><span class="comment">// 设置post格式</span></span><br><span class="line">xdr.contentType = <span class="string">"application/x-www-form-urlencoded"</span>;</span><br><span class="line"><span class="comment">// 发送</span></span><br><span class="line">xdr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h4 id="其他浏览器实现"><a href="#其他浏览器实现" class="headerlink" title="其他浏览器实现"></a>其他浏览器实现</h4><p>只需要把<code>XMLHttpRequest</code>对象中的<code>open</code>方法的<code>url</code>改写成绝对地址就可以了，但是会有一些限制</p><ul><li>不能使用<code>setRequestHeader()</code>和<code>getAllResponseHeaders()</code>方法</li><li>不能发送和接收<code>cookie</code></li></ul><h4 id="跨浏览器实现"><a href="#跨浏览器实现" class="headerlink" title="跨浏览器实现"></a>跨浏览器实现</h4><h3 id="图片-Ping"><a href="#图片-Ping" class="headerlink" title="图片 Ping"></a>图片 Ping</h3><p>一个网页可以从任何网页加载图片<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.onload = img.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"ok"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">img.src = <span class="string">"http://suosmile.cn?name=suo"</span>; <span class="comment">// ok</span></span><br></pre></td></tr></table></figure></p><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>全称Json with padding的简写，是应用JSON的一种新方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callback(&#123;<span class="string">"name"</span>:<span class="string">"suo"</span>&#125;);</span><br></pre></td></tr></table></figure></p><p>有两个部分组成，一个是回调函数和数据<br>通过动态操作脚本实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleResponse</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.ip + <span class="string">","</span> + response.city + <span class="string">','</span> + response.region_name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">script.src = <span class="string">"http://suosmile.cn?callback=handleResponse"</span>;</span><br><span class="line"><span class="built_in">document</span>.body.insertBefore(script, <span class="built_in">document</span>.body.firstChild);</span><br></pre></td></tr></table></figure></p><h3 id="Comet"><a href="#Comet" class="headerlink" title="Comet"></a>Comet</h3><p>一种高级的<code>Comet</code>，高级的<code>AJAX</code></p><h3 id="服务器发送"><a href="#服务器发送" class="headerlink" title="服务器发送"></a>服务器发送</h3><p>SSE </p><h3 id="Web-Sockets"><a href="#Web-Sockets" class="headerlink" title="Web Sockets"></a>Web Sockets</h3><h3 id="SSE"><a href="#SSE" class="headerlink" title="SSE"></a>SSE</h3><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《JavaScript高级程序设计》读后记&lt;十&gt;：事件</title>
      <link href="/2015/12/12/t-book_js_010/"/>
      <url>/2015/12/12/t-book_js_010/</url>
      
        <content type="html"><![CDATA[<h3 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h3><h4 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h4><h4 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h4><h4 id="DOM-事件流"><a href="#DOM-事件流" class="headerlink" title="DOM 事件流"></a>DOM 事件流</h4><h3 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h3><h4 id="HTML-事件处理程序"><a href="#HTML-事件处理程序" class="headerlink" title="HTML 事件处理程序"></a>HTML 事件处理程序</h4><h4 id="DOM0-级事件处理程序"><a href="#DOM0-级事件处理程序" class="headerlink" title="DOM0 级事件处理程序"></a>DOM0 级事件处理程序</h4><h4 id="DOM2-级事件处理程序"><a href="#DOM2-级事件处理程序" class="headerlink" title="DOM2 级事件处理程序"></a>DOM2 级事件处理程序</h4><h4 id="IE-事件处理"><a href="#IE-事件处理" class="headerlink" title="IE 事件处理"></a>IE 事件处理</h4><h4 id="跨浏览器事件处理"><a href="#跨浏览器事件处理" class="headerlink" title="跨浏览器事件处理"></a>跨浏览器事件处理</h4><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><h4 id="DOM-事件对象"><a href="#DOM-事件对象" class="headerlink" title="DOM 事件对象"></a>DOM 事件对象</h4><h4 id="IE-事件对象"><a href="#IE-事件对象" class="headerlink" title="IE 事件对象"></a>IE 事件对象</h4><h4 id="跨浏览器事件对象"><a href="#跨浏览器事件对象" class="headerlink" title="跨浏览器事件对象"></a>跨浏览器事件对象</h4><h3 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h3><h4 id="UI-事件"><a href="#UI-事件" class="headerlink" title="UI 事件"></a>UI 事件</h4><h4 id="焦点事件"><a href="#焦点事件" class="headerlink" title="焦点事件"></a>焦点事件</h4><h4 id="鼠标滚轮事件"><a href="#鼠标滚轮事件" class="headerlink" title="鼠标滚轮事件"></a>鼠标滚轮事件</h4><h4 id="键盘文本事件"><a href="#键盘文本事件" class="headerlink" title="键盘文本事件"></a>键盘文本事件</h4><h4 id="复合事件"><a href="#复合事件" class="headerlink" title="复合事件"></a>复合事件</h4><h4 id="变动事件"><a href="#变动事件" class="headerlink" title="变动事件"></a>变动事件</h4><h4 id="HTML5事件"><a href="#HTML5事件" class="headerlink" title="HTML5事件"></a>HTML5事件</h4><h4 id="设备事件"><a href="#设备事件" class="headerlink" title="设备事件"></a>设备事件</h4><h4 id="触摸手势事件"><a href="#触摸手势事件" class="headerlink" title="触摸手势事件"></a>触摸手势事件</h4><h3 id="内存与性能"><a href="#内存与性能" class="headerlink" title="内存与性能"></a>内存与性能</h3><h4 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h4><h4 id="移除事件处理程序"><a href="#移除事件处理程序" class="headerlink" title="移除事件处理程序"></a>移除事件处理程序</h4><h3 id="模拟事件"><a href="#模拟事件" class="headerlink" title="模拟事件"></a>模拟事件</h3><h4 id="模拟鼠标事件"><a href="#模拟鼠标事件" class="headerlink" title="模拟鼠标事件"></a>模拟鼠标事件</h4><h4 id="模拟键盘事件"><a href="#模拟键盘事件" class="headerlink" title="模拟键盘事件"></a>模拟键盘事件</h4><h4 id="模拟其他事件"><a href="#模拟其他事件" class="headerlink" title="模拟其他事件"></a>模拟其他事件</h4>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《JavaScript高级程序设计》读后记&lt;九&gt;：DOM</title>
      <link href="/2015/12/10/t-book_js_009/"/>
      <url>/2015/12/10/t-book_js_009/</url>
      
        <content type="html"><![CDATA[<p>DOM 为 <strong>Document Object Model</strong> 的缩写，也是 HTML 和 XML 文档的一个 API 接口。描绘的是一个层次化节点树，允许开发人人添加移除和修改页面的某一部分。</p><h4 id="节点层次"><a href="#节点层次" class="headerlink" title="节点层次"></a>节点层次</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用一个图片描述一下</p><p>1.Node 类型</p><p><strong>属性</strong><br>(1)nodeType<br>JavaScipt中的所有节点类型都继承与Node类型。因此所有节点都共享着相同的基本属性和方法<br>每个节点都有个NodeType属性，用于表明节点的类型。节点类型由在Node类型中定义的下列12个数值常量来表示，任何节点类型必居其一</p><ul><li>Node.ElEMNRT_NODE</li><li>Node.ATTRIBUTE_NODE</li><li>Node.TEXT_NODE</li><li>Node.CDATASELECTION_NODE</li><li>Node.ENTITY_REFERENCE_NODE</li><li>Node.ENYIYY_NODE</li><li>Node.PROCESSING_INSTUCATION_NODE</li><li>Node.COMMENT_NODE</li><li>Node.DOCUMNENT_NODE</li><li>Node.DOCUMENT_TYPE_NODE</li><li>Node.DOCUMENT_FRAGMENT_NODE</li><li>Node.NOTATION_NODE</li></ul><p>通过比较上面这些常量很容易确定节点的类型<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (someNode.nodeTyep == Node.ELEMENT) &#123;</span><br><span class="line">    alert(<span class="string">"node is element type"</span>); <span class="comment">// ie无效</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 也可以直接与数字比较</span></span><br></pre></td></tr></table></figure></p><p>(2)nodeName：保存标签名<br>(3)nodeValue：null<br>(4)childNodes:保存着NodeList对象，一组有序的序列<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> firstChild = someNode.childNodes[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> length = someNode.childNodes.length;</span><br></pre></td></tr></table></figure></p><p>(5)parentNode:指向文档父节点<br>(6)nextSibling:下一个节点<br>(7)previouSibling:上一个节点<br>(8)ownerDocument:整个文档的文档节点</p><p><strong>方法</strong><br>(1)appendChild方法<br>在childNodes列表的末尾添加一个节点<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> returnedNode = someNode.appendChild(newNode);</span><br></pre></td></tr></table></figure></p><p>(2)insertBefore方法<br>插入特定的位置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入到第一个</span></span><br><span class="line"><span class="keyword">var</span> aNode1 = someNode.appendChild(newNode, someNode.firstChild);</span><br><span class="line"><span class="comment">// 插入到倒数第二个</span></span><br><span class="line"><span class="keyword">var</span> aNode2 = someNode.appendChild(newNode, someNode.lastChild);</span><br></pre></td></tr></table></figure></p><p>(3)replaceChild方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 替换第一个</span></span><br><span class="line"><span class="keyword">var</span> aNode1 = someNode.replaceChild(newNode, someNode.firstChild); </span><br><span class="line"><span class="comment">// 替换最后一个</span></span><br><span class="line"><span class="keyword">var</span> aNode2 = someNode.replaceChild(newNode, someNode.lastChild);</span><br></pre></td></tr></table></figure></p><p>(4)removeChild方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 移除第一个</span></span><br><span class="line"><span class="keyword">var</span> aNode1 = someNode.removeChild(newNide, someNode.firstChild);</span><br><span class="line"><span class="comment">// 移除最后一个</span></span><br><span class="line"><span class="keyword">var</span> aNode2 = someNode.removeChild(newNide, someNode.laststChild);</span><br></pre></td></tr></table></figure></p><ol><li>Document 类型<br>表示文档，在浏览器中document对象是HTMLDocument的一个实例，表示整个HTML页面。document对象是window对象的一个属性，因此document作为全局对象来访问</li></ol><ul><li>nodeType:9</li><li>NodeName:#document</li><li>nodeValue:null</li><li>parentNode:null</li><li>ownerDocument:null</li></ul><p>(1)文档子节点<br>2个快捷访问方式，一个是documentElement属性，一个是childNodes访问文档元素</p><ul><li><p><code>documentElement</code>属性，指向<code>&lt;html&gt;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> html = <span class="built_in">document</span>.documentElement;</span><br><span class="line"><span class="built_in">console</span>.log(html === <span class="built_in">document</span>.childNodes[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(html === <span class="built_in">document</span>.firstChild);</span><br></pre></td></tr></table></figure></li><li><p><code>body</code>属性，直接指向<code>&lt;body&gt;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> body = <span class="built_in">document</span>.body;</span><br></pre></td></tr></table></figure></li></ul><p>所有浏览器都支持document.documentElement和document.body</p><ul><li><code>doctype</code>属性，指向<code>&lt;!DOCTYPE&gt;</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> docType = <span class="built_in">document</span>.doctype;</span><br></pre></td></tr></table></figure></li></ul><p>(2)文档信息</p><ul><li><code>title</code>属性，指向<code>&lt;title&gt;</code></li><li><code>URL</code>属性</li><li><code>domain</code>属性</li><li><code>referrer</code>属性<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aTitle = <span class="built_in">document</span>.title;</span><br><span class="line"><span class="comment">// 完整URL</span></span><br><span class="line"><span class="keyword">var</span> aUrl = <span class="built_in">document</span>.url;</span><br><span class="line"><span class="comment">// 域</span></span><br><span class="line"><span class="keyword">var</span> aDomain = <span class="built_in">document</span>.domain;</span><br><span class="line"><span class="comment">// 来源URL</span></span><br><span class="line"><span class="keyword">var</span> aReferrer = <span class="built_in">document</span>.referrer</span><br></pre></td></tr></table></figure></li></ul><p>(3)查找元素</p><ul><li><p><code>getElementById</code>方法:取ID元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">"mydiv"</span>); <span class="comment">// 早期版本不分大小写</span></span><br></pre></td></tr></table></figure></li><li><p><code>getElementsByTagName</code>方法:取元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lis = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(aLi[<span class="number">0</span>].innerHTML);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全部</span></span><br><span class="line"><span class="keyword">var</span> all = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"*"</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>getElementsByName</code>方法：取name所有元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> radio = <span class="built_in">document</span>.getElementsByName(<span class="string">"color"</span>);</span><br></pre></td></tr></table></figure></li></ul><p>(4)特殊集合</p><ul><li>document.anchors: 所有<code>&lt;a&gt;</code></li><li>document.applets: 所有带name的<code>&lt;a&gt;</code></li><li>document.forms: 所有<code>&lt;form&gt;</code>元素</li><li>document.images: 所有<code>&lt;img&gt;</code>元素</li><li>document.links: 所有带src的<code>&lt;a&gt;</code>元素</li></ul><p>(5)DOM 一致性检测<br>DOM 有多个级别。实现DOM检测就有很大必要了,implementation,规定了一个方法hasFeature<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hasXmlDom = <span class="built_in">document</span>.implementation.hasFeature(<span class="string">"XML"</span>, <span class="string">"1.0"</span>);</span><br></pre></td></tr></table></figure></p><p>(6)文档写入</p><ul><li>write():原样写入</li><li>writeln():写入换行</li><li>open()</li><li>close()</li></ul><ol><li>Element 类型</li></ol><ul><li>nodeType:1</li><li>nodeName:标签名</li><li>nodeValue:null</li><li>parentNode:可是Document或者Element</li><li>childNodes:都可能</li></ul><p>(1)HTML元素</p><ul><li>id: 元素在文档唯一标识符</li><li>title: 附加说明</li><li>lang: 语言代码</li><li>dir: 语言的方向</li><li>className: 与class对应，之所以不用class是因为class是ES保留字</li></ul><p>这些值都可以用来修改<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"suo"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">title</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">lang</span>=<span class="string">""</span> <span class="attr">dir</span>=<span class="string">""</span>&gt;</span>name<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ie8之前不能访问 --&gt;</span></span><br></pre></td></tr></table></figure></p><p>(2)特性</p><ul><li>getAttribute()</li><li>setAttrubute()</li><li>removeAttribute()</li></ul><p>(3)创建元素<br>document.createElement方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">div.id = <span class="string">"suo"</span>;</span><br><span class="line">div.className = <span class="string">"yue"</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(<span class="string">"div"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完整插入</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"&lt;div id=\"suo\" class=\"yue\"&gt; &lt;/div&gt;"</span>);</span><br></pre></td></tr></table></figure></p><p>(4)元素的子节点<br>不同浏览器解析不一样</p><ul><li>IE不解析间隔</li><li>其他浏览器连间隔也解析</li></ul><p>4.Text 类型</p><ul><li>nodeType: 3</li><li>nodeName: “#text”</li><li>nodeValue: 节点文本</li><li>parentNode是一个Element</li><li>没有子节点</li><li>appendData(text): 插入节点末尾</li><li>deleteDate(offset, count): 删除文本</li><li>insertData(offset, text): 插入文本</li><li>replaceData(offset, count, text): 替换文本</li><li>splitText(offset): 分割文本</li><li>substringData(offset, count): 提取字符串</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 没有内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 有个空格 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 有内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取得文本</span></span><br><span class="line"><span class="keyword">var</span> textNode = div.firstChild;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">var</span> textNode = div.childNodes[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 修改值</span></span><br><span class="line">textNode.nodeValue = <span class="string">"suoyue"</span>;</span><br></pre></td></tr></table></figure><p>(1)创建文本节点<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> textNode = <span class="built_in">document</span>.createTextNode(<span class="string">"&lt;p&gt;hello world!&lt;/p&gt;"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分开创建</span></span><br><span class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line">element.className = <span class="string">"color"</span>;</span><br><span class="line"><span class="keyword">var</span> textNode = <span class="built_in">document</span>.createTextNode(<span class="string">"hello world!"</span>);</span><br><span class="line">element.appendChild(textNode);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(element);</span><br></pre></td></tr></table></figure></p><p>(2)规范文本节点<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.normalize(); <span class="comment">// 将多个文本节点合并成一个文本节点</span></span><br></pre></td></tr></table></figure></p><p>5.Comment 类型<br>注释在DOM里面用Comment类型表示</p><ul><li>nodeType: 8</li><li>nodeName: “#comment”</li><li>nodeValue: “注释的内容”</li><li>parentNode 可能是Document或者Element</li><li>不支持子节点</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"mydiv"</span>);</span><br><span class="line"><span class="keyword">var</span> comment = div.firstChild;</span><br><span class="line"><span class="built_in">console</span>.log(comment);</span><br><span class="line"><span class="comment">// 添加</span></span><br><span class="line"><span class="keyword">var</span> comment = <span class="built_in">document</span>.createComment(<span class="string">"good job"</span>);</span><br></pre></td></tr></table></figure><p>6.CDATASection 类型</p><ul><li>nodeType: 4</li><li>nodeName: “#cdata-section”</li><li>nodeValue: CDATA区域内容</li><li>parentNode 可能是Document或者Element</li><li>不支持子节点</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cdata = <span class="built_in">document</span>.createCDateSection();</span><br></pre></td></tr></table></figure><p>7.DocumentType 类型<br>仅FireFox,Safari,Oprea支持</p><ul><li>nodeType: 10</li><li>nodeName: doctype的名称</li><li>nodeValue: null</li><li>parentNode: Document</li><li>不支持子节点</li></ul><p>8.DocumentFragment 类型<br>轻量级文档，文档片段</p><ul><li>nodeType: 11</li><li>nodeName: “#document-fragment”</li><li>nodeValue: null</li><li>parentNode: null</li><li>子节点可以为各种</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fragment = <span class="built_in">document</span>.createDocumentFrament();</span><br><span class="line">va ul = <span class="built_in">document</span>.getElementById(<span class="string">"list"</span>);</span><br><span class="line"><span class="keyword">var</span> li = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    li = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">    li.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">"Item"</span> + (i+<span class="number">1</span>)));</span><br><span class="line">    fragment.appendChild(li);</span><br><span class="line">&#125;</span><br><span class="line">ul.appendChild(fragment);</span><br></pre></td></tr></table></figure><p>9.Attr 类型</p><ul><li>nodeType: 2</li><li>nodeName: 特性的名称</li><li>nodeValue: 特性的值</li><li>parentNode: null</li><li>HTML没有子节点</li><li>XML里面子节点可以是TEXT或者EntityReference</li></ul><h4 id="DOM-操作技术"><a href="#DOM-操作技术" class="headerlink" title="DOM 操作技术"></a>DOM 操作技术</h4><p>DOM操作比较简明，原本不会很麻烦，但是由于浏览器有个隐性的陷阱和不兼容的问题，JavaScript操作还比较麻烦<br>1.动态脚本<br>动态加载外部文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">script.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">script.src = <span class="string">"suo.js"</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用函数封装一下</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">$url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">    script.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">    script.src = $url;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.动态样式<br>与动态脚本一样<br>3.操作表格<br>4.使用NodeList</p><h4 id="DOM-选择符API"><a href="#DOM-选择符API" class="headerlink" title="DOM 选择符API"></a>DOM 选择符API</h4><p>1.querySelector 方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接受选择符，返回与该模式匹配的第一个元素</span></span><br><span class="line"><span class="keyword">var</span> body = <span class="built_in">document</span>.querySelector(<span class="string">"body"</span>);</span><br><span class="line"><span class="keyword">var</span> myid = <span class="built_in">document</span>.querySelector(<span class="string">"#myid"</span>);</span><br><span class="line"><span class="keyword">var</span> myclass = <span class="built_in">document</span>.querySelector(<span class="string">".myclass"</span>);</span><br><span class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.querySelector(<span class="string">"img.myclass"</span>);</span><br></pre></td></tr></table></figure></p><p>2.querySelectorAll 方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接受选择符，返回的是一个NodeList实例</span></span><br><span class="line"><span class="keyword">var</span> nodeList = <span class="built_in">document</span>.querySelector(<span class="string">".myclass"</span>);</span><br></pre></td></tr></table></figure></p><p>3.machesSelector 方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接受选择符，返回True或者false</span></span><br><span class="line"><span class="keyword">var</span> hasCLass = <span class="built_in">document</span>.matchesSelector(<span class="string">"body.myclass"</span>);</span><br></pre></td></tr></table></figure></p><h4 id="元素遍历"><a href="#元素遍历" class="headerlink" title="元素遍历"></a>元素遍历</h4><p>新增的一组属性，为了让IE的行为一致</p><ul><li>childElementCount: 返回子元素个数</li><li>firstElementChild: 指向第一个子元素</li><li>lastAElementChild: 指向最后一个子元素</li><li>previousElementSibling: 指向后一个同辈元素</li><li>nextElementSibling: 指向前一个子元素</li></ul><h4 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h4><p>1.与类相关的扩充</p><ul><li>getElementsByClassName()</li><li>classList 属性</li></ul><p>2.焦点管理</p><ul><li>document.activeElement</li></ul><p>3.HTMLDocument的变化</p><ul><li>readyState 属性</li><li>兼容模式</li><li>head 属性</li></ul><p>4.字符集属性<br><code>document.charset = &quot;UTF-8</code></p><p>5.自定义属性类型<br><code>data-</code></p><p>6.插入标记</p><ul><li>innerHTML 属性</li><li>outerHTML 属性</li><li>insertAdjacentHTML 方法</li><li>内存与性能</li><li>scrollIntoView方法</li></ul><h4 id="扩展（了解）"><a href="#扩展（了解）" class="headerlink" title="扩展（了解）"></a>扩展（了解）</h4><p>1.文档模式</p><ul><li>IE5: 混杂模式</li><li>IE7: IE7标准模式</li><li>IE8: IE8标准模式</li><li>IE9: IE9标准模式，ES5，CSS3，H5大部分功能</li></ul><p>2.children 属性<br>3.contains 方法<br>4.插入文本<br>5.滚动</p><!-- #### DOM2和DOM3 -->]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《JavaScript高级程序设计》读后记&lt;八&gt;：BOM</title>
      <link href="/2015/12/08/t-book_js_008/"/>
      <url>/2015/12/08/t-book_js_008/</url>
      
        <content type="html"><![CDATA[<p>前几章学了 JavaScript 的基础的知识，理论性太强。需要思考理解的东西远远多于实战的。我最近看了 BOM 这一章，才真正的感受到了 JavaScript 真的很强大，特别是在于操作浏览器这方法。不多写了，已经等不急实战了。</p><h3 id="理解BOM"><a href="#理解BOM" class="headerlink" title="理解BOM"></a>理解BOM</h3><h4 id="使用-Window-对象"><a href="#使用-Window-对象" class="headerlink" title="使用 Window 对象"></a>使用 Window 对象</h4><p>说明一下，在浏览器中 window 对象有两重身份，一重是 JavaScript 访问浏览器的接口，另一重是 ES 规定的 Global 对象，因此可以访问<code>parseInt()</code>等方法<br>测试一下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"suo"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">sayName(); <span class="comment">// suo</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.name); <span class="comment">// suo</span></span><br><span class="line"><span class="built_in">window</span>.sayName(); <span class="comment">// suo</span></span><br></pre></td></tr></table></figure></p><p>说明全局的变量和方法，使用 window均能访问到</p><p>全局变量的window的变量有说明差异呢，有一点就是定义在window上的属性可以使用delete删除，而定义的全局变量不可以<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"suo"</span>;</span><br><span class="line"><span class="built_in">window</span>.gender = <span class="string">"male"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> name;</span><br><span class="line"><span class="keyword">delete</span> <span class="built_in">window</span>.gender;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// suo</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.gender); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></p><p>另外尝试访问未声明的变量会抛出错误，但是通过查询window对象，可以知道某个可能未声明的对象是否存在<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newname = oldname; <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">var</span> newname = <span class="built_in">window</span>.oldname; <span class="comment">// 没报错</span></span><br></pre></td></tr></table></figure></p><p>说了这么多，我们来用 window 对象操作窗口<br>(1)控制窗口位置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> leftPos = (<span class="keyword">typeof</span> <span class="built_in">window</span>.screenLeft == <span class="string">"number"</span>) ?</span><br><span class="line">    <span class="built_in">window</span>.screenLeft : <span class="built_in">window</span>.screenX;</span><br><span class="line"><span class="keyword">var</span> topPos = (<span class="keyword">typeof</span> <span class="built_in">window</span>.screenTop == <span class="string">"number"</span>) ?</span><br><span class="line">    <span class="built_in">window</span>.screenTop : <span class="built_in">window</span>.screenY;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(leftPos);</span><br><span class="line"><span class="built_in">console</span>.log(topPos);</span><br><span class="line"></span><br><span class="line"><span class="comment">// IE(5,7-11) edge firefox 都能正常显示位置</span></span><br><span class="line"><span class="comment">// chorme 始终显示 0 0</span></span><br><span class="line"><span class="comment">// 令人费解</span></span><br></pre></td></tr></table></figure></p><p>除此之外还可以改变位置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 移动多少像素</span></span><br><span class="line"><span class="built_in">window</span>.moveBy(<span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"><span class="comment">// 移动到哪个位置</span></span><br><span class="line"><span class="built_in">window</span>.moveTo(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试结果，除了IE以外，其他浏览器都默认禁用了</span></span><br></pre></td></tr></table></figure></p><p>(2)控制窗口大小<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 页面视图区大小</span></span><br><span class="line"><span class="comment">// 兼容的处理</span></span><br><span class="line"><span class="keyword">var</span> pageWidth = <span class="built_in">window</span>.innerWidth,</span><br><span class="line">    pageHeight = <span class="built_in">window</span>.innerHeight;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> pageWidth != <span class="string">"number"</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.campatMode == <span class="string">"CSS1Compat"</span>) &#123;</span><br><span class="line">        pageWidth = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">        pageHeight = <span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pageWidth = <span class="built_in">document</span>.body.clientWidth; <span class="comment">// IE6</span></span><br><span class="line">        pageHeight = <span class="built_in">document</span>.body.clientHeight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(pageWidth + <span class="string">','</span> + pageHeight); <span class="comment">// 1080,1008</span></span><br></pre></td></tr></table></figure></p><p>我们还可以调整窗口大小<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调整的像素</span></span><br><span class="line"><span class="built_in">window</span>.resizeBy(<span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line"><span class="comment">// 调整到多少</span></span><br><span class="line"><span class="built_in">window</span>.resizeTo(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line"><span class="comment">// 仍然除了IE以外其他都禁用了的</span></span><br></pre></td></tr></table></figure></p><p>(3)打开窗口<br>使用<code>window.open()</code>函数打开窗口，其中有四个参数：URL， target， 特性字符串，是否取得历史纪录中那个页面。第一个参数不用说，第二个参数有几个可以是特殊值：<code>_self</code>,<code>_parent</code>,<code>_top</code>,<code>_blank</code>。举个例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开窗口</span></span><br><span class="line"><span class="keyword">var</span> local = <span class="built_in">window</span>.open(<span class="string">"http://localhost:4000"</span>, <span class="string">"local"</span>, <span class="string">"height=500,width=500,top=100,left=100,resizable=yes"</span>);</span><br><span class="line"><span class="comment">// 关闭窗口</span></span><br><span class="line">local.close()</span><br><span class="line"><span class="comment">// 强制关闭</span></span><br><span class="line">top.close();</span><br></pre></td></tr></table></figure></p><p>检测窗口是否被屏蔽<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> blocked = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> local = <span class="built_in">window</span>.open(<span class="string">"http://localhost:4000"</span>, <span class="string">"_blank"</span>);</span><br><span class="line">    <span class="keyword">if</span> (local == <span class="literal">null</span>) &#123;</span><br><span class="line">        blocked = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">    blocked = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (blocked) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"窗口被屏蔽"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(4)使用定时器<br>window 对象提供两种定时器，一种是超时定时器<code>setTimeout()</code>,另一种是间歇定时器<code>setInterval()</code>。它们都提供两个参数，一个是执行的代码，一个是时间毫秒。看一下代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 超时定时器</span></span><br><span class="line"><span class="keyword">var</span> timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"ok"</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>); <span class="comment">// 经过一秒后ok</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消超时定时器</span></span><br><span class="line">clearTimeout(timer); <span class="comment">// 没打印</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 间歇定时器</span></span><br><span class="line"><span class="keyword">var</span> max = <span class="number">3</span>; <span class="comment">// 设置最多定时次数</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> interval = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    num++;</span><br><span class="line">    <span class="keyword">if</span> (num == max) &#123;</span><br><span class="line">        clearInterval(interval);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"ok"</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>); <span class="comment">// 没经过一秒打印一个ok，打印三次后结束打印</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用超时定时器模拟间歇定时器</span></span><br><span class="line"><span class="keyword">var</span> max = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timerFunction</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"ok"</span>);</span><br><span class="line">    num++;</span><br><span class="line">    <span class="keyword">if</span> (num &lt; max) &#123;  </span><br><span class="line">        setTimeout(timerFunction, <span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"done"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(timerFunction, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></p><p>开发环境中很少真正使用间歇定时器，一般用超时定时器模拟它，原因在于当执行函数时间大于间歇时间时，后一个间歇定时器在前一个调用结束之前调用。</p><p>(5)使用系统对话框<br>由于系统对话框带来的用户体验相当差，现在用的很少，这里随便提一下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证框与弹出框</span></span><br><span class="line"><span class="keyword">if</span> (confirm(<span class="string">"are you sure?"</span>)) &#123;</span><br><span class="line">    alert(<span class="string">"baici"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">"shagua"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 文本框</span></span><br><span class="line"><span class="keyword">var</span> name = prompt(<span class="string">"you name?"</span>);</span><br><span class="line">alert(<span class="string">"welcome "</span> + name);</span><br><span class="line"><span class="comment">// 打开find,print</span></span><br><span class="line">find();</span><br><span class="line">print(); <span class="comment">// 打印对话框</span></span><br></pre></td></tr></table></figure></p><h4 id="使用-location-对象"><a href="#使用-location-对象" class="headerlink" title="使用 location 对象"></a>使用 location 对象</h4><p>location对象是BOM最有用的对象之一，提供了文档有关的信息，还提供了一些导航功能。它是一个特别的对象，即是window属性，也是document属性，也就是说location,window.location,document.location是同一个东西。我们来试试它的功能。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(location.hash); <span class="comment">// 无</span></span><br><span class="line"><span class="built_in">console</span>.log(location.host); <span class="comment">// localhost:4000</span></span><br><span class="line"><span class="built_in">console</span>.log(location.href); <span class="comment">// http://localhost:4000/</span></span><br><span class="line"><span class="built_in">console</span>.log(location.port); <span class="comment">// 4000</span></span><br><span class="line"><span class="built_in">console</span>.log(location.protocol); <span class="comment">// http:</span></span><br><span class="line"><span class="built_in">console</span>.log(location.search);</span><br></pre></td></tr></table></figure></p><h4 id="使用-navigator对象"><a href="#使用-navigator对象" class="headerlink" title="使用 navigator对象"></a>使用 navigator对象</h4><h4 id="使用-screen-对象"><a href="#使用-screen-对象" class="headerlink" title="使用 screen 对象"></a>使用 screen 对象</h4><p>用来识别客户端浏览器的，用处不大，表明客户端能力的。一般用于客户端能力检测</p><h4 id="使用-history对象"><a href="#使用-history对象" class="headerlink" title="使用 history对象"></a>使用 history对象</h4><p>保存用户上网的历史记录。处于安全考虑，开发人员无法知道历史记录的具体的URL,但是可以通过go()方法在历史记录中任意跳转。这个方法只接受一个参数，正数前进，负数后退<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// go方法前进后退</span></span><br><span class="line">history.go(<span class="number">-1</span>);</span><br><span class="line">history.go(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写的两个方法</span></span><br><span class="line">history.back();</span><br><span class="line">history.forword();</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《JavaScript高级程序设计》读后记&lt;七&gt;：继承</title>
      <link href="/2015/12/06/t-book_js_007/"/>
      <url>/2015/12/06/t-book_js_007/</url>
      
        <content type="html"><![CDATA[<p>上一篇博客，我深入理解了对象，可以通过一些方式来创建对象。而对于 OOP 来说，仅仅做到这些是不够的。我们学过 OOP 都知道，它有三大特性，继承，多态，封装。第一个就是继承，而 JS 却本身没有继承这一方法。所以我们需要通过 JS 其他的特性来实现继承。由于 JS 的函数是没有函数签名的。所以并不能做到“接口继承”，但是我们可以做到“实现继承”。</p><h4 id="理解继承"><a href="#理解继承" class="headerlink" title="理解继承"></a>理解继承</h4><p><strong>(1)原型链</strong><br><strong>原型链</strong>是实现继承的主要方法，那么原型链到底是什么样的东西呢？上一篇博客我们重点分析了原型这一属性和对象。并且给出了一个图来说明它们之间的关系。回顾一些，下面给出之前的图<br><a href="/images/dm5.png">img</a><br>现在，我稍微改变一下原型属性的指向，我们让原型属性不指向它自己的原型对象，而是指向另一个函数的原型对象。如同所示，依次如此就构成了 <strong>原型链</strong><br><a href="/images/dm6.png">img</a><br><strong>各个函数之间通过原型对象构成一条链，所以称之为原型链</strong>，下面模拟一下这个过程<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.prototype = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.getPersonValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.prototype;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 子类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubPerson</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subprototype = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承，子类型原型等于父类型实例</span></span><br><span class="line">SubPerson.prototype = <span class="keyword">new</span> Person();</span><br><span class="line">SubPerson.prototype.getSubValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.subprototype;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> subperson = <span class="keyword">new</span> SubPerson();</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(subperson.getPersonValue()); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(subperson.getSubValue()); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><p>由上可知，当我们的函数的原型属性等于另一个函数的实例时，我们就继承了它的原型属性和方法。同时我们仍然保留了自己原型属性和方法。</p><p>我们现在知道了使用原型链来实现继承，有了继承我们的 <strong>原型搜索机制</strong>也得到了扩展</p><ul><li>搜索实例本身定义的属性</li><li>搜索实例原型</li><li>搜索继承的原型(多重继续)</li><li>搜索Object的原型(继承链顶端)</li></ul><p><strong>要注意的方面：</strong></p><ul><li><strong>子类型给原型添加的方法要在父类型之后添加</strong>(无论是新添加还是重新)</li><li><strong>通过原型链实现继承，不能通过对象字面量创建原型方法，这样会重写原型链</strong></li></ul><p><strong>原型链的缺陷：</strong><br>缺陷一，原型链实现的继承，原型变成了另外一个类型的实例，<strong>原有的实例属性变成了原型属性</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = [<span class="string">"suo"</span>, <span class="string">"yue"</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubPerson</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承</span></span><br><span class="line">SubPerson.prototype = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">// 实例</span></span><br><span class="line"><span class="keyword">var</span> sub1 = <span class="keyword">new</span> SubPerson();</span><br><span class="line">sub1.name.push(<span class="string">"smile"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sub1.name); <span class="comment">// (3) ["suo", "yue", "smile"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sub2 = <span class="keyword">new</span> SubPerson();</span><br><span class="line"><span class="built_in">console</span>.log(sub2.name); <span class="comment">// (3) ["suo", "yue", "smile"]</span></span><br></pre></td></tr></table></figure></p><p>缺陷二，<strong>子类继承了父类，但是没法给父类传递参数。</strong><br>基于这些缺陷，单一的使用原型链继承不太实用，怎么去解决这些问题呢？</p><p><strong>(2)构造函数</strong><br>上面两个缺陷是否有解决方法，结合我们之前学习的知识。我们思考一下，<br><strong>可以传参，而且不使用原型等于实例这种方法，怎么让子类型使用父类型的变量和方法呢呢？</strong><br>由此我们想到了之前学习的两个函数的方法，一个是<code>apply()</code>，一个是<code>call()</code>。<strong>它们可以将函数调用的其他函数绑定本函数的作用域和参数</strong>。现在我们来试试<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = [<span class="string">"suo"</span>, <span class="string">"yue"</span>];</span><br><span class="line">    <span class="keyword">this</span>.addName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name.push(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubPerson</span>(<span class="params">name, gender</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用父类函数，并绑定子类函数和参数</span></span><br><span class="line">    Person.call(<span class="keyword">this</span>, name);</span><br><span class="line">    <span class="keyword">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> subperson1 = <span class="keyword">new</span> SubPerson(<span class="string">"smile"</span>, <span class="string">"male"</span>);</span><br><span class="line"><span class="keyword">var</span> subperson2 = <span class="keyword">new</span> SubPerson(<span class="string">"cry"</span>, <span class="string">"female"</span>);</span><br><span class="line">subperson1.addName();</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="built_in">console</span>.log(subperson1.name); <span class="comment">// ["suo", "yue", "smile"]</span></span><br><span class="line"><span class="built_in">console</span>.log(subperson2.name); <span class="comment">// ["suo", "yue"]</span></span><br></pre></td></tr></table></figure></p><p>同理单独使用构造函数实现继承也是不行的，共享属性和变量就谈不上了，所以我们还是结合它们两者的优势重新实现继承吧。这和创建对象的模式有着异曲同工之妙。</p><p><strong>(3)组合继承</strong><br>结合以上我们来整合它们的技术，先上代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.nameGroup = [<span class="string">"suo"</span>, <span class="string">"yue"</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 父类型函数原型方法</span></span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line">Person.prototype.addName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.nameGroup.push(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubPerson</span>(<span class="params">name, gender</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 构造继承，调用父类型函数并绑定作用域和参数</span></span><br><span class="line">    Person.call(<span class="keyword">this</span>, name);</span><br><span class="line">    <span class="keyword">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型链继承，子类型函数原型等于父类型实例</span></span><br><span class="line">SubPerson.prototype = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">// 修正构造属性</span></span><br><span class="line">SubPerson.prototype.constructor = SubPerson;</span><br><span class="line"><span class="comment">// 子类型函数原型方法</span></span><br><span class="line">SubPerson.prototype.getGender = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> subperson1 = <span class="keyword">new</span> SubPerson(<span class="string">"smile"</span>, <span class="string">"male"</span>);</span><br><span class="line"><span class="keyword">var</span> subperson2 = <span class="keyword">new</span> SubPerson(<span class="string">"cry"</span>, <span class="string">"female"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line">subperson1.addName();</span><br><span class="line"><span class="built_in">console</span>.log(subperson1.getName());   <span class="comment">// smile</span></span><br><span class="line"><span class="built_in">console</span>.log(subperson1.getGender()); <span class="comment">// male</span></span><br><span class="line"><span class="built_in">console</span>.log(subperson1.nameGroup);   <span class="comment">// ["suo", "yue", ""]</span></span><br><span class="line"><span class="built_in">console</span>.log(subperson2.getName());   <span class="comment">// cry</span></span><br><span class="line"><span class="built_in">console</span>.log(subperson2.getGender()); <span class="comment">// female</span></span><br><span class="line"><span class="built_in">console</span>.log(subperson2.nameGroup);   <span class="comment">// ["suo", "yue"]</span></span><br></pre></td></tr></table></figure></p><p><strong>(4)原型式继承</strong><br>基于已有的对象创建新对象，同时还不必因此自定义类型，看看代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    Person.prototype = o;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在我们可能看不懂，但是结合原型链的思想，改变一下，或许就很明了了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// person1是Person的实例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">person1</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">SubPerson</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 子类型的原型等于父类型的实例</span></span><br><span class="line">    SubPerson.prototype = person1;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SubPerson;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line">subperson1 = object(person1);</span><br></pre></td></tr></table></figure></p><p>咋一看这不就是将原型链的继承方法，用函数封装了一下吗。有啥区别<br>确实原理都是样的。区别就在于，<strong>原型链方法是类型到类型。而原型式继承则直接是对象到对象</strong>。测试一下，到底可不可以继承到属性和方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">    name: <span class="string">"suo"</span>,</span><br><span class="line">    nameGroup: [<span class="string">"suo"</span>, <span class="string">"yue"</span>];</span><br><span class="line">    getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObj</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">P</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    P.prototype = o;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> P();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> subperson = createObj(person1);</span><br><span class="line"><span class="built_in">console</span>.log(subperson.getName()); <span class="comment">// suo</span></span><br></pre></td></tr></table></figure></p><p>很明显当然是可以的，我们由此也想到了，这和复制一个对象有什么区别呢？当然是有区别的，本质来说，这种继承方法是一个 <strong>浅复制</strong>，<strong>虽然复制了对象的属性，但是引用型的属性仍然是共享的</strong>。验证一下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> subperson1 = createObj(person1); </span><br><span class="line"><span class="keyword">var</span> subperson2 = createObj(person1);</span><br><span class="line">subperson1.nameGroup.push(<span class="string">"smile"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(subperson2.nameGroup); </span><br><span class="line"><span class="comment">// (3) ["suo", "yue", "smile"]</span></span><br></pre></td></tr></table></figure></p><p>ES 新增了一个<code>Object.create()</code>方法规范了这个原型式继承。只有一个参数的情况下两者效果是一样的。第二个参数是可选的，作用是可以设置属性特性。这和我们之前谈到的<code>Object.defineProperties()</code>是同等效果的。测试一下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">"suo"</span>,</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> subperson1 = <span class="built_in">Object</span>.create(person, &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">        value: <span class="string">"yue"</span>,</span><br><span class="line">        enumerable: <span class="literal">false</span> <span class="comment">// 设置不可枚举</span></span><br><span class="line">    &#125;,</span><br><span class="line">    gerder: &#123;</span><br><span class="line">        value: <span class="string">"male"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(subperson1.name + <span class="string">','</span> + subperson1.gender); </span><br><span class="line"><span class="comment">// male, undefined 说明不能自己增加属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (prop <span class="keyword">in</span> subperson1) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(prop); <span class="comment">// age </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>(5)寄生式继承</strong><br>寄生式继承与刚刚学习的原型式继承紧密相连，在原型式继承的基础上又封装了一道函数。直接上代码吧<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">"suo"</span>,</span><br><span class="line">    mess: <span class="string">"bye"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 原型式继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">creatObj</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">P</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    P.prototype = o;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> P();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 寄生式继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createAnobj</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clone = createObj(o);</span><br><span class="line">    clone.sayBye = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o.mess;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">var</span> anoperson = createAnobj(person);</span><br><span class="line"><span class="built_in">console</span>.log(anoperson.name + <span class="string">','</span> + anoperson.sayBye());</span><br><span class="line"><span class="comment">// suo,bye</span></span><br></pre></td></tr></table></figure></p><p>咋一看，这不就是在原型式的基础上加一个添加方法的函数吗。当然完全是，它还有另一个用途，如果对象不是自定义或者构造函数时，它也是有用的，随便举个例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createAnobj</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clone =  o; <span class="comment">// 原型式函数不是必须的</span></span><br><span class="line">    o.printFirst = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(o[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr2 = createAnobj(arr);</span><br><span class="line">arr.printFirst(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p><p><strong>(6)寄生组合继承</strong><br>我们知道原型链与构造函数的组合模式是最常见的继承方式，但是它也有不足的地方。它们单独来将每次调用一次父类型，组合起来就是调用了两次父类型。我们现在有一种方法来解决这个问题，就是组合寄生继承模式。<strong>它的思路就是构造函数模式不变，不直接调用父类型函数，而是通过原型模式创建一个副本，然后让子类的原型等于这个副本。</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.nameGroup = [<span class="string">"xiao"</span>, <span class="string">"ai"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.addName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.nameGroup.push(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubPerson</span>(<span class="params">name, gender</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 继承属性</span></span><br><span class="line">    Person.call(<span class="keyword">this</span>, name);</span><br><span class="line">    <span class="comment">// 自己属性</span></span><br><span class="line">    <span class="keyword">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型式模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObj</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">P</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    P.prototype = o;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> P();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 寄生模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">p, subp</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建对象，浅复制原型对象</span></span><br><span class="line">    <span class="keyword">var</span> prototype = createObj(p.prototype);</span><br><span class="line">    <span class="comment">// 增强对象，修正构造函数</span></span><br><span class="line">    prototype.constructor = subp;</span><br><span class="line">    <span class="comment">// 指向对象，子类型指向创建并修正构造的父类型原型对象</span></span><br><span class="line">    subp.prototype = prototype;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行寄生模式</span></span><br><span class="line">inheritPrototype(Person, SubPerson);</span><br><span class="line"></span><br><span class="line">SubPerson.prototype.sayBye = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"bye"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">var</span> subperson1 = <span class="keyword">new</span> SubPerson(<span class="string">"suo"</span>, <span class="string">"male"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(subperson1.getName()); <span class="comment">// 父类型属性和方法</span></span><br><span class="line"><span class="built_in">console</span>.log(subperson1);</span><br><span class="line"><span class="built_in">console</span>.log(subperson1.gender); <span class="comment">// 自己的属性</span></span><br><span class="line">subperson1.addName(); <span class="comment">// 父类型的方法</span></span><br><span class="line"><span class="built_in">console</span>.log(subperson1.nameGroup);</span><br><span class="line">subperson1.sayBye(); <span class="comment">// 自己的方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> subperson2 = <span class="keyword">new</span> SubPerson(<span class="string">"yue"</span>, <span class="string">"female"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(subperson2.nameGroup); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// suo</span></span><br><span class="line"><span class="comment">// male</span></span><br><span class="line"><span class="comment">// bye</span></span><br><span class="line"><span class="comment">// (3) ["xiao", "ai", "suo"]</span></span><br><span class="line"><span class="comment">// (2) ["xiao", "ai"]</span></span><br></pre></td></tr></table></figure></p><p>写到这里，只能感叹一句，<strong>寄生组合模式简直就是一个大杂烩啊</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《JavaScript高级程序设计》读后记&lt;六&gt;：对象</title>
      <link href="/2015/12/05/t-book_js_006/"/>
      <url>/2015/12/05/t-book_js_006/</url>
      
        <content type="html"><![CDATA[<p>上篇博客谈到了引用类型，array, function 等等。它们都有一个共同的特点就是，它们都继承于 object，它们都是对象，拥有属性和方法。我虽然搞清楚了它们的很多特性和方法，也可以用它们做一些事情。但是对象这个东西还是有很多东西是有些模糊的，这些天我看完了面向对象这一章。里面很多设计和 c++, Java 面向对象很相似，有共通的地方，但是也有很多地方是 JS 独有的特性。现在我整理出了一条思路，写下这篇博客，希望能更加透彻的理解面向对象的思想。</p><h3 id="理解-JavaScript-面向对象"><a href="#理解-JavaScript-面向对象" class="headerlink" title="理解 JavaScript 面向对象"></a>理解 JavaScript 面向对象</h3><p>前面已经接触过了很多对象，现在稍稍回顾一下，话不多说，上代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接new对象</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>;</span><br><span class="line">person.name = <span class="string">"suo"</span>;</span><br><span class="line">person.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;; </span><br><span class="line">person.getName(); <span class="comment">// suod</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字面量创建对象</span></span><br><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">    name: <span class="string">"suo"</span>,</span><br><span class="line"></span><br><span class="line">    getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;; </span><br><span class="line">person.getName(); <span class="comment">// suo</span></span><br></pre></td></tr></table></figure></p><p>这两种创建对象的方法都是最初级的，第二个比一个好那么一点点<br>在使用更高级的创建方法之前要讨论一下对象的属性</p><h4 id="理解属性的特性"><a href="#理解属性的特性" class="headerlink" title="理解属性的特性"></a>理解属性的特性</h4><p><strong>ES5 定义了特性(attribute)，它是内部使用的，用来描述属性(property)的特征</strong>。这句话怎么解释呢？特性和属性，我们所知道的属性，就是对象的属性，方法。但是这些属性有一些特征，而把属性的特征称为特性。并且用两对方括号表示 [[Enumerable]]</p><p>下面具体谈谈这些属性的特性。<strong>分为两种特性，一种是数据特性，一种是访问器特性</strong></p><ul><li>[[Configurable]]: 能否删除而重新定义属性，能否修改属性特性</li><li>[[Enumerable]]: 能否通过 for-in 返回属性</li><li>[[Writable]]: 能否修改属性的值</li><li>[[Value]]: 包含属性的值</li></ul><p>下面我们举个例子具体说明这些特性的意义<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">"suo"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><code>name</code>是对象<code>person</code>的属性，[[Value]] 的值就应该是<code>&quot;suo&quot;</code>，其中<code>name</code>是可以删除和重新定义的。可以通过 for-in 返回属性，可以修改值，由此我们得出上面三个特性的默认值都是<code>true</code></p><p>既然属性的特性有默认的值，那么是否可以修改呢，答案是可以的<br>ES5 有一个方法可以修改属性的特性值<code>Object.defineProperty()</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">"name"</span>, &#123;</span><br><span class="line">    writable: <span class="literal">false</span>, <span class="comment">// 设置特性为不能修改</span></span><br><span class="line">    value: <span class="string">"suo"</span>     <span class="comment">// 设置属性的值为"suo"</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// suo</span></span><br><span class="line">person.name = <span class="string">"yue"</span>; <span class="comment">// 严格模式下导致错误</span></span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// suo</span></span><br></pre></td></tr></table></figure></p><p>我们看到我们可以通过这个方法直接为属性设置值，同时设置了只读权限</p><p>现在我们知道属性的特性是可以重新定义和修改的，但是我们也知道特性里有一个 [[Configurable]] 可以控制是否可以修改特性，也就是设置<code>Configurable</code>为<code>false</code>，就不能再修改这个对象属性的特性了(除<code>writable</code>以外)，下面我们验证一下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">"name"</span>, &#123;</span><br><span class="line">    configurable: <span class="literal">false</span>, <span class="comment">//设置不能删除属性，不能重新定义特性</span></span><br><span class="line">    value: <span class="string">"suo"</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">"name"</span>, &#123;</span><br><span class="line">    value: <span class="string">"yue"</span> <span class="comment">// 出错。不能重新定义特性</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">delete</span> person.name; <span class="comment">// 不起作用，严格模式报错</span></span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br></pre></td></tr></table></figure></p><p>现在看看访问器特性，包含 getter 和 setter 函数，读取访问器属性调用 getter，写入调用 setter<br>同样的访问器特性也是四个，其中前两个和数据特性一样，后两个如下</p><ul><li>[[Get]]: 读取属性时调用的函数，默认值是<code>undefined</code></li><li>[[set]]: 写入属性时调用的函数，默认也是<code>undefined</code></li></ul><p>同样我们来看看代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设suo是男生，yue是女生，当改变对象名字的时候，使得性别也改变</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    _name: <span class="string">"suo"</span>, <span class="comment">// 只能通过对象方法访问</span></span><br><span class="line">    gender: <span class="string">"male"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">"name"</span>, &#123;</span><br><span class="line"></span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._name;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (name === <span class="string">"yue"</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.gender = <span class="string">"fel"</span> + <span class="keyword">this</span>.gender;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">person.name = <span class="string">"yue"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.gender); <span class="comment">// female</span></span><br></pre></td></tr></table></figure></p><p><strong>说了这么多，那么使用这些特性有什么好处呢？</strong><br><code>get</code>函数内只能读，<code>set</code>函数内只能写，这样就完美的实现了读写分离，支持这个方法的需要 IE9 以上<br>上面用的都是单个属性的操作，也有可以一次操作多个属性的方法<code>defineProperties()</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    _name: <span class="string">"suo"</span>,</span><br><span class="line">    gender: <span class="string">"male"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(person, &#123;</span><br><span class="line">    _name: &#123;</span><br><span class="line">        writable: <span class="literal">false</span>,</span><br><span class="line">        value: <span class="string">"yue"</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    gender: &#123;</span><br><span class="line">        writable: <span class="literal">true</span>,</span><br><span class="line">        value: <span class="string">"male"</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    name: &#123;</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._name;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"yue"</span> === <span class="keyword">this</span>._name) &#123;</span><br><span class="line">                <span class="keyword">this</span>.gender = <span class="string">"fe"</span> + <span class="keyword">this</span>.gender;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">person.name = <span class="string">"yue"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.gender); <span class="comment">// female</span></span><br></pre></td></tr></table></figure></p><p>这个方法使用的效果和上面单个方法别无二致，唯一不同的是，这些特性是同一时间创建的<br>现在我们来读取这些特性，使用方法<code>getOwnPropertyDescriptor</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(person, <span class="string">"_name"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(descriptor.value); <span class="comment">// yue</span></span><br></pre></td></tr></table></figure></p><p>前面谈了那么多关于属性的特性，现在我们该进入正题了</p><h4 id="创建对象的方法"><a href="#创建对象的方法" class="headerlink" title="创建对象的方法"></a>创建对象的方法</h4><p><strong>(1)工厂模式</strong><br> 考虑到<code>ES</code>没法创建类，所以就采用了函数封装特定的接口创建对象，下面直接上代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工厂方法：批量生产对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, gender</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>;</span><br><span class="line">    o.name = name;</span><br><span class="line">    o.gender = gender;</span><br><span class="line">    o.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o.name;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = createPerson(<span class="string">"suo"</span>, <span class="string">"male"</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = createPerson(<span class="string">"yue"</span>, <span class="string">"female"</span>);</span><br></pre></td></tr></table></figure></p><p>这样写的好处就在于，本来需要单个创建的对象，通过函数的封装，可以批量的创建对象了。<br>其实它是有缺点的，<strong>虽然解决了相似对象创建的问题，但是对象的识别没法解决</strong>。</p><p><strong>(2)构造函数</strong><br>我们知道引用类型是通过原生的构造函数创建对象，其实构造函数是可以自定义的。所以我们现在可以通过自定义的方式来创建对象，上代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, gender</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.name = gender;</span><br><span class="line">    <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"suo"</span>, <span class="string">"male"</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"yue"</span>, <span class="string">"female"</span>);</span><br></pre></td></tr></table></figure></p><p>这种方式和工厂模式其实很相似，大家可能一看就知道了。它们之间有些稍稍不同的地方，这些其实很好解释，知道构造函数生成对象的过程，就很容易理解了，这两种方式其实是一个原理。<br><strong>构造函数，new 的过程</strong>:</p><ul><li>创建一个新对象</li><li>将作用域给新对象</li><li>给对象添加属性</li><li>返回对象</li></ul><p>现在也许大家都明白了，原来我们使用的工厂模式，其实就是在模拟构造函数生成对象的过程<br>构造函数生成的对象都有一个 constructor 属性，它就是指向构造函数本身的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person1.constructor == Person); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person1 <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>由此我们可以看出，<strong>构造函数相比工厂模式的好处就在于，它解决了对象的识别问题</strong>，我们可以通过这些方式来判断，这个对象到底是由哪个函数构造的。<br>当然这种模式也是存在缺陷的，虽然我们利用工厂模式和构造函数，生产了很多对象。但是每生产一个对象，就要给对象里的属性和方法分配一块内存，然而对象的方法很多都是一样的。<strong>这样就导致了内存的大量的浪费</strong>，我们能否让这些方法共享呢？现在尝试独立这些共享方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, gender</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    <span class="keyword">this</span>.getName = getName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125; <span class="comment">// 独立方法</span></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"suo"</span>, <span class="string">"male"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person1.getName()); <span class="comment">// suo</span></span><br></pre></td></tr></table></figure></p><p>虽然这是可行的，但是污染了全局作用域。<code>getName</code>虽然是全局的，单真正确是用在构造函数里面。这在开发中是一种及其不好的做法。</p><p><strong>(3)原型模式</strong><br>我们之前谈到函数类型，它都有一个 prototype 属性，当时没有过多的研究，现在可以好好探究一下了。首先这个属性是一个指针，指向一个对象，这个对象里面包含了所有实例共享的属性和方法。到这里你肯定明白了，<strong>原来这个原型属性就是为了解决构造函数无法共享属性和方法的啊</strong>。上代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">"suo"</span>;</span><br><span class="line">Person.prototype.gender = <span class="string">"male"</span>;</span><br><span class="line"></span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(person1.getName()); <span class="comment">//suo</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.getName()); <span class="comment">//suo</span></span><br></pre></td></tr></table></figure></p><p>很明显，原型对象的属性和方法，对于对象来说都是公有的，大家都一样。<br>下面继续深挖一下原型对象这种东西，有助于之后学习的理解<br><strong>只要创建函数，就会有一个 prototype 属性，这个属性指向了函数的原型对象。默认情况下所有的原型对象都会获得一个 constructor 属性，这个 constructor 是一个指向这个 prototype 所在的函数的指针</strong>。这个关系有点微妙，我还是画个图说明一下吧<br><img src="/images/dm3.png" alt="img"><br>代码验证一下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Person.prototype.constructor); <span class="comment">// f Person()&#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.constructor == Person); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>其中我们可以通过<code>isProtptypeOf()</code>方法验证对象原型的对应关系<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Person.prototype.isPrototypeOf(person1)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p><code>ES5</code>新增了<code>getPrototypeOf()</code>方法来获取原型值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(person1));</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;  name: "suo", gender: "male", getName: ƒ, constructor: ƒ &#125;</span></span><br><span class="line"><span class="comment">//    gender: "male"</span></span><br><span class="line"><span class="comment">//    getName: ƒ ()name:"suo"</span></span><br><span class="line"><span class="comment">//    constructor: ƒ Person()</span></span><br><span class="line"><span class="comment">//    __proto__: Object</span></span><br></pre></td></tr></table></figure></p><p>上面我们通过这个方法把原型的全部内容打印了出来，这些都清楚了是吧<br>虽然可以通过对象访问原型的值，但是不能通过对象重写原型的值，这个原因很简单，因为我们知道，原型的属性和方法都是共享的，如果随便一个实例都能改动的话，原型就乱套了，<strong>改变一个原型的属性就会影响其他的实例</strong>。因此原型是不允许实例改变的。<strong>如果实例的属性名字与原型名字重名的话，它会屏蔽原型的属性</strong>。测试一下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">person1.name = <span class="string">"yue"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person1.getName()); <span class="comment">// yue</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.getName()); <span class="comment">// suo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person1.name; <span class="comment">// 删除属性</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.getName()); <span class="comment">// suo</span></span><br></pre></td></tr></table></figure></p><p>我们现在知道了，实例的属性是可以和原型重名的，那么怎么判断它到底是谁的属性呢，<strong><code>hasOwnProperty()</code>可以来检测这个属性到底是实例的还是原型的</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">person1.name = <span class="string">"yue"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person1.getName()); <span class="comment">// yue</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.hasOwnProperty(<span class="string">"name"</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">delete</span> person1.name; <span class="comment">// 删除属性</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.getName()); <span class="comment">// suo</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.hasOwnProperty(<span class="string">"name"</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><p>由此可知，<code>true</code>就是实例的，<code>false</code>就是原型的<br>现在我们没那么严苛，<strong>我们想要判断该属性是否可以被实例访问到，这里就有<code>in</code>方法可以判断</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">person1.name = <span class="string">"yue"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"name"</span> <span class="keyword">in</span> person1); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">delete</span> person1.name;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"name"</span> <span class="keyword">in</span> person1); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p><strong>除此之外，如果我们还想得到所有实例的属性，也有种方法使用，for-in</strong>，当然有些不可枚举的属性是访问不到的。我们尝试去做一下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (prop <span class="keyword">in</span> person1) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(prop);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// name</span></span><br><span class="line"><span class="comment">// gender</span></span><br><span class="line"><span class="comment">// getName</span></span><br></pre></td></tr></table></figure></p><p>我们发现没有 protptype 属性，原因是它都是不可枚举的，[[enumerable]] 为<code>false</code><br>除此之外我们还可以使用<code>Object.keys()</code>方法来枚举对象属性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(Person.prototype));</span><br><span class="line"><span class="comment">// (3) ["name", "gender", "getName"]</span></span><br></pre></td></tr></table></figure></p><p>关于原型的写法，同样我们可以通过字面量来批量写原型属性，方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: Person, // 构造函数还原</span><br><span class="line">    name: "suo",</span><br><span class="line">    gender: "male",</span><br><span class="line">    getName: function() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure></p><p>要注意的一点是，字面量本身也是一个对象，<strong>原型指向字面量后指针就跑歪了，所以要我们要让它重新指向函数。这种方式仍然有个问题就是</strong>，本身 prototype 属性是不可枚举的，现在把 constructor 加上去后，导致变成可枚举的了，现在属性的特性的知识就有用武之地了，我们可以直接设置它的特性为不可枚举的，那不就可以了吗。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    name: <span class="string">"suo"</span>,</span><br><span class="line">    gender: <span class="string">"male"</span>,</span><br><span class="line">    getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">// 添加属性值并设置特性不可枚举</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Person.prototype, <span class="string">"constructor"</span>, &#123;</span><br><span class="line">    enumerable: <span class="literal">false</span>,</span><br><span class="line">    value: Person</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><p>我们之前谈到不能用实例修改原型，但是我们可以直接在原型上做修改啊，修改的原型后会对实例有什么影响呢？测试一下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.name = <span class="string">"yue"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person1.name); <span class="comment">// yue</span></span><br></pre></td></tr></table></figure></p><p>由此我们可知，<strong>即使是先创建了实例，修改原型属性后，实例访问的原型属性也会修改，说明原型是动态的</strong>，这其实也很简单说明。实例和原型本身就不是绑定的，我们通过原型访问，是通过指针访问的。原型里的属性改变了，我们再次通过指针访问时，当然也是改变后的属性了。<br>说了这么多，看起来原型挺好的，但是光有原型也是不够的，我们知道原型的方法和属性都是共享的，那么我私人的属性和方法该怎么办呢？<strong>那么为什么不把这两种模式结合起来呢？</strong></p><p><strong>(4)组合模式(构造+原型)</strong><br>结合构造和原型，我们来试着创建一个对象吧<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, gender</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.gender = gender; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    <span class="comment">// constructor: Person,</span></span><br><span class="line">    origin: <span class="string">"monkey"</span>,   <span class="comment">// 起源</span></span><br><span class="line">    getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Person.prototype, <span class="string">"constructor"</span>, &#123;</span><br><span class="line">    enumerable: <span class="literal">false</span>,</span><br><span class="line">    value: Person</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"suo"</span>, <span class="string">"male"</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"yue"</span>, <span class="string">"female"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person1.name === person2.name); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.origin === person2.origin);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>我们使用图示来说明这个方式<br><a href="/images/dm4.png">img</a></p><p><strong>(5)动态原型</strong><br>学过了其他 oop 语言，像c++，Java 都是用类封装所有的属性和方法，倒是觉得 ES 的比较奇怪了。现在就有一种方法来动态的创造原型，<strong>需要时才创建原型属性和方法</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, gender</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.getName != <span class="string">"function"</span>) &#123;</span><br><span class="line">    Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"suo"</span>, <span class="string">"male"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person1.getName()); <span class="comment">// suo</span></span><br></pre></td></tr></table></figure></p><p><strong>只有当调用这个方法时，这个方法不存在，它才会被添加在原型里</strong>，使用动态模式不能用字面量方法给原型赋值，原因就是，它会将 constructor 导向新的对象，之前也遇到过。</p><p><strong>(6)寄生构造</strong><br>一句话，使用构造函数的工厂模式创建对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, gender</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>;</span><br><span class="line">    o.name = name;</span><br><span class="line">    o.gender = gender;</span><br><span class="line">    o.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>咋一看，<strong>这不就是在构造函数里再造一个工厂模式吗？</strong>到底有啥用<br>其实这个寄生构造函数的用途，<strong>在于对原生的构造函数进行修改，重新造一个构造函数</strong>，比如下面<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SpecialArray</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建数组对象</span></span><br><span class="line">    <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>;</span><br><span class="line">    <span class="comment">// 添加参数</span></span><br><span class="line">    arr.push.apply(arr, <span class="built_in">arguments</span>);</span><br><span class="line">    <span class="comment">// 添加方法</span></span><br><span class="line">    arr.toUpdateJoin = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.join(<span class="string">"|"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 返回数组</span></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> SpecialArray(<span class="string">"suo"</span>, <span class="string">"yue"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr.toUpdateJoin()); <span class="comment">// suo|yue</span></span><br></pre></td></tr></table></figure></p><p>这样就改造好了，把原来数组的连接改成了<code>|</code>。</p><p><strong>(7)稳妥构造</strong><br>某个人发明了稳妥对象概念，什么是稳妥对象呢，<strong>它其实就是没有公共属性，不引用 this 对象</strong>。借鉴寄生构造函数，实现这个稳妥构造，上代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, gender</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>;</span><br><span class="line">    o.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name; <span class="comment">//注意这里没this</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">"suo"</span>, <span class="string">"male"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.getName()); <span class="comment">// suo</span></span><br></pre></td></tr></table></figure></p><p>这种模式非常安全，里面没有公共属性和 this ，这样外界要访问到<code>name</code>，只能通过函数来访问了。写了这么多也差不多把面向对象搞清楚了一半，下一篇博客，专门研究面向对象里的 <strong>继承</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《JavaScript高级程序设计》读后记&lt;五&gt;：引用类型</title>
      <link href="/2015/12/02/t-book_js_005/"/>
      <url>/2015/12/02/t-book_js_005/</url>
      
        <content type="html"><![CDATA[<p>前几篇博客，谈到了变量有 2 类数据类型，5 种基本数据类型和引用数据类型。同时也阐述了基本数据类型和引用数据类型的区别。但是一直没有提到具体的引用类型，今天专门看了引用类型一章，发现里面涉及的内容还挺多的。一时难以记住全部的内容，所以在这里写一篇博客，留做以后的学习作参考。</p><h3 id="理解引用类型"><a href="#理解引用类型" class="headerlink" title="理解引用类型"></a>理解引用类型</h3><p>引用类型的值(对象)是引用类型的实例，这和基本类型也是一样的，基本类型的值当然也是基本类型的实例。它们唯一的区别在于引用类型是一种数据结构，它的数据的组织更加复杂些。<br>前面也提到过，对象的创建是用 <strong>new</strong> 方法创建的。这里的所有的引用类型都类似，可以用 new 方法创建。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>; <span class="comment">// 同样的括号可以省略</span></span><br></pre></td></tr></table></figure></p><h4 id="Object类型"><a href="#Object类型" class="headerlink" title="Object类型"></a>Object类型</h4><p>除了上面那种创建 object 方法外还有种方法，使用对象字面量来表示<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name : <span class="string">"suo"</span>,</span><br><span class="line">    gender : <span class="string">"male"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>除此之外还有另一个写法，就是空对象，后添加属性，这也是可以的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line">person.name = <span class="string">"suo"</span>;</span><br><span class="line">person.gender = <span class="string">"male"</span>;</span><br></pre></td></tr></table></figure></p><p>同时我们可以看到，object 访问属性是通过<code>.</code>来访问，其实也有另一种方法，通过<code>[]</code>来访问<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line">person[<span class="string">"name"</span>] = <span class="string">"suo"</span>;</span><br><span class="line">person[<span class="string">"gender"</span>] = <span class="string">"male"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person[<span class="string">"name"</span>]+<span class="string">','</span>+person[<span class="string">"gender"</span>]); <span class="comment">// suo,male</span></span><br></pre></td></tr></table></figure></p><p><strong>那么问题来了，什么时候用<code>.</code>，什么时候用<code>[]</code>呢？</strong><br><code>[]</code>表示法有个优点，就是他可以通过变量访问属性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line">person[<span class="string">"name"</span>] = <span class="string">"suo"</span>;</span><br><span class="line">person[<span class="string">"gender"</span>] = <span class="string">"male"</span>;</span><br><span class="line"><span class="keyword">var</span> suo = <span class="string">"name"</span>; <span class="comment">// 将属性字符串赋值给变量</span></span><br><span class="line"><span class="built_in">console</span>.log(person[suo]+<span class="string">','</span>+person[<span class="string">"gender"</span>]); <span class="comment">// suo,male</span></span><br></pre></td></tr></table></figure></p><p>除此之外，都用<code>.</code>来表示，毕竟<code>.</code>表示更加方便简洁</p><h4 id="Array类型"><a href="#Array类型" class="headerlink" title="Array类型"></a>Array类型</h4><p>上面提到了 object 类型，下面具体谈一下 array 类型。其实感觉他俩挺像的，为什么这么说呢？<br>之前一段时间我一直在学习数据结构。真正的体会到了，很多看似不同的东西，其实在结构上是很相似的，甚至只是改进了一下数据的组织方式而已。<br>我们可以想象一下<code>object</code>的数据结构<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    key1 : value1,</span><br><span class="line">    key2 : value2,</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>其中<code>value</code>也可以是函数，对比一下数组的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="number">0</span> : value1,</span><br><span class="line">    <span class="number">1</span> : value2,</span><br><span class="line">    ...</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><p>其中数组中的下标是在字面量中省略的<br>很明显，它们的数据结构都是线性的序列，区别在于两点<br>1.object 的元素，可以是任意类型的。array 的一般是同一类类型的元素<br>2.object 是关联容器结构，array 是顺序容器结构。array 是寻秩访问，object 是寻关键码访问。<br><strong>谈到了它们之间的区别与联系，现在具体说一下 array 吧</strong><br>创建 array 也是有两种方法，一种是 new ,一种是字面量。和 object 差别不大<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>; <span class="comment">// 同理可省略</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    arr[i] = i + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125; <span class="comment">// 1 2 3 4 5 6 7 8 9 10</span></span><br></pre></td></tr></table></figure></p><p>省略括号表示创建一个空的数组，数组不仅可以创建空数组，还可以创建想要的形式的数组<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>); <span class="comment">// 创建包含三个元素的数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"hello"</span>); <span class="comment">// 创建包含一项元素"hello"的数组</span></span><br></pre></td></tr></table></figure></p><p>另外一种方式是字面量的，这种方式创建数组更加灵活<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = []; <span class="comment">// 空数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">"hello"</span>, <span class="string">"world"</span>, <span class="string">"!"</span>];</span><br><span class="line"><span class="keyword">var</span> arr3 = [ , , ]; <span class="comment">// 不建议使用，会生成undefined变量</span></span><br></pre></td></tr></table></figure></p><p>数组的长度可以用 length 得到<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr1.length); <span class="comment">// 4</span></span><br><span class="line">arr1[arr1.length] = <span class="number">5</span>; <span class="comment">// 添加一项</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1[<span class="number">4</span>]); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></p><p>之前谈到可以用<code>instanceof</code>来检测数组，但是它只能在一个全局内检测。所以 ES5 新增了一个方法来检测数组。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(arr)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p><code>Array</code>有很多类型的方法，我们先归一下类，以后再慢慢细究吧。<br>(1)转换方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(colors.toString()); <span class="comment">// red,blue,green</span></span><br><span class="line"><span class="built_in">console</span>.log(colors.valueOf()); <span class="comment">// red,blue,green</span></span><br><span class="line"><span class="built_in">console</span>.log(colors); <span class="comment">// red,blue,green</span></span><br><span class="line"><span class="built_in">console</span>.log(colors.join(<span class="string">"|"</span>)); <span class="comment">// red|blue|green</span></span><br></pre></td></tr></table></figure></p><p>(2)栈方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];</span><br><span class="line">colors.push(<span class="string">"yellow"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(colors); <span class="comment">// ["red", "blue", "green", "yellow"]</span></span><br><span class="line">colors.pop(); </span><br><span class="line"><span class="built_in">console</span>.log(colors); <span class="comment">// ["red", "blue", "green"]</span></span><br></pre></td></tr></table></figure></p><p>(3)队列方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];</span><br><span class="line">colors.push(<span class="string">"yellow"</span>, <span class="string">"black"</span>);</span><br><span class="line"><span class="keyword">var</span> pop = colors.pop(); <span class="comment">// black </span></span><br><span class="line"><span class="keyword">var</span> head = colors.shift();  <span class="comment">// red</span></span><br><span class="line">colors.unshift(<span class="string">"red"</span>, <span class="string">"black"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(pop+<span class="string">','</span>+head); </span><br><span class="line"><span class="built_in">console</span>.log(colors); <span class="comment">// ["red", "black", "blue", "green", "yellow"]</span></span><br></pre></td></tr></table></figure></p><p>(4)重排序方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反转组项顺序</span></span><br><span class="line"><span class="keyword">var</span> num = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>,  <span class="number">4</span>];</span><br><span class="line">num.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 4,5,2,3,1</span></span><br><span class="line"><span class="comment">//升序排序</span></span><br><span class="line">num.sort();</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 1,2,3,4,5</span></span><br></pre></td></tr></table></figure></p><p>(5)操作方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 粘贴(新数组)</span></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];</span><br><span class="line"><span class="keyword">var</span> colors2 = colors.concat(<span class="string">"yellow"</span>, [<span class="string">"black"</span>, <span class="string">"white"</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(colors2);</span><br><span class="line"><span class="comment">// (6) ["red", "blue", "green", "yellow", "black", "white"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 截切(新数组)</span></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];</span><br><span class="line"><span class="keyword">var</span> colors2 = colors.slice(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> colors3 = colors.slice(<span class="number">0</span>, <span class="number">1</span>); <span class="comment">// 不包含1</span></span><br><span class="line"><span class="built_in">console</span>.log(colors2); <span class="comment">// ["blue", "green"]</span></span><br><span class="line"><span class="built_in">console</span>.log(colors3); <span class="comment">// ["red"]co</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换(原数组上操作)</span></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];</span><br><span class="line">colors.splice(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(colors)</span><br><span class="line">colors.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">"yellow"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(colors)</span><br><span class="line">colors.splice(<span class="number">1</span>, <span class="number">1</span>, <span class="string">"black"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(colors)</span><br><span class="line"><span class="comment">//(2) ["red", "green"]</span></span><br><span class="line"><span class="comment">//(3) ["red", "yellow", "green"]</span></span><br><span class="line"><span class="comment">//(3) ["red", "black", "green"]</span></span><br></pre></td></tr></table></figure></p><p>(6)位置方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正向查找</span></span><br><span class="line"><span class="keyword">var</span> num = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>]; </span><br><span class="line"><span class="built_in">console</span>.log(num.indexOf(<span class="number">3</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 逆向查找</span></span><br><span class="line"><span class="built_in">console</span>.log(num.lastIndexOf(<span class="number">3</span>)); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p><p>(7)迭代方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每项都</span></span><br><span class="line"><span class="keyword">var</span> num = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> res = num.every(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (item &gt; <span class="number">2</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 每项结果</span></span><br><span class="line"><span class="keyword">var</span> res2 = num.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (item &gt; <span class="number">2</span>)</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(res2); <span class="comment">// [3, 5, 4]</span></span><br><span class="line"><span class="comment">// 每项运行</span></span><br><span class="line"><span class="keyword">var</span> res3 = num.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">    num = num * <span class="number">2</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(res3);</span><br><span class="line"><span class="comment">// 每次结果数组</span></span><br><span class="line"><span class="keyword">var</span> res4 = num.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (item * <span class="number">2</span>)</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(res4);</span><br><span class="line"><span class="comment">// 任一项</span></span><br><span class="line"><span class="keyword">var</span> res5 = num.some(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (item &gt; <span class="number">2</span>);  </span><br><span class="line">    &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(res5);</span><br></pre></td></tr></table></figure></p><p>(8)归并方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正向归并</span></span><br><span class="line"><span class="keyword">var</span> num = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> sum = num.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur, index, array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> prev + cur;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">// 15</span></span><br><span class="line"><span class="comment">// 逆向归并</span></span><br><span class="line"><span class="keyword">var</span> num = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> sum = num.reduceRight(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur, index, array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> prev + cur;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure></p><h4 id="Date类型"><a href="#Date类型" class="headerlink" title="Date类型"></a>Date类型</h4><p>我们可能学习过 Java 中的 Date 类型，其实 ES 也是借鉴它构建的。使用的也是 UTC 来保存日期。保存的日期的范围为 1970.1.1 前后的 1 亿年。<br>使用<code>new</code>创建<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>;</span><br><span class="line"><span class="built_in">console</span>.log(now); <span class="comment">// Sun Dec 02 2016 11:10:38 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></p><p><strong>由此得知，Dete对象默认创建的是当前的时间，那怎么得到特定的时间呢?</strong><br>有两种方法：一种是<code>Date.parse()</code>，另一种是<code>Date.UTC()</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> someDate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(<span class="string">"Nov 12, 1995"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(someDate); <span class="comment">// Fri Nov 12 1995 00:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="comment">// 省略Date.parse也是可以的</span></span><br><span class="line"><span class="keyword">var</span> someDate2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"Sep 22, 1996"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(someDate2); <span class="comment">// Sun Sep 22 1996 00:00:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></p><p>上面的方法返回的是日期对象，下面再测试一下<code>Date.UTC()</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> someDate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.UTC(<span class="number">1995</span>, <span class="number">11</span>, <span class="number">12</span>));</span><br><span class="line"><span class="built_in">console</span>.log(someDate); <span class="comment">// Sun Dec 12 1995 08:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="comment">// 省略</span></span><br><span class="line"><span class="keyword">var</span> someDate2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1995</span>, <span class="number">11</span>, <span class="number">12</span>);</span><br><span class="line"><span class="built_in">console</span>.log(someDate2); <span class="comment">//Tue Dec 12 1995 00:00:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></p><p>由此我们得知，这两种方法都是可以自动调用的，调用哪一种方法取决于传入的参数。<br><code>ES5</code>新增了一种<code>now()</code>方法，可以取得当前时间的毫秒数，那么我们可以用它做一些有用的事<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> start = <span class="built_in">Date</span>.now();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="number">1000000</span>; i++) &#123;</span><br><span class="line">    sum = i*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> end = <span class="built_in">Date</span>.now();</span><br><span class="line"><span class="keyword">var</span> runtime = end - start;</span><br><span class="line"><span class="built_in">console</span>.log(runtime); <span class="comment">// 10(ms)</span></span><br></pre></td></tr></table></figure></p><p>用+操作符也可以达到同等目的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> start = <span class="keyword">new</span> +<span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure></p><p>因为时间本身是毫秒数，所有可以用<code>&gt;</code>或者<code>&lt;</code>比较日期<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2016</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> date2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2015</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date1 &gt; date2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>格式化日期<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>;</span><br><span class="line"><span class="built_in">console</span>.log(date.toDateString()); <span class="comment">// Sun Dec 02 2016</span></span><br><span class="line"><span class="built_in">console</span>.log(date.toTimeString()); <span class="comment">// 11:53:46 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="built_in">console</span>.log(date.toLocaleDateString()); <span class="comment">// 2016/12/2</span></span><br><span class="line"><span class="built_in">console</span>.log(date.toUTCString()); <span class="comment">// Sun Dec 02 2016 11:53:46 GMT</span></span><br></pre></td></tr></table></figure></p><p>日期组件方法，都是一些 get，set 方法，这里就不一一说了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>;</span><br><span class="line"><span class="built_in">console</span>.log(date.getTime()); <span class="comment">// 1506830282288(ms)</span></span><br></pre></td></tr></table></figure></p><h4 id="RegExp类型"><a href="#RegExp类型" class="headerlink" title="RegExp类型"></a>RegExp类型</h4><p>我学过 PHP 的正则表达式，学过 Java 的正则表达式，很有意思的是现在又学<code>JS</code>的正则表达式，相对来说容易很多了，除了调用的方法名有所不同以外，其他的内容几乎无差别<br>首先创建一个正则表达式，同样是两种方式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pat = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"pat"</span>,<span class="string">"flags"</span>); <span class="comment">// new对象</span></span><br><span class="line"><span class="keyword">var</span> pat = <span class="regexp">/pat/</span>flags; <span class="comment">// 字面量</span></span><br></pre></td></tr></table></figure></p><p>稍微解释一些这个表达式的含义，<code>/</code>这个是表达式的定界符，就是隔离正则与其他字符的一个分界，为其他字符也可以，表达式后面的<code>flags</code>是一个标记，就是来切换正则表达式匹配规则的模式。<br>常见的模式有 g 表示全局模式，i 不区分大小写，m 多行模式，举几个例子说明下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pat = <span class="regexp">/suo/i</span>;</span><br></pre></td></tr></table></figure></p><p>解释一下，<code>suo</code>是正则法则，i 是模式，也就是匹配字符<code>suo</code>,且不区分大小写<br>使用<code>test</code>来测试是否匹配上<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pat = <span class="regexp">/suo/i</span>;</span><br><span class="line"><span class="built_in">console</span>.log(pat.test(<span class="string">"Suo"</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(pat.test(<span class="string">"SUO"</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(pat.test(<span class="string">"sso"</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><p>ES5 规定，使用字面量创建正则必须像直接调用 RegExp 构造函数一样，每次都要创建新的实例。<br>下面我们来看看实例的属性和方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pat = <span class="regexp">/suo/i</span>;</span><br><span class="line"><span class="built_in">console</span>.log(pat.global); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(pat.ignoreCase); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(pat.multiline); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(pat.lastIndex); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(pat.source); <span class="comment">// suo</span></span><br></pre></td></tr></table></figure></p><p>这些属性都是正则表达式本身具有的一些属性，没啥用，<br>但是它的两个方法是我们要掌握的，<strong>第一个就是<code>exec()</code>它是用来捕获组的</strong>，<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pat = <span class="regexp">/suo/ig</span>; <span class="comment">// 全局模式</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"suo: I am Suoyue"</span>;</span><br><span class="line"><span class="keyword">var</span> matches = pat.exec(str);</span><br><span class="line"><span class="comment">// 第一次捕获</span></span><br><span class="line"><span class="built_in">console</span>.log(matches.index); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(matches.input); <span class="comment">// suo: I am suo yue"</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]); <span class="comment">// suo</span></span><br><span class="line"><span class="comment">// 第二次捕获</span></span><br><span class="line">matches = pat.exec(str);</span><br><span class="line"><span class="built_in">console</span>.log(matches.index); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]); <span class="comment">// Suo</span></span><br></pre></td></tr></table></figure></p><p>正如上面所说，每一次捕获都要创建实例，都要再执行一遍捕获方法<br><strong>另一种方法是<code>test()</code>方法，他是一个判断是否匹配，正如它的名字，只是测试而已</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pat = <span class="regexp">/suo/i</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"suo: I am Suoyue"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(pat.test(str)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p><strong>假设我现在捕获到了一个组，我们怎么取得我们想要的东西呢？</strong><br>答案是使用RegExp的构造函数属性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pat = <span class="regexp">/suo/ig</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"ss suo: I am Suoyue"</span>;</span><br><span class="line"><span class="keyword">if</span> (pat.test(str)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$_);    <span class="comment">// 最近一次要匹配的字符串 suo: I am Suoyue</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>[<span class="string">"$`"</span>]); <span class="comment">// 最近匹配项前面的字符串 ss</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>[<span class="string">"$'"</span>]); <span class="comment">// 最近匹配项后面的字符串 : I am Suoyue</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>[<span class="string">"$&amp;"</span>]); <span class="comment">// 最近一次匹配项 suo</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>[<span class="string">"$+"</span>]); <span class="comment">// 最近匹配的捕获组 [空]</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>[<span class="string">"$*"</span>]); <span class="comment">// 是否使用多行模式 (未实现)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>除了上面 6 个以外还有很多，不一一累述了<br>虽 ES 正则表达式功能还是比较完备的，但是对于 PHP 和 Java  还是缺少很多高级特性，作为一个前端的脚本语言，这些已经足够了</p><h4 id="Function类型"><a href="#Function类型" class="headerlink" title="Function类型"></a>Function类型</h4><p>前面我们一直提到函数，他是对象，它可以赋值给变量，它是 ES 中最小的作用域。但是一直我都没有具体研究它，现在我读了函数这章，很多之前的稍有疑问的地方，现在都豁然开朗了。</p><p>之前也说过，<strong>函数有两种表达方式，一种是使用函数声明，一种是使用函数表达式</strong>。我们稍微回顾一些这两种形式。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//code...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数表达式</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//code...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>注意的是函数声明是会有函数声明提升的，之前也讲过，这里不在累述了。<br>由上面可以看出，函数包含函数名，函数本体，也就是<code>{}</code>里面的内容</p><p>函数实际是对象，<strong>那么函数名实际上是一个指向函数对象的指针，不会与某个函数绑定</strong><br>这句话怎么理解呢？下面给出一个例子来说明这个问题<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"suo"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> boo = foo;</span><br><span class="line">foo = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 经测试foo解引用后，运行会出错</span></span><br><span class="line">boo(); <span class="comment">// suo</span></span><br></pre></td></tr></table></figure></p><p>由上面的代码可以看出，<code>foo</code>只是一个指向函数对象的指针，当使用解引用后，断绝了这个关系了。而<code>boo</code>又指向了函数对象，所以可以运行。</p><p>下面我们来探讨另一个问题，既然我们已经得出结论，函数名只是一个指向函数对象的指针。那函数就不应该有重载这个特性。因为同一个函数名是指向同一个函数对象的。就不会指向其他对象的说法<br>下面我们也来例证一下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"suo"</span>;</span><br><span class="line"><span class="keyword">var</span> gender = <span class="string">"male"</span>;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params">name, gender</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name+<span class="string">','</span>+gender);</span><br><span class="line">&#125;</span><br><span class="line">foo(name); <span class="comment">// suo,undefined</span></span><br><span class="line">foo(name, gender); <span class="comment">// suo,male</span></span><br></pre></td></tr></table></figure></p><p>由上可知，如果函数有重载的话，第一个<code>foo</code>执行的结果应该是<code>suo</code>，但是实际的结果确实<code>suo</code>，<code>undefined</code>。很显然第一个函数执行的也是第二个函数表达式。第二个表达式的函数覆盖了之前的。<br>得出结论，<strong>函数重名会覆盖，不管参数是怎样的</strong></p><p>上面也提到了函数是对象，那么函数就可以给其他变量赋值。不仅如此函数还可以作为返回值用。<br>下面看一个例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比较人的身高</span></span><br><span class="line"><span class="keyword">var</span> suo = &#123;</span><br><span class="line">    height : <span class="number">180</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> yue = &#123;</span><br><span class="line">    height : <span class="number">170</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">campareHeight</span>(<span class="params">height</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span>(<span class="params">suo, yue</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (suo.height &gt; yue.height) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (suo.height &lt; yue.height) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(suo, yue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(campareHeight(<span class="string">"height"</span>)); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p><p>这里要提醒下，函数声明是不可以直接做返回值的，只有执行后的函数才能做返回值.一般这种情况我，使用立即执行函数一步来搞定，下面写一个立即执行函数的简单例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明与执行分步写</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(foo()); <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 使用立即执行函数一步写</span></span><br><span class="line"><span class="built_in">console</span>.log( (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;)() ); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p><p><strong>函数内部有两个特殊的对象：arguments 和 this</strong><br>arguments 是一个类数组对象，包含传入函数的所以参数主要用来保存函数参数的，这个对象有一个叫 callee 的属性，它是一个指针，指向拥有这个 arguments 对象的函数。<br>下面一个例子告诉我们caller的用法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num * <span class="built_in">arguments</span>.callee(num<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">10</span>); <span class="comment">// 3628800</span></span><br></pre></td></tr></table></figure></p><p>其实这个就是 10 的阶乘。关键在于这行代码<code>arguments.callee(num-1)</code>，我们再仔细揣摩这句话，<strong>callee 的属性，它是一个指针，指向拥有这个 arguments 对象的函数</strong>，现在明白了<code>arguments.callee(num-1)</code>就等同于<code>foo(num-1)</code>，这样就清楚了。<br>该说说 this 了，我看了半天书上的叙述，总结了一句话，<strong>当在哪个作用域调用函数时，该函数中的 this 就是哪个作用域对象</strong><br>下面验证下这句话的正确性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局调用</span></span><br><span class="line"><span class="built_in">window</span>.color = <span class="string">"red"</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    color: <span class="string">"blue"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.color);</span><br><span class="line">&#125;</span><br><span class="line">getColor(); <span class="comment">// red</span></span><br><span class="line">o.getColor = getColor;</span><br><span class="line">o.getColor(); <span class="comment">// blue</span></span><br></pre></td></tr></table></figure></p><p>另一个是<code>caller</code>，表示调用当前函数的函数的引用，全局作用域为<code>null</code>，验证一下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    boo();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">boo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(boo.caller); </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(foo.caller); <span class="comment">// null</span></span><br><span class="line">foo(); <span class="comment">// ƒ foo() &#123; boo();&#125;</span></span><br></pre></td></tr></table></figure></p><p>这里可以看到显示了 foo 的源码，下面用另一种方式实现这个效果(根据 callee 的用法好理解)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    boo();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">boo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee.caller); </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(foo.caller); <span class="comment">// null</span></span><br><span class="line">foo(); <span class="comment">// ƒ foo() &#123; boo();&#125;</span></span><br></pre></td></tr></table></figure></p><p>这种写法虽然现在可以，但是出于安全性考虑，严格模式下已经不许这样做了，另外严格模式下函数的 caller 属性是不能赋值的</p><p>都说对象是有属性方法的，函数也不例外，下面谈谈函数的属性和方法吧<br>函数有两个属性一个是 leghth，一个是 prototype ，前面一个是指希望接受参数个数，没什么好说的。关键在于这个 prototype 属性,这个属性是ES搞面向对象专门搞得一个属性，这里不谈太多了，下一篇博客研究对象和继承时。好好探究这个属性。这里就简单提几点，ES5 中，prototype 属性太多，是无法使用 for-in 枚举的。</p><p>下面我们聊聊,<strong>函数的两个独有的方法</strong>，说独有是因为它不是其他对象有的，因为它们关系到作用域。我们知道 ES 就只有函数作用域，所以这一切搜说得通了。<br>这两个方法，一个是<code>apply()</code>,一个是<code>call()</code>,这两个函数有很多相似之处。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callFoo</span>(<span class="params">c, d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> foo.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">callFoo(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><p>这里我的理解是，apply这个函数，是将 callFoo 的 this 对象和 arguments 传给了 foo，并执行结果返回给 callFoo，也可以不用自己的 arguments 对象，随意传一个数组也可以。因为 arguments 本身也是一个数组。如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callFoo</span>(<span class="params">c, d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> foo.apply(<span class="keyword">this</span>, [<span class="number">3</span>, <span class="number">2</span>]); <span class="comment">// 替换成自己的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不写参数看看</span></span><br><span class="line">callFoo(); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>果然是这样，证明我的理解是正确的。<br>理解了 apply，call 也就好理解了，它们区别就在于参数，不同于 apply，一个作用域和一个参数数组。<strong>call 的参数要全部单独写出来</strong>。改变上面的代码，看看<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callFoo</span>(<span class="params">c, d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> foo.call(<span class="keyword">this</span>, <span class="number">3</span>, <span class="number">2</span>); <span class="comment">// 参数数组变成单个参数</span></span><br><span class="line">&#125;</span><br><span class="line">callFoo(); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>一切都在意料之中，果然是这样。<br>说了这么这两个方法，它们有啥用呢？<strong>它们的真正用处在于扩充函数的作用域</strong><br>下面看一个例子你就明白了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.color = <span class="string">"red"</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    color: <span class="string">"blue"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.color);</span><br><span class="line">&#125;</span><br><span class="line">getColor();            <span class="comment">// red</span></span><br><span class="line">getColor.call(<span class="keyword">this</span>);   <span class="comment">// red</span></span><br><span class="line">getColor.call(<span class="built_in">window</span>); <span class="comment">// red</span></span><br><span class="line">getColor.call(o);      <span class="comment">// blue</span></span><br></pre></td></tr></table></figure></p><p>这里你是否明白了呢，<code>getColor</code>本来是全局作用域，本应该是输出<code>red</code>，绑定<code>o</code>后，竟然可以输出对象的变量。这样做的最大好处是函数既访问到了对象的变量，而且和对象没有形成耦合关系。<br>最后说一个 ES 方法<code>bind()</code>。下面看一下代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.color = <span class="string">"red"</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    color: <span class="string">"blue"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.color);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> oGetColor = getColor.bind(o);</span><br><span class="line">oGetColor(); <span class="comment">// blue</span></span><br></pre></td></tr></table></figure></p><p>这个方法比<code>call()</code>更直接，直接实现函数对象绑定的值，并给一个新的函数。这个就牛逼了，具有<code>call()</code>的好处,并且更加直接，好理解。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《JavaScript高级程序设计》读后记&lt;四&gt;：垃圾回收</title>
      <link href="/2015/11/29/t-book_js_004/"/>
      <url>/2015/11/29/t-book_js_004/</url>
      
        <content type="html"><![CDATA[<p>上一篇博客里，阐明了闭包的概念和作用，但是它有个缺点就是容易造成内存泄露，为什么会造成内存泄露呢？内存泄露又是怎样产生的呢？这一切要从 JavaScript 的垃圾回收机制说起</p><h3 id="理解JavaScript的垃圾回收机制"><a href="#理解JavaScript的垃圾回收机制" class="headerlink" title="理解JavaScript的垃圾回收机制"></a>理解JavaScript的垃圾回收机制</h3><p>JavaScript 具有自动垃圾回收机制，因此我们可以不必管它，但是也要知道它的原理。<br>垃圾回收机制的原理：<strong>垃圾回收机制会周期性的释放不再使用的变量的内存</strong>。<br>这里我们要知道两点：<br>1.这个周期是多少？是如何决定的？<br>2.如何判断这个变量不再继续使用？</p><p>我们先来探究第二个问题，<strong>如何判断这个变量不再使用，并回收</strong>？<br>我们知道，每一个变量都是有生命周期的，如果哪个变量没有的话，就会一直残留下去，总有一天会消耗完内存。这也叫内存泄露。下面我们分析下局部变量的正常生命周期<br>局部变量只在函数执行过程中存在，函数执行结束后，局部变量就没有存在价值了，然后垃圾回收器给无用的局部变量标记。等回收周期到来的时候，回收这个变量。</p><p><strong>标记变量有两种策略：一种是标记清除法，另一种是引用计数法</strong><br>这个标记清除法其实很简单解释，当变量进入环境时（变量声明），该变量就被标记为“进入环境”。当变量离开环境时（函数执行完），该变量就被标记为“离开环境”。而这些被标记成离开环境的变量就是无用变量，等着垃圾回收机制回收就可以了</p><p>第二个问题清楚了，我们看看第一个问题，<strong>垃圾回收机制的周期是多少？怎么决定的？</strong><br>从 IE 开始谈起，IE 垃圾回收器是根据内存分配量运行的，具体就是 256 个变量，4096 个对象字面量，数组元素，或者 64Kb 的字符串。达到上面任何一个临界值，垃圾回收器就开始运行。但是这样又出现了一个问题，如果一个脚本本来就有那么多变量，垃圾回收器就会一直的运行。每次回收完了又到达临界值，这样导致垃圾回收器频繁的调用，对性能来说是有很大影响的。</p><p>等到 IE7 的出现，重写了垃圾回收机制。<strong>固定的临界量改为了动态的分配</strong>。垃圾回收的内存分配量低于 15% 时，临界值就加倍。当内存分配量达 85% 时，临界时恢复为初始的值。简单的来说就是，内存够用时，就不急着回收。内存不够时，就和初始一样，达到就回收。这样一来，即便脚本中的变量很多，只要内存够用，也不会频繁的调用垃圾回收器了。</p><p>在 JavaScript 中虽然我们不必担心内存管理的问题，但是我们也需要保证页面的性能更好。这里我们可以去优化内存。<strong>优化内存最佳的方式就是，将无用数据，设置为<code>null</code>,来释放其引用，也就是解除引用</strong>。</p><p>下面我们来看一段代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span>  localPerson = <span class="keyword">new</span> <span class="built_in">Object</span>;</span><br><span class="line">    localPerson.name = name;</span><br><span class="line">    <span class="keyword">return</span> localPerson;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> globalPerson = createPerson(<span class="string">"suo"</span>);</span><br><span class="line"><span class="comment">// 解除引用</span></span><br><span class="line">globalPerson = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></p><p>这里我们可以知道的是<code>localPerson</code>是局部的变量，所以垃圾回收器会自动为它解除引用<br>但是<code>globalPerson</code>是全局变量，如果不需要用了，垃圾回收机制不会干，现在我们手动为它解除引用。解除引用之后，它不会立即销毁，只是脱离了执行环境，等待垃圾回收器来回收。</p><p>说了这么多，搞清楚了垃圾回收机制。上一篇博客中谈到闭包的缺点，闭包会造成内存泄露。清楚了垃圾回收机制，我们可以知道的是，闭包访问的变量是无法被垃圾回收器回收的。那么我们该怎么办了。恰好刚刚就有种方法。我们可以手动来解除引用。这样就避免了闭包产生的内存泄露了。<br>下面给出闭包和解除引用的实例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assignHadler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">"div"</span>);</span><br><span class="line">    <span class="keyword">var</span> id = element.id;</span><br><span class="line">    element.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(id);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 解除引用</span></span><br><span class="line">    element = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《JavaScript高级程序设计》读后记&lt;三&gt;：闭包</title>
      <link href="/2015/11/28/t-book_js_003/"/>
      <url>/2015/11/28/t-book_js_003/</url>
      
        <content type="html"><![CDATA[<p>在上一篇博客里，谈到了作用域，留下了一个问题，怎样从函数外访问到函数内部的局部变量。这是在我完全理解闭包和函数后，写的一篇博客。</p><h3 id="理解函数与闭包"><a href="#理解函数与闭包" class="headerlink" title="理解函数与闭包"></a>理解函数与闭包</h3><p>前面我们知道了作用域最小单位就是函数，那么函数是怎么表示的呢？<br>定义函数有两种方式：一种是函数声明，另一种是函数表达式。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">arg0, arg1, arg2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// code...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们知道函数也是一种引用类型，所以函数，也有自己的属性，其中一个就是<code>name</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo.name);  <span class="comment">// foo</span></span><br></pre></td></tr></table></figure></p><p>由此我们也更加确定了，函数也是一个对象，里面包含各种属性和方法<br>对于函数还有一个特别的性质，那就是函数声明提升，如同变量声明提升，函数声明也是可以提升的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sayBye();  <span class="comment">// bye bye</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayBye</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"bye bye"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>函数声明提升会带来一个问题<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反例</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (a &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">saybye</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// code...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> (a &lt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">saybye</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// code...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的代码，很容易看出来，函数声明提升后，可能产生和预期不一样的效果<br>接下来我们看下函数表达式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params">arg0, arg1, arg2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//code..</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>这个表达式怎么解释呢？</strong><br>就如一个赋值语句一样，将后面的匿名函数赋值给<code>foo</code>变量，有人可能有疑问，函数也可以赋值吗？在 js 里面来说，这是可以的，因为 js 里面函数也是一种引用类型，当作对象赋值给变量</p><p><strong>那么函数表达式是否也有函数提升呢？</strong><br>下面验证一下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">foo(); <span class="comment">// VM225:1 Uncaught TypeError: foo is not a function</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"ok"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>答案是没有，函数并没有提升上去，因为在这里函数作为了对象赋值给了变量，并不是声明，这里的赋值同样的也是引用赋值。此时<code>foo</code>指向的是堆中的内存块。</p><p><strong>谈谈闭包</strong><br>闭包是有权访问另一个函数作用域中的变量的函数，创建闭包的常见方式，就是在一个函数内部创建另一个函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要访问foo中的a</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a1 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br><span class="line"><span class="built_in">console</span>.log(a1);</span><br><span class="line"><span class="comment">// VM309:4 Uncaught ReferenceError: a1 is not defined</span></span><br></pre></td></tr></table></figure></p><p>显然访问不了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用闭包函数访问</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a2 = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b();</span><br><span class="line">&#125;</span><br><span class="line">foo(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p><p><strong>下面解释一下是怎么做到的</strong><br><code>a2</code>是<code>foo</code>的局部变量，而是<code>b</code>函数的外部变量，而<code>b</code>是可以访问到的，<code>b</code>函数在闭包函数<code>b</code>返回到外部的函数或全局变量<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 改写成立即执行函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a3 = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a3);</span><br><span class="line">        &#125;)();</span><br><span class="line">&#125;</span><br><span class="line">foo(); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p><p>将<code>b</code>函数改写成立即执行函数更加清晰紧凑了，相当于函数里面将一个执行的函数返回到外部去<br>就好像在函数内外构建了一个桥梁。<br><strong>闭包有闭包的好处，但是它也有不少缺陷</strong><br>闭包会携带包含它的函数的作用域，因此比其他函数占用更多的内存，过度的使用闭包可能会导致内存占用过多<br><strong>闭包的限制与解除</strong>，闭包只能取得包含函数中的任何变量的最后一个值，闭包保存的是整个变量对象，而不是某个特殊的变量<br>下面我们来看看代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">        arr[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line">alert(foo());</span><br></pre></td></tr></table></figure></p><p>谈到闭包的缺点，必须要说的一个东西就是 Js 的垃圾回收机制，下篇博客，我将重点研究关于 JS 的垃圾回收机制，</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《JavaScript高级程序设计》读后记&lt;二&gt;：作用域</title>
      <link href="/2015/11/27/t-book_js_002/"/>
      <url>/2015/11/27/t-book_js_002/</url>
      
        <content type="html"><![CDATA[<p>在第一篇博客里面，提到过变量是松散变量，决定它只是特定时间保持特定的值的符号而已，而变量的值和数据类型可以在脚本的生命周期内改变的。接下来就是理解这种特性的性质了。</p><h3 id="理解引用类型，作用域"><a href="#理解引用类型，作用域" class="headerlink" title="理解引用类型，作用域"></a>理解引用类型，作用域</h3><p>前面我们已经知道了，ES 变量类型包括 5 种基本类型和引用类型。</p><p><strong>基本类型与引用类型的区别？</strong></p><ul><li>基本类型值在内存中占据固定大小的空间，保存在栈中，引用类型的值是对象，被保存在堆中</li><li>这 5 种基本类型可以按值访问的，而引用类型的值是按引用访问</li><li>基本类型的变量包含的是实际的值，引用对象实际包含的并不是对象本身而是指向对象的指针。</li></ul><p><strong>这里要解释一下什么是按值访问？什么是按引用访问？</strong><br>如果学过 C++ ,我们就会知道 C++ 传参有两种方式，一种是传值，一种是传引用。</p><p><strong>这两种方式有什么区别呢？</strong><br>区别在于传值是将实参拷贝给形参，而传引用并不是简单的赋值，而是将形参与实参绑定在一起，它们同时指向同一内存空间，修改形参相当于修改实参。<strong>引用相当于变量的别名</strong>，理解这句话。<br>我们可能大致知道什么是按值访问，什么是按引用访问了</p><p><strong>那么，为什么基本类型是按值访问？而引用类型是按引用访问？</strong><br>我们知道引用类型不同于基本类型，它不是单纯的值，而是一种数据结构，包含有属性和方法。<br>如果按值传递，会拷贝整个对象，这样消耗的空间是否太大了呢，所以<code>ES</code>将这些对象的访问都设置成了按引用访问。</p><p><strong>刚才我们提到了，<code>c++</code>的值拷贝方式和引用拷贝方式，<code>JS</code>是否也是这样的呢？</strong><br>的确，<code>JS</code>也是这样的，下面简单的验证一下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本类型的拷贝</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"hello"</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line"><span class="built_in">console</span>.log(a+<span class="string">','</span>+b); <span class="comment">// hello,hello</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用类型的拷贝</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Objcet();</span><br><span class="line"><span class="keyword">var</span> obj1 = obj2;</span><br><span class="line">obj.name = <span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name+<span class="string">','</span>+obj1.name); <span class="comment">// hello,hello</span></span><br></pre></td></tr></table></figure><p>因此我们可以看到，对象<code>obj1</code>是随<code>obj</code>变化的，他们是指向同一个内存块的，而不是简单的拷贝而已</p><p><strong>那么传参是否也是在我们的意料之中呢？</strong><br>然而并不是这样的，ES 中所有函数的参数都是按值传递的，基本类型值的传递就像复制一样<br>而引用类型的值的传递，就行引用类型的变量复制一样，为什么会这样呢？<br>这里我们重点看一下传递引用参数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    obj.name = <span class="string">"suo"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>;</span><br><span class="line">setName(person);</span><br><span class="line"><span class="built_in">console</span>.log(person.name);   <span class="comment">// suo</span></span><br></pre></td></tr></table></figure></p><p>由上可知，对象传递后，通过函数修改对象属性影响了全局变量的值<br>在这里有人可能会觉得，函数传的是引用并非是值吧<br>其实 ES 中所有的函数都是按值传递，并非引用传递，有人肯定会有疑问为什么<code>obj</code>会被改变呢<br>其实这里说的按值传递有点特殊，这个值恰好是指向内存的指针，与引用传递的不同在于，并没有，形参并没有和实参进行引用绑定<br>接下来进一步验证一下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    obj.name = <span class="string">"suo"</span>;</span><br><span class="line">    obj = <span class="keyword">new</span> <span class="built_in">Object</span>;   </span><br><span class="line">    obj.name = <span class="string">"yue"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>;</span><br><span class="line">setName(person);</span><br><span class="line"><span class="built_in">console</span>.log(person.name);   <span class="comment">// suo</span></span><br></pre></td></tr></table></figure></p><p>上面代码的意义是什么呢？我们在函数内重新定义了这个对象，并给了它一个属性<br>而执行后，结果<code>person</code>并没有和<code>obj</code>的属性一样，也就是说<code>obj</code>并不是<code>person</code>的引用，仅仅是它的地址的值等于<code>person</code>的地址而已</p><p>我们已经知道了<code>ES</code>有引用类型和基本类型，而且<code>typeof</code>操作符可以检测基本类型的类型<br><strong>那么我们怎样检测引用类型呢？</strong>其实也有个操作符可以利用，不过它只能判断是或者不是，不能直接得出是什么类型<br>下面我们测试一下几个引用类型检测<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person <span class="keyword">instanceof</span> <span class="built_in">Object</span>);</span><br></pre></td></tr></table></figure></p><p>刚刚看到了，函数通过传值的形式来传参<br><strong>现在思考一下，函数是怎么执行的呢？</strong><br>原来每个函数都有执行环境，每个执行环境都有与之对应的变量对象，环境中所有的对象和函数都保存在这个对象中。<br>代码在一个环境中执行时，会创建变量对象的作用域链，作用域链控制执行环境访问变量和函数的顺序和权限。<br>下面先看一段代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="string">"red"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (color === <span class="string">"red"</span>)</span><br><span class="line">        color = <span class="string">"yellow"</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        color = <span class="string">"green"</span>;</span><br><span class="line">&#125;</span><br><span class="line">changeColor();</span><br><span class="line"><span class="built_in">console</span>.log(color); <span class="comment">// yellow</span></span><br></pre></td></tr></table></figure></p><p>可知，函数执行时可以访问到外部的变量，这里的作用域包括两个对象：自己的对象，全局环境的对象<br><strong>进一步研究，多层函数套用，执行是怎样的呢？</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="string">"blue"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> anotherColor = <span class="string">"red"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">swapColors</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> tempColor = anotherColor;</span><br><span class="line">        anotherColor = color;</span><br><span class="line">        color = tempColor; <span class="comment">// 都能访问</span></span><br><span class="line">    &#125; <span class="comment">// 只能访问color,anothor</span></span><br><span class="line">    swapColor();</span><br><span class="line">&#125; <span class="comment">// 只能访问color</span></span><br><span class="line">changeColor();</span><br></pre></td></tr></table></figure></p><p>可以看出作用域链是由内而外的，也就是说函数是从当前的环境对象向外搜索变量，直至到全局对象。函数可以访问外部的变量，但是无法访问当前环境下函数里的局部变量。<br>用更确切的话说，<strong>ES 的作用域链是单向的，而这个方向是由里向外的访问原则</strong>。<br>下面画一个图式来说明这个问题<br><img src="/images/dm2.png" alt="img"><br>现在问题来了，既然作用域是单向访问，有没有办法访问到由外访问到里面的局部变量呢？<br>答案是有的，下节谈一下闭包，这个特性能很好的解决这个问题。<br>还有一点要说明的是,<strong>JS 没有块级作用域</strong>，不同域 c 语言，花括号括起来的都有作用域，<strong>JS 只有函数作用域</strong><br>下面用代码解释下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a=<span class="number">0</span>; a&lt;<span class="number">10</span>; a++) &#123;</span><br><span class="line">        b++; <span class="comment">// 出错</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d"</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// error: 'b' was not declared in this scope,b++;</span></span><br><span class="line"><span class="comment">// error: 'a' was not declared in this scope</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> a=<span class="number">0</span>; a&lt;<span class="number">10</span>; a++) &#123;</span><br><span class="line">    b++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a+<span class="string">','</span>+b);</span><br><span class="line"><span class="comment">// 10,10</span></span><br></pre></td></tr></table></figure><p>根据上面的运行结果，我们很容易看到 C 中花括号的是单独的作用域，其他作用域是访问不到的，<code>for</code>循环里的变量，循环结束后，也不会保留<br>而 JS 里的不一样，他们虽然有花括号，但是这个花括号如同形式一般，没特别的意义，与去掉花括号是同样的意义。 JS 是通过函数作用域，来实现作用域链，控制访问顺序和权限。所有它的最小执行的单元就是函数。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《JavaScript高级程序设计》读后记&lt;一&gt;：数据类型</title>
      <link href="/2015/11/27/t-book_js_001/"/>
      <url>/2015/11/27/t-book_js_001/</url>
      
        <content type="html"><![CDATA[<p>经过一段时间的学习，深感 JavaScript 知识点还是挺多。之前一直是看视频教程和博客学习 JavaScript 。但是总觉得缺点什么，不管是视频还是博客，它们强调的始终是单一的知识或者是技术点。并没有对整个语言有一个更加全面的概述。基于这些学习上的不足，我向师哥师姐们询问到了这方面的问题，于是乎他们向我推荐了这本书，《JavaScript高级程序设计》第三版。无奈由于时间原因，一直放在书桌上搁置了好一段时间。就在近几天我终于有机会专心看这本书了。经过一个星期的学习，感觉大有收获，所以写下这篇博客，记录学习中的偏向于重点知识的理解和体会。</p><h3 id="理解变量与数据类型"><a href="#理解变量与数据类型" class="headerlink" title="理解变量与数据类型"></a>理解变量与数据类型</h3><p><strong>1.ES的变量是松散变量</strong>，也就是说每一个变量仅仅是用于保存一个值的占位符，它可以保存任何值。变量未声明或未初始化之前的值是<code>undefined</code>,定义之后的值是赋给它的任何值。到这里就一个小疑问，通常我们学习其他语言都会有，一个值和类型相对应，那么问题来了，<code>undefind</code>是值那么它的类型又是啥呢？做个简单的例子测试一下看看<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a; </span><br><span class="line">alert(a); <span class="comment">// undefined</span></span><br><span class="line">alert(<span class="keyword">typeof</span> a); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></p><p>原来值为<code>undefined</code>的类型也是<code>undefined</code>。<br>由此我们可能会想到另外一个值，那就是<code>null</code>,是不是<code>nUll</code>的类型也是<code>null</code>呢？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">null</span>; <span class="comment">// null</span></span><br><span class="line">alert(a); <span class="comment">// object</span></span><br><span class="line">alert(<span class="keyword">typeof</span> a);</span><br></pre></td></tr></table></figure></p><p><code>null</code>的类型竟然是<code>object</code>，估计有不少人会大跌眼镜吧，为啥会这样？凭什么？<br>其实这是正确的，<code>JavaScript</code>的<code>null</code>被认为是空对象的引用<br>这里还要解释下什么是空对象的引用？简单的说就是一个变量本该保存一个对象，但是还没有保存对象，这个时候就应该把这个变量来保存<code>null</code>，显示的表示这个变量是一个空对象的变量。</p><p><strong>2.<code>undefined</code>和<code>null</code>又有哪些区别和联系呢？</strong><br>首先说联系<code>undefined</code>其实是<code>null</code>派生出来的，在代码层上表现为<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="literal">undefined</span> == <span class="literal">null</span>); <span class="comment">// true</span></span><br><span class="line">alert(<span class="literal">undefined</span> === <span class="literal">null</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><p>第<code>2</code>个为<code>false</code>好说，至少是他们类型是不一致的。第一个为什么为<code>true</code>呢？<br>原来这个<code>==</code>符是类似相等符，不是绝对相等，<code>null</code>和u<code>ndefined</code>的值是类似的。<br>区别上面也很容易看出来</p><ul><li>用途不一致：<code>null</code>用于空对象指针，给还没对象的变量赋值。<code>undefined</code>是来区别变量的未初始化或声明的。</li><li>常用于：<code>null</code>常用与显示的赋值变量，<code>undefined</code>不会这么做.</li></ul><p><strong>3.基本类型</strong><br>ES 中有 5 种简单数据类型和一种复杂数据类型，分别为<code>undefined</code>，<code>null</code>，<code>boolean</code>，<code>number</code>，<code>string</code>，<code>object</code>。其中<code>object</code>实质是一组无序名值对组成的。<br>具体理解的是<code>object</code>这一类型。通过执行<code>new</code>来创建对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>; <span class="comment">// 都可以</span></span><br></pre></td></tr></table></figure></p><p><code>object</code>的每一个实例下面都有属性和方法</p><ul><li><code>constructor</code>:创建当前对象的函数，对于上面就是<code>Object()</code>这个构造函数</li><li><code>hasOwnProperty(propertyName)</code>:检查属性在当前对象中是否存在</li><li><code>isProtptypeOf(object)</code>:检查属性是否是当前对象原型</li><li><code>propertIsEnumerable(propertypeName)</code>:检查对象是否可以用<code>for-in</code>来枚举</li><li><code>toLocaleString()</code>:返回对象字符串表示，与执行环境对应</li><li><code>toString()</code>:返回对象字符串表示</li><li><code>valueOf()</code>:返回对象的字符串，数值，布尔值表示<br>要具体理解这些函数和属性，需要后面面向对象的思想做铺垫。<br>ES 中 Object 是所有对象的基础。因此所有对象都具有这些基本的属性和方法。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 this 的两种误解</title>
      <link href="/2015/10/25/note-this/"/>
      <url>/2015/10/25/note-this/</url>
      
        <content type="html"><![CDATA[<h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><h2 id="两种误解"><a href="#两种误解" class="headerlink" title="两种误解"></a>两种误解</h2><ul><li><p><strong>误解1 <code>this</code> 指向函数本身</strong></p><ul><li><p>对象内部引用自身 具名函数可以实现、匿名就不好实现了</p><ul><li>弃用的方法：<code>arguments.callee</code></li></ul></li><li><p>解决方法1 <code>foo</code>函数名 代替 <code>this</code></p></li><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  foo.count++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.count = <span class="number">0</span></span><br><span class="line">foo()</span><br><span class="line"><span class="built_in">console</span>.log(foo.count) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li><li><p>解决方法2 强制 this 指向 foo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.count++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo1.count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">foo1.call(foo1)</span><br><span class="line"><span class="built_in">console</span>.log(foo1.count)</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>误解2 <code>this</code> 指向函数作用域</strong></p><ul><li>this 任何情况下都不指向函数词法作用域</li><li>this 无法跨越词法作用域边界</li></ul></li></ul><h2 id="this-到底是什么"><a href="#this-到底是什么" class="headerlink" title="this 到底是什么?"></a>this 到底是什么?</h2><p><strong>this 的绑定和函数的声明位置没有任何关系，只取决于函数的调用方式</strong></p><ul><li><p>函数的调用位置</p><ul><li><p>分析调用栈</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用链相关</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// global</span></span><br><span class="line">    bar()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span> </span>&#123;</span><br><span class="line">    <span class="comment">// global foo</span></span><br><span class="line">    baz()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// global foo bar</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><p><strong>严格模式下，全局对象无法绑定</strong></p></li></ul></li><li><p>隐式调用</p><ul><li><p>绑定对象内部</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    foo: foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.foo() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>只有最顶层有效</p></li><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">40</span>,</span><br><span class="line">    obj2: obj2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    a: <span class="number">3</span>,</span><br><span class="line">    foo: foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.obj2.foo() <span class="comment">// 42</span></span><br></pre></td></tr></table></figure></li><li><p>隐式丢失</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">10</span>,</span><br><span class="line">    foo: foo</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = obj.foo</span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'global'</span></span><br><span class="line">obj.foo()</span><br></pre></td></tr></table></figure><ul><li><p>隐式 传参丢失</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    fn()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    foo: foo</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(bar(obj.foo))</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>显式绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.call(obj) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p><strong>无法解决隐式丢失问题</strong></p><ul><li><p>解决方法1: 硬绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    foo.call(obj)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>New 调用</p></li><li><strong>优先级 new &gt; 显示调用 &gt; 隐式调用 &gt; 调用栈</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 水平垂直居中的6种常用方法</title>
      <link href="/2015/10/25/t-blog_css_001/"/>
      <url>/2015/10/25/t-blog_css_001/</url>
      
        <content type="html"><![CDATA[<p>学了前端之后，也应该有一些收获了，现在写一些简单 demo， 练下手</p><p>前端布局中最常见的就是居中问题，由于浏览器的兼容性不一致，单一的居中方法会有很多缺陷<br>即使如此，还是有方法解决这些问题的。这里我总结了最常见的 6 种居中的方法，每种方法都在不同的浏览器下测试过。下面给出具体的代码。</p><h3 id="水平垂直居中的-6-种常用方法"><a href="#水平垂直居中的-6-种常用方法" class="headerlink" title="水平垂直居中的 6 种常用方法"></a>水平垂直居中的 6 种常用方法</h3><h4 id="HTML-模板"><a href="#HTML-模板" class="headerlink" title="HTML 模板"></a>HTML 模板</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>水平垂直居中<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"center.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 绝对定位法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"absolute-center"</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 负外边距法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"negative-center"</span>&gt;</span>demo2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- transform法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"transform-center"</span>&gt;</span>demo3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- table-cell --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"table-cell"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block-center"</span>&gt;</span></span><br><span class="line">            demo4</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- inline-block法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo5"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inline-center"</span>&gt;</span></span><br><span class="line">        demo5</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- flexbox法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo6"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"flexbox-center"</span>&gt;</span></span><br><span class="line">        demo6</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="CSS-布局"><a href="#CSS-布局" class="headerlink" title="CSS 布局"></a>CSS 布局</h4><p>先写一个基本的样式<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*容器*/</span></span><br><span class="line"><span class="selector-class">.demo1</span>, <span class="selector-class">.demo2</span>, <span class="selector-class">.demo3</span>, <span class="selector-class">.demo4</span>, <span class="selector-class">.demo5</span>, <span class="selector-class">.demo6</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> black solid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*样式*/</span></span><br><span class="line"><span class="selector-class">.absolute-center</span>, <span class="selector-class">.negative-center</span>, <span class="selector-class">.transform-center</span>, <span class="selector-class">.block-center</span>, <span class="selector-class">.inline-center</span>, <span class="selector-class">.flexbox-center</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>1.绝对定位法<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*绝对定位法*/</span></span><br><span class="line"><span class="selector-class">.absolute-center</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.负外边距法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*负外边距*/</span></span><br><span class="line"><span class="selector-class">.negative-center</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">110px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">110px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.tranfrom法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/*tranfrom法*/</span><br><span class="line">.transform-center &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    margin: auto;</span><br><span class="line">    top: 50%;</span><br><span class="line">    left: 50%;</span><br><span class="line">    -webkit-transform: translate(-50%, -50%);</span><br><span class="line">        -ms-transform: translate(-50%, -50%);</span><br><span class="line">            transform: translate(-50%, -50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.table-cess法<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*table-cell*/</span></span><br><span class="line"><span class="selector-class">.demo4</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.table-cell</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.block-center</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5.inline-block法<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*inline-block*/</span></span><br><span class="line"><span class="selector-class">.demo5</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.demo5</span><span class="selector-pseudo">:after</span>, <span class="selector-class">.inline-center</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">verticel</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.demo5</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">0.25em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inline-center</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">99%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>6.flexbox法<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*flexbox法*/</span></span><br><span class="line"><span class="selector-class">.demo6</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;   <span class="comment">/* OLD:   */</span></span><br><span class="line">    <span class="attribute">display</span>: -moz-box;      <span class="comment">/* OLD: Firefox (buggy) */</span></span><br><span class="line">    <span class="attribute">display</span>: -ms-flexbox;   <span class="comment">/* MID: IE 10 */</span></span><br><span class="line">    <span class="attribute">display</span>: -webkit-flex;  <span class="comment">/* NEW, Chrome 21–28, Safari 6.1+ */</span></span><br><span class="line">    <span class="attribute">display</span>: flex;          <span class="comment">/* NEW: IE11,  */</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">-webkit-box-align</span>: center; </span><br><span class="line">        <span class="attribute">-moz-box-align</span>: center; <span class="comment">/* OLD… */</span></span><br><span class="line">        <span class="attribute">-ms-flex-align</span>: center; <span class="comment">/* You know the drill now… */</span></span><br><span class="line">    <span class="attribute">-webkit-align-items</span>: center;</span><br><span class="line">            <span class="attribute">align-items</span>: center;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">-webkit-box-pack</span>: center; </span><br><span class="line">        <span class="attribute">-moz-box-pack</span>: center;</span><br><span class="line">        <span class="attribute">-ms-flex-pack</span>: center;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">-webkit-justify-content</span>: center;</span><br><span class="line">            <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flexbox</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box; <span class="attribute">display</span>: -moz-box;</span><br><span class="line">    <span class="attribute">display</span>: -ms-flexbox;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">-webkit-box-align</span>: center; <span class="attribute">-moz-box-align</span>: center;</span><br><span class="line">    <span class="attribute">-ms-flex-align</span>: center;</span><br><span class="line">    <span class="attribute">-webkit-align-items</span>: center;</span><br><span class="line">            <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 垂直居中 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《CSS权威指南》读后记&lt;三&gt;：浮动与定位</title>
      <link href="/2015/10/23/t-book_css_003/"/>
      <url>/2015/10/23/t-book_css_003/</url>
      
        <content type="html"><![CDATA[<p>上一段时间学了盒子模型，盒子模型虽然弄清楚了，对于制作页面来说还是一点小懵懂的地方，那就是布局。怎样布局才算是好的布局，才能轻松的高效的还原设计稿。学了这章后，对于一般页面的布局没什么太大问题了。现在记下一点笔记，以后查漏补缺。</p><h3 id="浮动（float）"><a href="#浮动（float）" class="headerlink" title="浮动（float）"></a>浮动（float）</h3><h4 id="浮动元素"><a href="#浮动元素" class="headerlink" title="浮动元素"></a>浮动元素</h4><p>脱离了文档流，浮动元素与周围外边距不会合并。浮动元素会生成一个块框<br>1.浮动规则</p><ul><li>左右不能超过父级块边界</li><li>浮同一父元素下的浮动动元素之间不能相互覆盖</li><li>顶端不能超过父元素顶端</li><li>顶端不能比之前所有元素顶端高</li><li>空间不足，浮动元素将被挤到新行</li><li>负外边距可以使浮动元素跑到父元素外边</li></ul><p>2.重叠规则</p><ul><li>行内框重叠时，边框，背景，内容显示在浮动元素之上</li><li>块框重叠时，显示在浮动元素之下</li></ul><h4 id="实现浮动"><a href="#实现浮动" class="headerlink" title="实现浮动"></a>实现浮动</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">float</span>: left;&#125;</span><br><span class="line"><span class="selector-class">.slect</span> &#123;<span class="attribute">float</span>: right;&#125;</span><br></pre></td></tr></table></figure><h4 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span> 清除<span class="selector-tag">h1</span>左边的浮动 <span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">clear</span>: left;&#125;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> 清除两边的浮动 <span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">clear</span>: both;&#125;</span><br></pre></td></tr></table></figure><h3 id="定位（position"><a href="#定位（position" class="headerlink" title="定位（position)"></a>定位（position)</h3><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><h4 id="偏移"><a href="#偏移" class="headerlink" title="偏移"></a>偏移</h4><h4 id="高度宽度"><a href="#高度宽度" class="headerlink" title="高度宽度"></a>高度宽度</h4><h4 id="溢出剪裁"><a href="#溢出剪裁" class="headerlink" title="溢出剪裁"></a>溢出剪裁</h4><h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4><h4 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h4><h4 id="Z轴放置"><a href="#Z轴放置" class="headerlink" title="Z轴放置"></a>Z轴放置</h4><h4 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h4><h4 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h4>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 盒子模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《CSS权威指南》读后记&lt;二&gt;：盒子模型</title>
      <link href="/2015/10/20/t-book_css_002/"/>
      <url>/2015/10/20/t-book_css_002/</url>
      
        <content type="html"><![CDATA[<p>之前一直在使用 height 和 width，但是经常会遇到问题。在看了 <strong>盒子模型</strong>这一章后，很多东西迎刃而解了。现在详细的记录这些知识点。</p><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p>由四个部分组成，如下图<br><a href="/images/ds7.png">img</a></p><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><p>高度与宽度决定内容大小<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">height</span>: <span class="number">100px</span>; <span class="attribute">width</span>: <span class="number">100px</span>;&#125;</span><br></pre></td></tr></table></figure></p><h4 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h4><p>边框外部<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">margin</span>: <span class="number">0.25in</span>; <span class="attribute">background-color</span>: red;&#125;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> 可以接受<span class="selector-tag">px</span>,<span class="selector-tag">em</span>,<span class="selector-tag">cm</span>单位 <span class="selector-tag">--</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!<span class="selector-tag">--</span> 单独设置 <span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">15px</span> <span class="number">10px</span>;&#125;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> <span class="selector-tag">top</span> <span class="selector-tag">right</span> <span class="selector-tag">bottom</span> <span class="selector-tag">left</span> 可以混合单位<span class="selector-tag">--</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!<span class="selector-tag">--</span> 缺值规则 <span class="selector-tag">--</span>&gt;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> 缺左外，使用右外，缺下使用上，缺右使用上 <span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;&#125;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> 10<span class="selector-tag">px</span> 0 10<span class="selector-tag">px</span> 0 <span class="selector-tag">--</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!<span class="selector-tag">--</span> 单边外设置 <span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">margin-lelf</span>: <span class="number">10px</span>;&#125;</span><br><span class="line"></span><br><span class="line">&lt;!<span class="selector-tag">--</span> 负外边距 <span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">margin-left</span>: -<span class="number">10px</span>;&#125;</span><br></pre></td></tr></table></figure></p><h4 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h4><p>外边距与内边距之间<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span> 默认为<span class="selector-tag">none</span> <span class="selector-tag">--</span>&gt;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> <span class="selector-tag">border-style</span>的值很多 <span class="selector-tag">--</span>&gt;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> <span class="selector-tag">none</span>,<span class="selector-tag">hidden</span>,<span class="selector-tag">dotted</span>,<span class="selector-tag">dashed</span>,<span class="selector-tag">solid</span>,<span class="selector-tag">double</span>,<span class="selector-tag">groove</span>,<span class="selector-tag">ridge</span>,... <span class="selector-tag">--</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!<span class="selector-tag">--</span> 可以定义多样式 <span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.new</span> &#123;<span class="attribute">border-style</span>: solid;&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.new</span> &#123;<span class="attribute">border-top-style</span>: solid;&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.new</span> &#123;<span class="attribute">border-style</span>: solid dashed none;&#125;</span><br><span class="line"></span><br><span class="line">&lt;!<span class="selector-tag">--</span> 边框宽度 <span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.new</span> &#123;<span class="attribute">border-width</span>: <span class="number">1px</span>;&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.new</span> &#123;<span class="attribute">border-top-width</span>: <span class="number">2px</span>;&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.new</span> &#123;<span class="attribute">border-width</span>: <span class="number">2px</span> <span class="number">1px</span> <span class="number">3px</span> <span class="number">2px</span>;&#125;</span><br><span class="line"></span><br><span class="line">&lt;!<span class="selector-tag">--</span> 边框颜色 <span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.new</span> &#123;<span class="attribute">border-color</span>: <span class="number">#666</span>;&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.new</span> &#123;<span class="attribute">border-top-color</span>: <span class="number">#666</span>;&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.new</span> &#123;<span class="attribute">border-color</span>: <span class="number">#666</span> <span class="number">#344</span> <span class="number">#333</span> <span class="number">#455</span>;&#125;</span><br><span class="line"></span><br><span class="line">&lt;!<span class="selector-tag">--</span> 简写属性 <span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.new</span> &#123;<span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#666</span>&#125;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> 顺序不重要 <span class="selector-tag">--</span>&gt;</span><br></pre></td></tr></table></figure></p><h4 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h4><p>边框与内容之间<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span> 同理<span class="selector-tag">margin</span> <span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.new</span> &#123;<span class="attribute">padding</span>: <span class="number">10px</span>;&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.new</span> &#123;<span class="attribute">padding-top</span>: <span class="number">20px</span>;&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.new</span> &#123;<span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="number">40px</span>;&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《CSS权威指南》读后记&lt;一&gt;：选择器</title>
      <link href="/2015/10/15/t-book_css_001/"/>
      <url>/2015/10/15/t-book_css_001/</url>
      
        <content type="html"><![CDATA[<p>最初接触网页制作是用的微软的 frontPage。只是为了给朋友搭建一个许嵩的主题网站，完成一个小小的课外作业，意外的拿到了不错的分数。虽然并没有用代码取写网页，但是制作的过程也是很有趣的。现在出于某种兴趣对网页制作进行了学习，才发现原来以前玩儿式的制作，现在写代码也可以弄出来，而且更加好看，标准。学习完 HTML 后，开始学习 CSS，现在读了这本 <strong>《 CSS 权威指南》第三版</strong>，感觉收益匪浅，所以记下里面重要的内容以便以后学习之用。</p><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><p>首先写一个大致的 html 页面做模板<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"selector.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>suo的个人网页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>锁的生活日志<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天是个好日子<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>呵呵<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span>&gt;</span>嘻嘻<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h6</span>&gt;</span>吼吼<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>最初接触网页制作是用的微软的 pagefont。只是为了给朋友搭建一个许嵩的主题网站，完成一个小小的课外作业，意外的拿到了不错的分数。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>虽然并没有用代码取写网页，但是制作的过程也是很有趣的。现在出于某种兴趣对网页制作进行了学习，才发现原来以前玩儿式的制作，现在写代码也可以弄出来，而且更加好看，标准。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>学习完 HTML 后，开始学习 CSS，现在读了这本《CSS权威指南》第三版，感觉收益匪浅，所以记下里面重要的内容以便以后学习之用。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"cselect"</span>&gt;</span>类选择器<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"cselect1 cselect2"</span>&gt;</span>多类选择器<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>1.what<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>2.how<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>3.why<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"www.baidu.com"</span> <span class="attr">class</span>=<span class="string">"visited"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>使用 css 选择器</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;<span class="attribute">font</span>: <span class="number">20px</span>;&#125;</span><br></pre></td></tr></table></figure></p><h4 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;<span class="attribute">color</span>: black;&#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">color</span>: green;&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure><p><strong>1.选择器分组</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h5</span> &#123;<span class="attribute">backgroud</span>: green;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>2.通配选择器</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* &#123;<span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>3.声明分组</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h5</span> &#123;<span class="attribute">color</span>: red; <span class="attribute">background</span>: green;&#125;</span><br><span class="line"><span class="selector-tag">h2</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span> &#123;<span class="attribute">color</span>: red&#125;;</span><br></pre></td></tr></table></figure></p><h4 id="类选择器与-ID-选择器"><a href="#类选择器与-ID-选择器" class="headerlink" title="类选择器与 ID 选择器"></a>类选择器与 ID 选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span> 特定 <span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.cselect</span> &#123;<span class="attribute">font-weight</span>: bold;&#125; </span><br><span class="line">&lt;!<span class="selector-tag">--</span> 通用 <span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-class">.cselect</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure><p><strong>1.多类选择器</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span> 顺序不限 <span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-class">.cselect1</span><span class="selector-class">.cselect2</span> &#123;<span class="attribute">color</span>: grey;&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.cselect1</span><span class="selector-class">.cselect2</span> &#123;<span class="attribute">color</span>: black;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>2.id 选择器</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-id">#idselect</span> &#123;<span class="attribute">color</span>: yellow;&#125;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> 忽略 <span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-id">#idselect</span> &#123;<span class="attribute">color</span>: yellow;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>3.类选择器与 ID 选择器的选择</strong></p><ul><li>ID 选择器只能用一次，类选择器可以多次</li><li>ID 选择器不能结合使用，不能有空格来定义不同属性</li><li>它们都区分大小写</li></ul><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span> 现在<span class="selector-tag">p</span>中有<span class="selector-tag">class</span>的全变红色 <span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[class]</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure><p><strong>1.多属性选择</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[class]</span><span class="selector-attr">[id]</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>2.值属性选择</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[class="cselect"]</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href="www.baidu.com"]</span> &#123;<span class="attribute">color</span>:black;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>3.部分值属性选择</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[class~="cselect"]</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>4.子串匹配属性选择器</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span> 开头包含串 <span class="selector-tag">--</span>&gt;</span><br><span class="line">p[class^="cs"] &#123;color； red;&#125;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> 结尾包含 <span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[class$="select"]</span> &#123;<span class="attribute">color</span>:red;&#125;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> 包含即可 <span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[class*="ele"]</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>5.特定属性选择器</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*<span class="selector-attr">[lang|="en"]</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure></p><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> <span class="selector-tag">img</span> &#123;<span class="attribute">height</span>: <span class="number">100px</span>;&#125;</span><br><span class="line"><span class="selector-class">.cselect</span> <span class="selector-tag">a</span>, <span class="selector-id">#idselect</span> <span class="selector-tag">a</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure><p>如上所示，默认的后代选择器，可以忽略层次，选择 ul 下面所有的 li，并不只是直属的<br><strong>1.选择子元素</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure></p><p>选择的是 ul 下直属的 li<br><strong>2.选择兄弟元素</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> + <span class="selector-class">.cselect</span> &#123;<span class="attribute">color</span>:red;&#125;</span><br></pre></td></tr></table></figure></p><p>选择的是相同父亲下，紧邻的下一个元素</p><h4 id="伪类和伪元素选择器"><a href="#伪类和伪元素选择器" class="headerlink" title="伪类和伪元素选择器"></a>伪类和伪元素选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span> <span class="selector-tag">a</span><span class="selector-class">.visited</span> &#123;<span class="attribute">color</span>: red;&#125; <span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure><p><strong>1.链接伪类选择器</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;<span class="attribute">color</span>: blue;&#125;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> 已访问 <span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>2.动态伪类选择器</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span> 输入聚集时 <span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;<span class="attribute">background</span>: silver; <span class="attribute">font-weight</span>: bold;&#125;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> 鼠标停留时 <span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> 用户激活时 <span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;<span class="attribute">color</span>: green;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>3.伪元素选择器</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span> 只能用于块元素 <span class="selector-tag">--</span>&gt;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> 首字母 <span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:first-letter</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> 首行 <span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:first-line</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> 之前 <span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:before</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> 之后 <span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:after</span> &#123;<span class="attribute">color</span>:red;&#125;</span><br></pre></td></tr></table></figure></p><h4 id="权重计算"><a href="#权重计算" class="headerlink" title="权重计算"></a>权重计算</h4><p>css权重越大优先级越高<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span> 一等：行内样式：1000 <span class="selector-tag">--</span>&gt;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> 二等：<span class="selector-tag">id</span>选择器：100 <span class="selector-tag">--</span>&gt;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> 三等：类选择器，伪类，属性：10 <span class="selector-tag">--</span>&gt;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> 四等：类型选择器，伪元素选择器：1 <span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-class">.cselect</span> <span class="selector-id">#idselect</span> <span class="selector-tag">div</span> <span class="selector-tag">p</span><span class="selector-attr">[name="suo"]</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br><span class="line">&lt;!-- 10 + 100 + 1 + 11 = 122 --&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数据结构》笔记：归纳</title>
      <link href="/2015/10/10/t-course_ds_010/"/>
      <url>/2015/10/10/t-course_ds_010/</url>
      
        <content type="html"><![CDATA[<h3 id="数据结构-Data-Structure"><a href="#数据结构-Data-Structure" class="headerlink" title="数据结构(Data Structure)"></a>数据结构(Data Structure)</h3><ul><li>数组(Array)：物理上紧邻的定长线性序列（元素为数）</li><li>向量(Vector)：物理上紧邻的一组不定长线性序列（元素不限）</li><li>列表(List)：逻辑上紧邻的一组线性序列</li><li>栈(Stack)：受限的列表（一端出入）</li><li>队列(Queue)：受限的列表（一端出一端入）</li><li>树(Tree)：成树结构的半线性序列</li><li>图(Graph)：成图结构的非线性序列</li></ul><h3 id="STL序列容器-Sequence-Contains"><a href="#STL序列容器-Sequence-Contains" class="headerlink" title="STL序列容器(Sequence Contains)"></a>STL序列容器(Sequence Contains)</h3><ul><li>定长数组(Array)</li><li>向量(Vector)</li><li>列表(双向链表)(List)</li><li><ul><li>单链表(sList)：非标准STL</li></ul></li><li>双端队列(Deque)</li><li><ul><li>栈(Stack)</li></ul></li><li><ul><li>队列(Queue)</li></ul></li></ul><h3 id="STL关联容器-Associative-Contains"><a href="#STL关联容器-Associative-Contains" class="headerlink" title="STL关联容器(Associative Contains)"></a>STL关联容器(Associative Contains)</h3><ul><li>红黑树(Red-Black Tree)</li><li><ul><li>集合(Set)</li></ul></li><li><ul><li>映射(Map)</li></ul></li><li><ul><li>扩展集合(mutiMap)</li></ul></li><li><ul><li>扩展映射(mutiSet)</li></ul></li><li>哈希表(HashTable)</li><li><ul><li>哈希集合(HashSet)</li></ul></li><li><ul><li>哈希映射(HashMap)</li></ul></li><li><ul><li>哈希集合扩展(mutiHashSet)</li></ul></li><li><ul><li>哈希映射扩展(mutiHashMap)</li></ul></li></ul><h3 id="排序查找搜索"><a href="#排序查找搜索" class="headerlink" title="排序查找搜索"></a>排序查找搜索</h3><ul><li>排序(Sort)</li><li><ul><li>起泡排序</li></ul></li><li><ul><li>选择排序</li></ul></li><li><ul><li>归并排序</li></ul></li><li><ul><li>插入排序</li></ul></li><li><ul><li>堆排序</li></ul></li><li><ul><li>桶排序</li></ul></li><li><ul><li>基数排序</li></ul></li><li><ul><li>快速排序</li></ul></li><li><ul><li>希尔排序</li></ul></li><li>查找(Find)</li><li><ul><li>扫描查找</li></ul></li><li><ul><li>二分查找</li></ul></li><li><ul><li>fib查找</li></ul></li><li>搜索(Search)</li><li><ul><li>广度搜索</li></ul></li><li><ul><li>深度搜索</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数据结构》笔记：排序</title>
      <link href="/2015/09/18/t-course_ds_009/"/>
      <url>/2015/09/18/t-course_ds_009/</url>
      
        <content type="html"><![CDATA[<h3 id="快速排序-QuickSort"><a href="#快速排序-QuickSort" class="headerlink" title="快速排序(QuickSort)"></a>快速排序(QuickSort)</h3><ul><li>分而治之</li><li><ul><li>将序列分为2个子序列:S = Sl = Sr //O(n)</li></ul></li><li><ul><li>规模独立：max { |Sl| , |Sr| } &lt; n</li></ul></li><li><ul><li>彼此独立：max( Sl ) &lt;= min( Sr )</li></ul></li><li><ul><li>在子序列分别递归底排序之后，原序列自然有序sorted(S) = sorted(Sl) + sorted(Sr)</li></ul></li><li><ul><li>平凡解：只剩单个元素时，本身就是解</li></ul></li><li><ul><li>归并排序在于合，quicksort在于分</li></ul></li><li>轴点(pivot)</li><li><ul><li>左/右侧的元素，均不比它更大/小</li></ul></li><li><ul><li>以轴点为届，原序列的划分自然实现：[lo, hi) = [lo,mi) + [mi] + (mi,hi)</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">void</span> Verctor&lt;T&gt;::quickSort( Rank lo, Rank hi) &#123;</span><br><span class="line">    <span class="keyword">if</span>( hi - lo &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//平凡解</span></span><br><span class="line">    Rank mi = partition( lo, hi<span class="number">-1</span> ); <span class="comment">//先构造轴点</span></span><br><span class="line">    quickSort(lo, mi); <span class="comment">//前缀排序</span></span><br><span class="line">    quickSort(mi+<span class="number">1</span>, hi); <span class="comment">//后缀排序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><ul><li>坏消息：在原始序列中，轴点未必存在</li></ul></li><li><ul><li>必要条件：轴点必然已然就位</li></ul></li><li><ul><li>特别的：在有序序列中，所有元素逐个转换成轴00点2</li></ul></li><li><ul><li>不变性与单调性：L &lt;= pivot &lt;= G; U = [lo, hi],[lo]和[hi]交替空闲</li></ul></li><li>实例：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">轴点为6</span><br><span class="line">6 3 8 2 5 9 4 5 1 7</span><br><span class="line">x 3 8 2 5 9 4 5 1 7</span><br><span class="line">1 3 8 2 5 9 4 5 x 7</span><br><span class="line">1 3 x 2 5 9 4 5 8 7</span><br><span class="line">1 3 5 2 5 9 4 x 8 7</span><br><span class="line">1 3 5 2 5 x 4 9 8 7</span><br><span class="line">1 3 5 2 5 4 x 9 8 7</span><br><span class="line">1 3 5 2 5 4 6 9 8 7</span><br></pre></td></tr></table></figure><ul><li>性能</li><li><ul><li>不稳定</li></ul></li><li><ul><li>空间：只需要O(1)</li></ul></li><li><ul><li>时间：不能保证划分的均衡性，最好O(nlogn)，最坏O(n^2)</li></ul></li><li><ul><li>采取随机选取，三者取中，只能降低最坏的情况，而无法根本的杜绝</li></ul></li><li><ul><li>总结：平均性能O(nlogn),根据均匀独立分布为例，准确的1.39logn</li></ul></li></ul><h3 id="快排变种"><a href="#快排变种" class="headerlink" title="快排变种"></a>快排变种</h3><ul><li>不变性：四个部分S = [lo] + L(lo, mi] + G(mi, k) + U[k, hi], L &lt; pivot &lt;= G</li><li>单调性：K不小于轴 ? 直接拓展G ： G滚动后移，L拓展 pivot &lt;= S[k] ? k++ : swap(S[++mi], S[k++])</li><li>代码</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; Rank Vector&lt;T&gt;::partition( Rank lo, Rank hi) &#123;</span><br><span class="line">    swap( _elem[ lo ], _elem[ lo + rand() % ( hi - lo + <span class="number">1</span> ) ] );<span class="comment">//随机交换</span></span><br><span class="line">    T pivot = _elem[ lo ];</span><br><span class="line">    <span class="keyword">int</span> mi = lo;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> k = lo + <span class="number">1</span>; k &lt;= hi; k++ ) <span class="comment">//自左向右考查每个[k]</span></span><br><span class="line">        <span class="keyword">if</span>( _elem[ k ] &lt; pivot ) <span class="comment">//若k小于轴点，则将其与[mi]交换，L向右扩展</span></span><br><span class="line">            swap( _elem[ ++mi ], _elem[ k ]);</span><br><span class="line">    swap( _elem[ lo ], _elem[ mi ] ); <span class="comment">//候选抽点归位</span></span><br><span class="line">    <span class="keyword">return</span> mi;<span class="comment">//返回轴点的秩</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">6  3  8 1 5 9 8 4 5 7 2</span><br><span class="line">6 3  8  1 5 9 8 4 5 7 2</span><br><span class="line">6 3 1 5  8  9 8 4 5 7 2</span><br><span class="line">6 3 1 5  8 9  8 4 5 7 2</span><br><span class="line">6 3 1 5  8 9 8  4 5 7 2</span><br><span class="line">6 3 1 5 4  9 8 8  5 7 2</span><br><span class="line">6 3 1 5 4 5  9 8 8  7 2</span><br><span class="line">6 3 1 5 4 5  9 8 8 7  2</span><br><span class="line">6 3 1 5 4 5 2   8 9 7 8</span><br><span class="line">2 3  1 5 4 5 6  8 9 7 8</span><br><span class="line">//时间O(n)</span><br><span class="line">//空间O(1)</span><br><span class="line">//不稳定</span><br></pre></td></tr></table></figure></li></ul><h3 id="选取"><a href="#选取" class="headerlink" title="选取"></a>选取</h3><ul><li>k-selection：在任意大小的元素中，如何由小到大，找到次序为k者，亦即</li><li>median：长度为n中选择位于中间的那个数</li><li>majoerity：无序向量，若有一半以上元素同为m，称之为众数</li><li>平凡算法 排序+扫描，必要性，众数存在必为中位数</li><li>事实上，只要能够找到中位数，就能判断是否为众数</li><li>众数若存在，则必为频繁数</li><li>策略：减而治之</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数据结构》笔记：词典</title>
      <link href="/2015/09/15/t-course_ds_008/"/>
      <url>/2015/09/15/t-course_ds_008/</url>
      
        <content type="html"><![CDATA[<h3 id="散列-Hash"><a href="#散列-Hash" class="headerlink" title="散列(Hash)"></a>散列(Hash)</h3><blockquote><p>新的访问方式   </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">寻秩访问：向量</span><br><span class="line">寻位置：列表</span><br><span class="line">寻关键码：BST</span><br></pre></td></tr></table></figure><ul><li>访问方式：寻值访问</li><li>电话</li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li>桶Bucket：直接存放或者间接指向一个词条</li><li>桶数组Bucket array/散列表 Hash Table 容量为M</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">N &lt; M &lt;&lt; R 空间 = O(N + M) = O(n)</span><br></pre></td></tr></table></figure><ul><li>定址/杂凑/散列：根据Key直接确定散列表入口</li><li>散列函数：hash() : key -&gt; &amp; entry</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hash(key) = key % M</span><br><span class="line"></span><br><span class="line">25K / 90K &gt; 25% 节约了较大空间</span><br><span class="line">装填因子 N / M </span><br><span class="line"></span><br><span class="line">6278 5001                54304          39514</span><br><span class="line">6277 0211    % 90001     39514          51304</span><br><span class="line">5154 1876                51304          54304</span><br></pre></td></tr></table></figure><ul><li>冲突：不同关键码，被映射到同一实体上</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5153 1976    % 90001     51304</span><br><span class="line">6278 2001</span><br><span class="line">理论上无法彻底避免，只能根据策略减少冲突</span><br><span class="line">hash 不可能是单射</span><br></pre></td></tr></table></figure><ul><li>散列策略：近似的单射，往往可行</li><li><ul><li>精心设计散列表和散列函数，尽可能降低冲突的概率</li></ul></li><li><ul><li>制定可行的预案，以便排解</li></ul></li></ul><h3 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h3><ul><li>评价标准：什么样hash()更好</li><li><ul><li>确定determinism：同一关键码总是被映射至同一地址</li></ul></li><li><ul><li>快速efficency：expected-O(1)</li></ul></li><li><ul><li>满射surjection:尽可能充分的覆盖整个散列空间</li></ul></li><li><ul><li>均匀uniformity：关键码映射到散列表各位置的概率尽量接近可有效避免聚集clustering现象</li></ul></li><li>除余法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash(key) = key % M</span><br></pre></td></tr></table></figure><ul><li><ul><li>表长为素数时，分布更均匀，更全面</li></ul></li><li><ul><li>gcd(S, M) = G ，M取素数</li></ul></li><li><ul><li>缺陷：不动点hash(0) = 0，零阶均匀，相邻关键码散列地址必相邻</li></ul></li><li>MAD法：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">M为素数，a &gt; 0, b &gt; 0, a % M !=0</span><br><span class="line">hash( key ) = ( a * key + b ) % M</span><br></pre></td></tr></table></figure><ul><li>数字分析法</li><li>平方取中法：平方后取中间数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash( key ) = key^2 取中间位数</span><br></pre></td></tr></table></figure><ul><li>折叠法：将key分隔为等宽的若干端，取其总和作为地址</li><li>位异或法。。。。</li><li>总结：越是随机越是没有规律越好</li><li><p>伪随机数法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">随机数发生器</span><br><span class="line">循环 rand( x + 1 ) = a * rand( x ) % M</span><br><span class="line">x = time()</span><br><span class="line">伪随机数法</span><br><span class="line">hash( key ) = rand( key ) = [ rand(0) * a^key ] % M</span><br><span class="line">种子 rand(0)</span><br></pre></td></tr></table></figure></li><li><p>多项式法：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash( s = X0X1X2...Xn-1) = X0a^n-1 + X1a^n-2+... Xn-1</span><br></pre></td></tr></table></figure><h3 id="排解冲突"><a href="#排解冲突" class="headerlink" title="排解冲突"></a>排解冲突</h3>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数据结构》笔记：二叉搜索树</title>
      <link href="/2015/09/10/t-course_ds_007/"/>
      <url>/2015/09/10/t-course_ds_007/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>循关键码访问call by key： 关键码之间可以比较，比对</li><li>词条entity： key - value</li><li>比较器：重载操纵符实现</li><li>判等器：重载操纵符实现</li><li>Binary Search Tree: 节点 ~ 词条 ~ 关键码， 处处满足顺序性</li><li>顺序性：任意节点均不小于左后代，不大于右后代</li><li>单调性：中序遍历，必然单调非降，充要性</li><li>宏微观：微观满足顺序性，宏观满足单调性</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">BST</span>:</span> <span class="keyword">public</span> <span class="keyword">public</span> BinTree&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span>: <span class="comment">//二叉树派生</span></span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="title">BinNodePosi</span><span class="params">(T)</span> &amp; <span class="title">search</span><span class="params">( <span class="keyword">const</span> T &amp;)</span> </span>; <span class="comment">//查找</span></span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="title">BinNodePosi</span><span class="params">(T)</span>  <span class="title">insert</span><span class="params">( <span class="keyword">const</span> T &amp;)</span> </span>;  <span class="comment">//插入</span></span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span>  <span class="title">remove</span><span class="params">( <span class="keyword">const</span> T &amp;)</span> </span>;            <span class="comment">//删除</span></span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">        BinNodePosi(T) _hot; <span class="comment">//命中节点的父亲</span></span><br><span class="line">        BinNodePosi(T) connect34(BinNodePosi(T), BinNodePosi(T),  <span class="comment">//3+4重构</span></span><br><span class="line">            BinNodePosi(T), BinNodePosi(T), BinNodePosi(T), </span><br><span class="line">            BinNodePosi(T), BinNodePosi(T));</span><br><span class="line">        BinNodePosi(T) rotateAt( BinNodePosi(T) ); <span class="comment">//旋转</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><ul><li>策略：减而治之，仿照二分查找策略</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; BinNodePosi(T) &amp; BST&lt;T&gt;::search(<span class="keyword">const</span> T &amp; e) &#123;</span><br><span class="line">    <span class="keyword">return</span> searchIn( _root, e, _hot = <span class="literal">NULL</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的尾递归，当前树根目标关键码，记忆热点</span></span><br><span class="line">static BinNodePosi(T) &amp;  searchIn(BinNodePosi(T) &amp; v,  const T &amp; e, BinNodePosi(T) &amp; hot ) &#123;</span><br><span class="line">    <span class="keyword">if</span>( !v || (e == v-&gt;data) ) <span class="comment">//确定失败，成功，或者</span></span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    hot = v; <span class="comment">//记下当前节点，然后。。</span></span><br><span class="line">    <span class="keyword">return</span> searchIn( ( (e &lt; v-&gt;data ) ? v-&gt;lchild : v-&gt;rchild ) , e, hot);</span><br><span class="line">&#125; <span class="comment">//运行时间正比于返回节点的深度</span></span><br></pre></td></tr></table></figure><ul><li>接口语义：返回值的引用值</li><li><ul><li>成功时，指向一个关键码为e且真实存在的节点, 失败时，指向试图转向的空节点NULL</li></ul></li><li><ul><li>增加哨兵，失败时，将此空节点转换为一个关键码为e且真实存在的节点</li></ul></li></ul><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><ul><li>策略：在查找的基础上替换失败的空节点</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BST插入</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; BinNodePosi(T) BST&lt;T&gt;:: insert(<span class="keyword">const</span> T &amp; e) &#123;</span><br><span class="line">    BinNodePosi(T) &amp; x = search( e ); <span class="comment">//查找目标</span></span><br><span class="line">    <span class="keyword">if</span>( !x ) &#123; <span class="comment">//禁止雷同，失败时才插入操作</span></span><br><span class="line">        x = <span class="keyword">new</span> BinNode&lt;T&gt;(e, _hot); <span class="comment">//创建新节点以hot为父亲</span></span><br><span class="line">        _size++;</span><br><span class="line">        updataHeightAbove(x); <span class="comment">//更新全树规模，并更新历代祖先规模</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x; <span class="comment">//无论e是否存在原树中，总有x-&gt;data == e</span></span><br><span class="line">&#125; <span class="comment">//总体复杂度O(h)</span></span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul><li><p>策略：先确认目标再删除</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">bool</span> BST&lt;T&gt;:: remove( <span class="keyword">const</span> T &amp; e) &#123;</span><br><span class="line">    BinNodePosi(T) &amp; x = search( e ); <span class="comment">//定位目标</span></span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//确认目标存在</span></span><br><span class="line">    removeAt(x , _hot); <span class="comment">//分两大类实施 删除</span></span><br><span class="line">    _size--; <span class="comment">//更新规模</span></span><br><span class="line">    updataHeightAbove( _hot );</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="comment">//复杂度O(h)</span></span><br></pre></td></tr></table></figure></li><li><p>情况一</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">template &lt;typename T&gt; static BinNodePosi(T) removeAt(BinNodePosi(T) &amp; x, BinNodePosi(T) &amp; hot)&#123;</span><br><span class="line">    BinNodePosi(T) w = x; <span class="comment">//实际被摘除的节点</span></span><br><span class="line">    BinNodePosi(T) succ = <span class="literal">NULL</span>; <span class="comment">//实际被删除的节点的接替者</span></span><br><span class="line">    <span class="keyword">if</span>( ! HasLchild(*x) ) succ = x = x-&gt;rchild; <span class="comment">//左子树为空</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( ! HasRchild(*x) ) succ = x = x-&gt;lchild; <span class="comment">//右子树为空</span></span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="comment">//左右并存的状况</span></span><br><span class="line">        hot = w-&gt;parent;</span><br><span class="line">        <span class="keyword">if</span>( succ ) succ-&gt;parent = hot;</span><br><span class="line">        release( w-&gt;data ); <span class="comment">//释放被摘除的节点</span></span><br><span class="line">        release( w );</span><br><span class="line">        <span class="keyword">return</span> succ; 返回接替者</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>情况二</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">template &lt;typename T&gt; static BinNodePosi(T) removeAt( BinNodePosi(T) &amp;x, BinNodePosi(T) &amp; hot ) &#123;</span><br><span class="line">    BinNodePosi(T) w = x; <span class="comment">//实际被摘除的节点</span></span><br><span class="line">    BinNodePosi(T) succ = <span class="literal">NULL</span>; <span class="comment">//实际被删除的节点的接替者</span></span><br><span class="line">    <span class="keyword">if</span>( ! HasLchild(*x) ) succ = x = x-&gt;rchild; <span class="comment">//左子树为空</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( ! HasRchild(*x) ) succ = x = x-&gt;lchild; <span class="comment">//右子树为空</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        w = w-&gt;succ;</span><br><span class="line">        swap( x-&gt;data, w-&gt;data);</span><br><span class="line">        BinNodePosi(T) u = w-&gt;parent;</span><br><span class="line">        ( u == x ? u-&gt;rChild : u-&gt;lChild ) = succ = w-&gt;rChild;</span><br><span class="line">    &#125;<span class="comment">//O(h)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="平衡与等价"><a href="#平衡与等价" class="headerlink" title="平衡与等价"></a>平衡与等价</h3><blockquote><p>BST的查找，插入，删除复杂度都为O(h)，但是高度不能很好控制，效率并不理想</p></blockquote><ul><li>生成BST：随机生成的高度为O(logn)，有重复的组合，随机组合的BST生成的O(n^1/2)</li><li>理想平衡：节点数固定，兄弟子树高度越接近(平衡)，全树倾向更低</li><li>由n个节点组成的二叉树，高度不低于logn时—–恰为logn为理想平衡树，概率低，适当降低标准</li><li>退一步海阔天空：高度渐进不超过O(logn)</li><li><p>适度平衡的二叉树，称平衡二叉树BBST</p></li><li><p>非平衡二叉树等价平衡二叉树</p></li><li>中序遍历的歧义性：拓扑结构不同，中序遍历相同</li><li>等价BST：3个规律，上下可变，左右不能乱，旋转变换</li><li>zig变换（旋转调整）</li><li>准则：局部性（常数节点数），操作数至多O(logn)</li></ul><h3 id="AVL树-适度平衡搜索二叉树"><a href="#AVL树-适度平衡搜索二叉树" class="headerlink" title="AVL树(适度平衡搜索二叉树)"></a>AVL树(适度平衡搜索二叉树)</h3><ul><li>平衡因子：balFac(V) = height( lc(v) ) - height( rc(v) )</li><li>G.Adelson-Velsky &amp; E.Landis (1962) 所有 | balFac | &lt;= 1</li><li>AVL = 适度平衡：高度为h的AVL树，至少包含S(h) = fib(h+3) -1个节点</li><li><p>接口：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Balance(x) ( stature( (x).lChild ) == stature( (x).rChild ) )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BalFac(x) ( stature( (x).lChild ) - stature( (x).rChild ) )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AvlBalanced(x) ( ( -2 &lt; BalFac(x) ) &amp;&amp; ( BalFac(x) &lt; 2 ) )</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">AVL</span>:</span> <span class="keyword">public</span> BST&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        BinNodePosi(T) insert( <span class="keyword">const</span> T &amp;); <span class="comment">//插入重写</span></span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">remove</span><span class="params">( <span class="keyword">const</span> T &amp;)</span></span>; <span class="comment">//删除重写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>插入节点会导致祖先发生失衡，删除后只有一个节点失衡，相反插入操作更简单</p></li><li>插入：单旋 ，g经过单旋后复衡，子树高度复原，更高祖先也必平衡，全树复衡</li><li>时间：旋转O(1) 一致向右zagzag，一致向左zigzig，双旋，zigzag和zagzig情况</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; BinNodePosi(T) AVL&lt;T&gt;::insert( <span class="keyword">const</span> T &amp; e) &#123;</span><br><span class="line">    BinNodePosi(T) &amp; x = search( e ); </span><br><span class="line">    <span class="keyword">if</span>( x ) <span class="keyword">return</span> x;</span><br><span class="line">    x = <span class="keyword">new</span> BinNode&lt;T&gt;( e, _hot );</span><br><span class="line">    _size++;</span><br><span class="line">    BinNodePosi(T) xx = x;</span><br><span class="line">    <span class="keyword">for</span> ( BinNodePosi(T) g = x-&gt;parenr; g; g = g-&gt;parent )</span><br><span class="line">        <span class="keyword">if</span> ( !AvlBalanced( *g ) ) &#123;</span><br><span class="line">            FromParentIo( *g ) = rotateAt( tallerChild( tallerChild(g) ) );</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        updateHeight( g );</span><br><span class="line">    <span class="keyword">return</span> xx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数据结构》笔记：图</title>
      <link href="/2015/08/30/t-course_ds_006/"/>
      <url>/2015/08/30/t-course_ds_006/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>邻接：邻接关系，顶点与顶点的关系</li><li>关联：关联关系，顶点与边的关系</li><li>无向图：次序无所谓</li><li>有向图（digraph）：有次序，起点尾（tail），终点头 （head）</li><li>路径(path)：一系列的顶点按照依次邻接的关系构成序列</li><li>简单路径：不含重复节点的路径</li><li>环路(cicle)：起点终点重合的路径</li><li>无环路(DAG)：不包含任何环路的图</li><li>欧哈路：覆盖所有的点</li><li>哈密尔顿：覆盖所有点，每个顶点有且仅经过一次</li></ul><h3 id="邻接矩阵（adjacency-matrix）"><a href="#邻接矩阵（adjacency-matrix）" class="headerlink" title="邻接矩阵（adjacency matrix）"></a>邻接矩阵（adjacency matrix）</h3><ul><li>接口</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tv, <span class="keyword">typename</span> Te&gt; <span class="class"><span class="keyword">class</span> <span class="title">Graph</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123; <span class="comment">//顶点</span></span><br><span class="line">                status(i) = UNDISCOVERED;</span><br><span class="line">                dTime(i) = fTime(i) = <span class="number">-1</span>;</span><br><span class="line">                parent(i) = <span class="number">-1</span>;</span><br><span class="line">                priority(i) = INT_MAX;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) <span class="comment">//边</span></span><br><span class="line">                    <span class="keyword">if</span> (exists(i, j))</span><br><span class="line">                        status(i, j) = UNDETERMINED;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">public</span>: </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>顶点的实现（Vertex）：邻接矩阵</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123; UNDISCOVERED, DISCOVERED, VISITED&#125; VStatus;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Tv&gt; <span class="class"><span class="keyword">struct</span> <span class="title">Vertex</span> &#123;</span></span><br><span class="line">    Tc data; <span class="comment">//数据</span></span><br><span class="line">    <span class="keyword">int</span> inDegree, outDegree; <span class="comment">//入度出度</span></span><br><span class="line">    VStatus status; <span class="comment">//状态</span></span><br><span class="line">    <span class="keyword">int</span> dTime, fTime; <span class="comment">//时间标签</span></span><br><span class="line">    <span class="keyword">int</span> parent;  <span class="comment">//父节点</span></span><br><span class="line">    <span class="keyword">int</span> priority;  <span class="comment">//优先级</span></span><br><span class="line">    Vertex( Tv <span class="keyword">const</span> &amp; d) :  <span class="comment">//构造初始化新顶点</span></span><br><span class="line">    data(d), inDegree(<span class="number">0</span>), outDegree(<span class="number">0</span>), </span><br><span class="line">    status(UNDISCOVERED), dTime(<span class="number">-1</span>),</span><br><span class="line">     fTime(<span class="number">-1</span>), priority(INT_MAX) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>边的实现（Edge）：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123; UNDETERMINED, TREE, CROSS, FORWORD, BACKWAED &#125; EStatus;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Te&gt; <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    Te data;  <span class="comment">//数据</span></span><br><span class="line">    <span class="keyword">int</span> weight;  <span class="comment">//权重</span></span><br><span class="line">    EStatus status;  <span class="comment">//类型</span></span><br><span class="line">    Edge( Te <span class="keyword">const</span> &amp; d, <span class="keyword">int</span> w ):data(d), weight(w), status(UNDETERMINED) &#123;&#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>图的实现(GraphMatrix)：利用向量和邻接矩阵实现，适用稠密图，效率高</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Te, <span class="keyword">typename</span> Tv&gt; <span class="class"><span class="keyword">class</span> <span class="title">GraphMatrix</span> :</span> <span class="keyword">public</span> Graph&lt;Tv, Te&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        Vector&lt; Vertex&lt;Tv&gt; &gt; V;   <span class="comment">//顶点集</span></span><br><span class="line">        Vector&lt; Vector&lt; Edge&lt;Te&gt;* &gt; &gt; E;    <span class="comment">//边集</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        GraphMatrix() &#123; n = e = <span class="number">0</span>;&#125;</span><br><span class="line">        ~GraphMatrix() &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k)</span><br><span class="line">                    <span class="keyword">delete</span> E[j][k];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>顶点操作</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//顶点操作  </span></span><br><span class="line"><span class="function">Tv &amp; <span class="title">Vertex</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; <span class="keyword">return</span> V[i].data &#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//枚举邻接顶点，逆序查找</span></span><br><span class="line"><span class="keyword">int</span> NextNbr(<span class="keyword">int</span> i, <span class="keyword">int</span> j) &#123;</span><br><span class="line">    <span class="keyword">while</span> ( (<span class="number">-1</span> &lt; j) &amp;&amp; !exists(i, --j) )</span><br><span class="line">        ;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">firstNbr</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> NextNbr(i, n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//顶点插入</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Tv <span class="keyword">const</span> &amp; vertex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        E[j].insert(<span class="literal">NULL</span>);</span><br><span class="line">    n++;</span><br><span class="line">    E.insert( Vector&lt; Edge&lt;Te&gt;* &gt;( n, n, <span class="literal">NULL</span>) );</span><br><span class="line">    <span class="keyword">return</span> V.insert( Vertex&lt;Tv&gt;(vertex) ); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//顶点删除</span></span><br><span class="line"><span class="function">Tv <span class="title">remove</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">if</span>(exists(i, j))&#123;</span><br><span class="line">            <span class="keyword">delete</span> E[i][j];</span><br><span class="line">            V[j].inDegree--;</span><br><span class="line">        &#125;</span><br><span class="line">    E.remove(i);</span><br><span class="line">    n--;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        <span class="keyword">if</span> ( exists(j ,i) )&#123;</span><br><span class="line">            <span class="keyword">delete</span> E[j].remove(i);</span><br><span class="line">            V[j].outDegree--;</span><br><span class="line">        &#125;</span><br><span class="line">    Tv vBak = vertex(i);</span><br><span class="line">    V.remove(i);</span><br><span class="line">    <span class="keyword">return</span> vBak;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>边操作</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//边操作</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">exists</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span> &lt;= i) &amp;&amp; (i &lt; n) &amp;&amp; (<span class="number">0</span> &lt;= j) &amp;&amp; (j &lt; n) &amp;&amp; E[i][j] != <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Te &amp; <span class="title">edge</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> E[i][j]-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//边插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">( Te <span class="keyword">const</span>&amp; edge, <span class="keyword">int</span> w, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( exists(i, j) )</span><br><span class="line">        <span class="keyword">return</span> ;    <span class="comment">//忽略已有的边</span></span><br><span class="line">    E[i][j] = <span class="keyword">new</span> Edge&lt;Te&gt;(edge, w); <span class="comment">//创建新边</span></span><br><span class="line">    e++;  <span class="comment">//更新信息</span></span><br><span class="line">    V[i].outDegree++;</span><br><span class="line">    V[i].inDegree++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//边删除</span></span><br><span class="line"><span class="function">Te <span class="title">remove</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    Te eBak = edge(i, j);</span><br><span class="line">    <span class="keyword">delete</span> E[i][j];</span><br><span class="line">    E[i][j] = <span class="literal">NULL</span>;</span><br><span class="line">    e--;</span><br><span class="line">    V[i].outDegree--;</span><br><span class="line">    V[j].inDegree--;</span><br><span class="line">    <span class="keyword">return</span> eBak;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="广度优先搜索（BF-Search）"><a href="#广度优先搜索（BF-Search）" class="headerlink" title="广度优先搜索（BF-Search）"></a>广度优先搜索（BF-Search）</h3><blockquote><p>化繁为简：遍历（图-&gt;树）</p></blockquote><ul><li><p>算法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 访问顶点s</span><br><span class="line">2. 访问s所有尚未访问的邻接顶点</span><br><span class="line">3. 依次访问它们尚未访问的邻接顶点</span><br><span class="line">4. 如此反复</span><br><span class="line">实际上：树的层次遍历</span><br></pre></td></tr></table></figure></li><li><p>图示：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">        </span><br><span class="line">        a     </span><br><span class="line">      / | \ </span><br><span class="line">     s  |  e</span><br><span class="line">    / \ |  | \    遍历前</span><br><span class="line">   d    c  |  f      </span><br><span class="line">    \ /    | /</span><br><span class="line">     b-----g</span><br><span class="line">        a</span><br><span class="line">      /   \ </span><br><span class="line">     s     e</span><br><span class="line">    / \    | \    遍历后</span><br><span class="line">   d    c  |  f    </span><br><span class="line">      /    | </span><br><span class="line">     b     g</span><br><span class="line">队列 s-&gt;a-&gt;c-&gt;d-&gt;e-&gt;b-&gt;f-&gt;g</span><br></pre></td></tr></table></figure><ul><li>实现：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//练习</span><br></pre></td></tr></table></figure></li></ul><h3 id="深度优先搜索-DF-Search"><a href="#深度优先搜索-DF-Search" class="headerlink" title="深度优先搜索(DF-Search)"></a>深度优先搜索(DF-Search)</h3><ul><li>算法：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 访问顶点s</span><br><span class="line">2. 尚有未被访问的邻居，任取其一u，递归执行DFS(u),否则返回</span><br></pre></td></tr></table></figure><ul><li>图示:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">        j</span><br><span class="line">        |</span><br><span class="line">    i---g---h</span><br><span class="line">    | /   \ |</span><br><span class="line">    d   e   f</span><br><span class="line">    | / |   |</span><br><span class="line">    a --b---c</span><br><span class="line">    </span><br><span class="line">        j</span><br><span class="line">        |</span><br><span class="line">    i---g---h</span><br><span class="line">    |       |</span><br><span class="line">    d   e   f</span><br><span class="line">        |   |</span><br><span class="line">    a --b---c</span><br><span class="line">队列: a-&gt;b-&gt;c-&gt;f-&gt;h-&gt;g-&gt;j-&gt;i-&gt;d-&gt;e</span><br></pre></td></tr></table></figure><ul><li>实现：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//练习</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数据结构》笔记：二叉树</title>
      <link href="/2015/08/25/t-course_ds_005/"/>
      <url>/2015/08/25/t-course_ds_005/</url>
      
        <content type="html"><![CDATA[<blockquote><p>半线性结构，二维的列表，特殊的图</p></blockquote><h3 id="树-tree"><a href="#树-tree" class="headerlink" title="树(tree)"></a>树(tree)</h3><ul><li>有根树：指定任一节点r 属于 V作为根后，T即称有根树(rooted tree)</li><li>有序树：</li><li><ul><li>子树树根称孩子，同一父亲的子树之间称兄弟</li></ul></li><li><ul><li>关系：边数 = 所有定点度数之和 = 所有顶点-1 = O（n）</li></ul></li><li><ul><li>定义：指定孩子的顺序，称T为有序数</li></ul></li><li>路径环路：</li><li><ul><li>k条边依次相连，构成一条路径(path)</li></ul></li><li><ul><li>长度：边的数目</li></ul></li><li><ul><li>环路：其中的某个顶点短路</li></ul></li><li>连通无环：</li><li><ul><li>连通图：节点之间均有路径（边数多）</li></ul></li><li><ul><li>无环图：不含环路（边数少）</li></ul></li><li>树与图：无环连通图，任何节点与根之间存在唯一路径，每个顶点都有了一个长度path(V)</li><li>深度层次：</li><li><ul><li>路径节点子树可以相互指代</li></ul></li><li><ul><li>深度：depth(v) = | path(v) |</li></ul></li><li><ul><li>祖先后代：路径上的节点均为v的祖先，v是它们的后代</li></ul></li><li><ul><li>真祖先后代：除开自己的</li></ul></li><li><ul><li>半线性：任一深度，祖先唯一，后代未必唯一</li></ul></li><li><ul><li>根：所有节点的公共祖先，深度为0，无祖先</li></ul></li><li><ul><li>叶子：没有后代的节点，出度为0</li></ul></li><li><ul><li>高度：所有叶子深度的最大值称树的高度，空树（一个节点没有）的高度为-1</li></ul></li></ul><h3 id="树的表示"><a href="#树的表示" class="headerlink" title="树的表示"></a>树的表示</h3><ul><li>接口：</li></ul><table><thead><tr><th>节点</th><th>功能</th></tr></thead><tbody><tr><td>root()</td><td>根节点</td></tr><tr><td>parent()</td><td>父节点</td></tr><tr><td>firstChild()</td><td>长子</td></tr><tr><td>nexrSibling()</td><td>兄弟</td></tr><tr><td>insert(i, e)</td><td>第i个孩子插入</td></tr><tr><td>remove(i)</td><td>删除第i个孩子</td></tr><tr><td>traverse()</td><td>遍历</td></tr></tbody></table><ul><li>父节点实现：</li></ul><table><thead><tr><th>rank</th><th>data</th><th>parent</th></tr></thead><tbody><tr><td>0</td><td>A</td><td>-1</td></tr><tr><td>1</td><td>B</td><td>0</td></tr><tr><td>2</td><td>C</td><td>0</td></tr><tr><td>3</td><td>D</td><td>0</td></tr><tr><td>4</td><td>E</td><td>1</td></tr><tr><td>5</td><td>F</td><td>1</td></tr><tr><td>6</td><td>G</td><td>3</td></tr><tr><td>7</td><td>H</td><td>6</td></tr><tr><td>8</td><td>I</td><td>6</td></tr><tr><td>9</td><td>J</td><td>6</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//空间性能： O(n)</span><br><span class="line">//时间性能</span><br><span class="line">//parent(): O(1)</span><br><span class="line">//root(): O(n)或O(1)</span><br><span class="line">//firstChild(): O(n) //不好</span><br><span class="line">//nextSibling(): O(n) //不好</span><br></pre></td></tr></table></figure><ul><li>子节点实现：</li></ul><table><thead><tr><th>rank</th><th>data</th><th>children</th></tr></thead><tbody><tr><td>0</td><td>A</td><td>35</td></tr><tr><td>1</td><td>B</td><td>-1</td></tr><tr><td>2</td><td>C</td><td>-1</td></tr><tr><td>3</td><td>D</td><td>-1</td></tr><tr><td>4</td><td>E</td><td>012</td></tr><tr><td>5</td><td>F</td><td>-1</td></tr><tr><td>6</td><td>G</td><td>789</td></tr><tr><td>7</td><td>H</td><td>-1</td></tr><tr><td>8</td><td>I</td><td>-1</td></tr><tr><td>9</td><td>J</td><td>-1</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//空间性能： O(n)</span><br><span class="line">//时间性能</span><br><span class="line">//parent(): O(n) //不好</span><br><span class="line">//root(): O(n)或O(1)</span><br><span class="line">//firstChild(): O(1) </span><br><span class="line">//nextSibling(): O(1)</span><br></pre></td></tr></table></figure><ul><li>组合实现：</li></ul><table><thead><tr><th>rank</th><th>data</th><th>parent</th><th>children</th></tr></thead><tbody><tr><td>0</td><td>A</td><td>4</td><td>35</td></tr><tr><td>1</td><td>B</td><td>4</td><td>-1</td></tr><tr><td>2</td><td>C</td><td>4</td><td>6</td></tr><tr><td>3</td><td>D</td><td>0</td><td>-1</td></tr><tr><td>4</td><td>E</td><td>-1</td><td>012</td></tr><tr><td>5</td><td>F</td><td>0</td><td>-1</td></tr><tr><td>6</td><td>G</td><td>2</td><td>789</td></tr><tr><td>7</td><td>H</td><td>6</td><td>-1</td></tr><tr><td>8</td><td>I</td><td>6</td><td>-1</td></tr><tr><td>9</td><td>J</td><td>6</td><td>-1</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//空间性能： O(n)</span><br><span class="line">//时间性能</span><br><span class="line">//parent(): O(1) </span><br><span class="line">//root(): O(n)或O(1)</span><br><span class="line">//firstChild(): O(1) </span><br><span class="line">//nextSibling(): O(1) //不好</span><br></pre></td></tr></table></figure><ul><li>长子兄弟法:设2个引用，纵firstChild(), 横nextSibling()</li></ul><h3 id="二叉树-binary-tree-节点度数不超过2"><a href="#二叉树-binary-tree-节点度数不超过2" class="headerlink" title="二叉树(binary tree):节点度数不超过2"></a>二叉树(binary tree):节点度数不超过2</h3><ul><li>左右孩子：lChild–&gt;lSubTree,rChild–&gt;rSubtree隐含了树的有序性</li><li>基数：深度为k的节点，至多2^k个，含n个节点，高度为h的二叉树 h &lt; n &lt; 2^(h+1)</li><li>满树：顶点树最大，饱和状态，宽度2^h</li><li>度与节点：0度叶子，1度单分支，2度双分支</li><li>真二叉树：所有节点度数为0或2，补全1度节点（假想策略）</li><li>描述二叉树:二叉树是多叉树的特例，有根有序时能力足以覆盖后者</li><li>多叉树化二叉树</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 长子兄弟法</span><br><span class="line">2. 向左45度旋转</span><br></pre></td></tr></table></figure><ul><li>二叉树化树</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 若某结点是其双亲的左儿子，则把该结点的右儿子，右儿子的右儿子，...都与该结点的双亲结点用线连起来；</span><br><span class="line">2. 删掉原二叉树中所有的双亲结点与右儿子结点的连线；</span><br><span class="line">3. 整理由两步所得到的树，使之结构层次分明。</span><br></pre></td></tr></table></figure><h3 id="二叉树实现"><a href="#二叉树实现" class="headerlink" title="二叉树实现"></a>二叉树实现</h3><ul><li>节点实现(BinNode)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BinNodePosi(T) BinNode<span class="meta-string">&lt;T&gt;*</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">struct</span> <span class="title">BinNode</span> &#123;</span></span><br><span class="line">    BinNodePosi(T) parent, lChild, rChild; <span class="comment">//父亲孩子</span></span><br><span class="line">    T data; <span class="comment">//数据</span></span><br><span class="line">    <span class="keyword">int</span> height; <span class="comment">//高度</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>; <span class="comment">//规模</span></span><br><span class="line">    BinNodePosi(T) insertAsLc(T <span class="keyword">const</span> &amp;); <span class="comment">//插入左子</span></span><br><span class="line">    BinNodePosi(T) insertAsRc(T <span class="keyword">const</span> &amp;); <span class="comment">//插入右子</span></span><br><span class="line">    BinNodePosi(T) succ(); <span class="comment">//（中序）后继</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> VST&gt; <span class="function"><span class="keyword">void</span> <span class="title">travLevel</span><span class="params">( VST &amp; )</span></span>; <span class="comment">//层次遍历</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> VST&gt; <span class="function"><span class="keyword">void</span> <span class="title">travIn</span><span class="params">( VST &amp; )</span></span>; <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> VST&gt; <span class="function"><span class="keyword">void</span> <span class="title">travPost</span><span class="params">( VST &amp; )</span></span>; <span class="comment">//后序遍历</span></span><br><span class="line">&#125; <span class="comment">//O(1)</span></span><br><span class="line"><span class="comment">//插入左子</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; BinNodePosi(T) BinNode&lt;T&gt;::insertAsLc(T <span class="keyword">const</span> &amp;) &#123;</span><br><span class="line">    <span class="keyword">return</span> lChild = <span class="keyword">new</span> BinNode( e, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入右子</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; BinNodePosi(T) BinNode&lt;T&gt;::insertAsRc(T <span class="keyword">const</span> &amp;) &#123;</span><br><span class="line">    <span class="keyword">return</span> rChild = <span class="keyword">new</span> BinNode( e, <span class="keyword">this</span>);</span><br><span class="line">&#125;<span class="comment">//O(1)</span></span><br><span class="line"><span class="comment">//规模</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">int</span> BinNode&lt;T&gt;::size() &#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (lChild) </span><br><span class="line">        s += lChild-&gt;size();</span><br><span class="line">    <span class="keyword">if</span> (rChild)</span><br><span class="line">        s += rChild-&gt;size();</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;<span class="comment">//O(n)</span></span><br></pre></td></tr></table></figure><ul><li>二叉树实现接口(BinTree)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> stature ((p) ? (p)-&gt;height : -1)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">BinTree</span> &#123;</span></span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">        <span class="keyword">int</span> _size; <span class="comment">//规模</span></span><br><span class="line">        BinNodePosi(T) _root; <span class="comment">//根节点</span></span><br><span class="line">        virtual int updateHeight( BinNodePosi(T) x );</span><br><span class="line">        void updateHeightAbout( BinNodePosi(T) x );</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _size; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _root; &#125;</span><br><span class="line">        BinNodePosi(T) root() <span class="keyword">const</span> &#123; <span class="keyword">return</span> _root; &#125;</span><br><span class="line">        <span class="comment">//接入删除分离</span></span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>更新高度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">int</span> BinTree&lt;T&gt;::updateHeight( BinNodePosi(T) x ) &#123;</span><br><span class="line">    <span class="keyword">return</span> x-&gt;height = <span class="number">1</span> +</span><br><span class="line">    max( stature(x-&gt;lChild), stature(x-&gt;rChild) );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">void</span> BinTree&lt;T&gt;::updateHeightAbout( BinNodePosi(T) x ) &#123;</span><br><span class="line">    <span class="keyword">while</span> (x) &#123;</span><br><span class="line">        updateHeight(x);</span><br><span class="line">        x = x-&gt;parent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>节点插入</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; BinNodePosi(T) BinTree&lt;T&gt;::insertAsRC( BinNodePosi(T) x, T <span class="keyword">const</span> &amp;e)&#123;</span><br><span class="line">    _size++;</span><br><span class="line">    x-&gt;insertAsRC(e);</span><br><span class="line">    updateHeightAbout(x);</span><br><span class="line">    <span class="keyword">return</span> x-&gt;rChild;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h3><p><em>不要从轮子造起，利用之前的工作</em></p><ul><li>按照某种次序访问，每个节点被访问恰好一次</li><li>遍历结果：先序，中序，后序</li><li>区别：局部的根节点的访问顺序</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">先序：V --&gt; L --&gt; R</span><br><span class="line">中序：L --&gt; V --&gt; R</span><br><span class="line">后序：L --&gt; R --&gt; V</span><br><span class="line">//左子树总是在右子树之前</span><br></pre></td></tr></table></figure><ul><li>递归实现：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">template &lt;typename T&gt; void traverse( BinNodePosi(T) x, VST &amp; visit) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !x )</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    visit( x-&gt;data );   <span class="comment">//访问根</span></span><br><span class="line">    traverse( x-&gt;lChild, visit ); <span class="comment">//访问左子树</span></span><br><span class="line">    traverse( x-&gt;rChild, visit ); <span class="comment">//访问右子树</span></span><br><span class="line">&#125; <span class="comment">//O(n)渐进的</span></span><br></pre></td></tr></table></figure><ul><li>改进1(迭代)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">template &lt;typename T, typename VST&gt; void travPre_I1( BinNodePosi(T) x, VST &amp; visit) &#123;</span><br><span class="line">    Stack &lt;BinNodePosi(T)&gt; S; <span class="comment">//辅助栈</span></span><br><span class="line">    <span class="keyword">if</span> ( x )   <span class="comment">//根入栈</span></span><br><span class="line">        S.push(x); </span><br><span class="line">    <span class="keyword">while</span> ( !S.empty() ) &#123;</span><br><span class="line">        x = S.pop(); <span class="comment">//出栈并访问当前节点</span></span><br><span class="line">        visit( x-&gt;data );</span><br><span class="line">        <span class="keyword">if</span>( HasRChild( *x ) )  <span class="comment">//右孩子先进后出</span></span><br><span class="line">            S.push( x-&gt;rChild );</span><br><span class="line">        <span class="keyword">if</span>( HasLChild( *x ) )  <span class="comment">//左孩子先出后进</span></span><br><span class="line">            S.push( x-&gt;lChild );</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">//无法推广</span></span><br></pre></td></tr></table></figure><ul><li>改进2(左侧下行迭代)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">template &lt;typename T, typename VST&gt; void travPre_I2( BinNodePosi(T) x, VST &amp; visit ) &#123;</span><br><span class="line">    Stack &lt;BinNodePosi(T)&gt; S;  <span class="comment">//辅助栈</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;             <span class="comment">//以右子树为单位，逐批访问节点</span></span><br><span class="line">        visitAlongLeftBranch(x, visit, S);</span><br><span class="line">        <span class="keyword">if</span>( S.empty() )        <span class="comment">//栈空即退出</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        x = S.pop();           <span class="comment">//弹出下一个子树的根</span></span><br><span class="line">    &#125; <span class="comment">//pop = push = visit = O(n) = 分摊O(1)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> VST&gt; </span><br><span class="line">static void visitAlongLeftBranch( BinNodePosi(T) x, VST &amp; visit, Stack&lt;BinNodePosi(T)&gt; &amp; S) &#123;</span><br><span class="line">    <span class="keyword">while</span> (x) &#123;</span><br><span class="line">        visit( x-&gt;data );</span><br><span class="line">        S-&gt;pash( x-&gt;rChild );  <span class="comment">//右孩子入栈</span></span><br><span class="line">        x = x-&gt;lChild;         <span class="comment">//沿左侧下行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><ul><li>递归实现</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">template &lt;typename T, typename VST&gt; void traverse( BinNodePosi(T) x, VST &amp; visit) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !x )</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    traverse( x-&gt;lChild, visit ); <span class="comment">//访问左子树O(a)</span></span><br><span class="line">    visit( x-&gt;data );   <span class="comment">//访问根O(1)</span></span><br><span class="line">    traverse( x-&gt;rChild, visit ); <span class="comment">//访问右子树O(n-1-a)</span></span><br><span class="line">&#125; <span class="comment">//O(n)渐进的</span></span><br></pre></td></tr></table></figure><ul><li>改进：左侧下行迭代</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">template &lt;typename T, typename VST&gt; void travIn_I2( BinNodePosi(T) x, VST &amp; visit ) &#123;</span><br><span class="line">    Stack &lt;BinNodePosi(T)&gt; S;  <span class="comment">//辅助栈</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;             <span class="comment">//以右子树为单位，逐批访问节点</span></span><br><span class="line">        goAlongLeftBranch(x, visit, S);</span><br><span class="line">        <span class="keyword">if</span>( S.empty() )        <span class="comment">//栈空即退出</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        x = S.pop();</span><br><span class="line">        visit( x-&gt;data );      <span class="comment">//立即访问</span></span><br><span class="line">        x = x-&gt;rChild;         <span class="comment">//转向右子树</span></span><br><span class="line">    &#125; <span class="comment">//pop = push = visit = O(n) = 分摊O(1)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> VST&gt; </span><br><span class="line">static void goAlongLeftBranch( BinNodePosi(T) x, VST &amp; visit, Stack&lt;BinNodePosi(T)&gt; &amp; S) &#123;</span><br><span class="line">    <span class="keyword">while</span> (x) &#123;</span><br><span class="line">        S-&gt;pash( x-&gt;rChild );  <span class="comment">//右孩子入栈 </span></span><br><span class="line">        x = x-&gt;lChild;         <span class="comment">//沿左侧下行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//每一个节点都只有一个入栈动作，实际只有O(n)复杂度，分摊分析，优于递归</span></span><br></pre></td></tr></table></figure><h3 id="层次遍历：借助队列"><a href="#层次遍历：借助队列" class="headerlink" title="层次遍历：借助队列"></a>层次遍历：借助队列</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> VST&gt; <span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">( VST &amp; visit)</span> </span>&#123;</span><br><span class="line">    Queue &lt;BinNodePosi(T)&gt; Q; <span class="comment">//辅助栈</span></span><br><span class="line">    Q.enqueue( <span class="keyword">this</span> ); </span><br><span class="line">    <span class="keyword">while</span> ( !Q.empty() ) &#123;</span><br><span class="line">        BinNodePosi(T) x = Q.dequeue(); <span class="comment">//出列并访问当前节点</span></span><br><span class="line">        visit( x-&gt;data );</span><br><span class="line">        <span class="keyword">if</span>( HasLChild( *x ) )  <span class="comment">//左孩子先进先出</span></span><br><span class="line">            Q.enqueue( x-&gt;lChild );</span><br><span class="line">        <span class="keyword">if</span>( HasRChild( *x ) )  <span class="comment">//右孩子后进后出</span></span><br><span class="line">            Q.enqueue( x-&gt;rChild );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重构：已知三种遍历序列其中2种还原二叉树"><a href="#重构：已知三种遍历序列其中2种还原二叉树" class="headerlink" title="重构：已知三种遍历序列其中2种还原二叉树"></a>重构：已知三种遍历序列其中2种还原二叉树</h3><ul><li>中序 + 先序/后序：数学归纳法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">证明：</span><br><span class="line">preorder:              r -&gt; [L] -&gt; [R]</span><br><span class="line">inorder:        [L] -&gt; r -&gt; [R]</span><br><span class="line">postorder：[L]-&gt;[R] -&gt; r        </span><br><span class="line">定位r，判断左右子树，递归实现</span><br><span class="line">                A</span><br><span class="line">            B      C</span><br><span class="line">        D        E</span><br><span class="line">                   F</span><br><span class="line">先序： A  B  D  C  E  F</span><br><span class="line">中序： D  B  A  E  F  C</span><br><span class="line">后序： D  B  F  E  C  A</span><br><span class="line">先+中</span><br><span class="line">1. root:A   L:DB   R:EFC</span><br><span class="line">2. root:B   L:D,  root:C , root:C  L:EF</span><br><span class="line">3. root:E   R:F</span><br><span class="line">后+中</span><br><span class="line">1. root:A   L:DB   R:EFC</span><br><span class="line">2. root:C   L:EF,  root:B  L:D </span><br><span class="line">3. root:E   R:E</span><br><span class="line">//技巧，先序后序确定根，中序确定左右分支</span><br></pre></td></tr></table></figure><ul><li>先序 + 后序 + 真二叉树：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">                A</span><br><span class="line">            B      C</span><br><span class="line">           D E    F G</span><br><span class="line">                   H I</span><br><span class="line">先序： A  B  D  E  C  F  G  H  I</span><br><span class="line">后序： D  E  B  F  H  I  G  C  A</span><br><span class="line">1. root: A   L: BDE    R:CFGHI</span><br><span class="line">2. root: B   L: D      R:E, root:C   L:F    R:GHI</span><br><span class="line">3. root: G   L: H      R:I</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数据结构》笔记：栈</title>
      <link href="/2015/08/20/t-course_ds_004/"/>
      <url>/2015/08/20/t-course_ds_004/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一组元素的线性序列，通常只能访问一个元素<br>开放的端top,不开放的bottom<br>push,pop只能操纵当前的顶部的元素  </p><h3 id="接口与实现"><a href="#接口与实现" class="headerlink" title="接口与实现"></a>接口与实现</h3></blockquote><ul><li>操纵</li></ul><table><thead><tr><th>操纵</th><th>功能</th></tr></thead><tbody><tr><td>Stack()</td><td>初始化栈</td></tr><tr><td>empty()</td><td>判断栈是否为空</td></tr><tr><td>push(e)</td><td>进栈</td></tr><tr><td>pop(e)</td><td>出栈</td></tr><tr><td>size()</td><td>返回元素数量</td></tr></tbody></table><ul><li><p>特性：后进先出(LIFO)</p></li><li><p>实现：通过向量或列表派生</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向量实现</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">Stack</span> :</span><span class="keyword">public</span> Vector&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span>: <span class="comment">//size() empty()直接沿用</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(T <span class="keyword">const</span> &amp; e)</span> </span>&#123; insert(size(), e); &#125; <span class="comment">//入栈</span></span><br><span class="line">        <span class="function">T <span class="title">pop</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> remove( size() <span class="number">-1</span> ); &#125;       <span class="comment">//出栈</span></span><br><span class="line">        <span class="function">T &amp; <span class="title">top</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> (*<span class="keyword">this</span>)[ size() - <span class="number">1</span>]; &#125;    <span class="comment">//取顶 O(1)</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//列表实现</span></span><br></pre></td></tr></table></figure><h3 id="进制转换-逆序输出"><a href="#进制转换-逆序输出" class="headerlink" title="进制转换(逆序输出)"></a>进制转换(逆序输出)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">convert</span><span class="params">( Stack&lt;<span class="keyword">char</span>&gt; &amp; S, __int64 n, <span class="keyword">int</span> base)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> digit[] = &#123;<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>,<span class="string">'F'</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        s.push( digit[ n % base ]);</span><br><span class="line">        n /= base;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    Stack&lt;<span class="keyword">char</span>&gt; S;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; base;</span><br><span class="line">    convert(S, n, base);</span><br><span class="line">    <span class="keyword">while</span> ( !S.empty() )</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; S.pop();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="括号匹配（递归嵌套）"><a href="#括号匹配（递归嵌套）" class="headerlink" title="括号匹配（递归嵌套）"></a>括号匹配（递归嵌套）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">paren</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> <span class="built_in">exp</span>[], <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    Stack&lt;<span class="keyword">char</span>&gt; S;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = lo; i &lt; hi; i++)</span><br><span class="line">        <span class="keyword">if</span>( <span class="built_in">exp</span>[i] == <span class="string">'('</span> )</span><br><span class="line">            S.push(<span class="built_in">exp</span>[i]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( !S.empty() )</span><br><span class="line">            S.pop();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> S.empty();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">exp</span>[<span class="number">20</span>] = &#123; <span class="string">'('</span> &#125;;</span><br><span class="line">    paren(<span class="built_in">exp</span>, <span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过计数器也可以实现</span></span><br><span class="line"><span class="comment">//但是通过栈可以拓展到多个括号并存的实例</span></span><br></pre></td></tr></table></figure><h3 id="栈混洗"><a href="#栈混洗" class="headerlink" title="栈混洗"></a>栈混洗</h3><ul><li>计数：cabula数 （2n!）/ (n!*(n+1)!)</li><li>甄别：n = 3 时 3 1 2 不是栈混洗，与元素无关，这是一个禁型，是充要条件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//高效算法，引入3个栈，模拟混洗过程，使用贪心算法</span><br><span class="line">//练习</span><br></pre></td></tr></table></figure><ul><li>与括号匹配的联系</li></ul><h3 id="中缀表达式求值（延迟缓冲）"><a href="#中缀表达式求值（延迟缓冲）" class="headerlink" title="中缀表达式求值（延迟缓冲）"></a>中缀表达式求值（延迟缓冲）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">evaluate</span><span class="params">(<span class="keyword">char</span> * s, <span class="keyword">char</span> * &amp; RPN)</span> </span>&#123;</span><br><span class="line">    Stack&lt;<span class="keyword">float</span>&gt; opnd; </span><br><span class="line">    Stack&lt;<span class="keyword">char</span>&gt; optr;</span><br><span class="line">    optr.push(<span class="string">'\0'</span>);</span><br><span class="line">    <span class="keyword">while</span> (!optr.empty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isdigit</span>(*S))</span><br><span class="line">            readNumber(S, opnd);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span>( orderBetween(optr.top(), *S) ) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'&lt;'</span>:</span><br><span class="line">                    optr.push(*S);</span><br><span class="line">                    S++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'='</span>:</span><br><span class="line">                    optr.pop();</span><br><span class="line">                    S++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'&gt;'</span>: &#123;</span><br><span class="line">                    <span class="keyword">char</span> op = optr.pop();</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">'!'</span> == op)   <span class="comment">//一元运算符</span></span><br><span class="line">                        opnd.push( calcu(op, opnd.pop()) );</span><br><span class="line">                    <span class="keyword">else</span> &#123;           <span class="comment">//二元运算符</span></span><br><span class="line">                        <span class="keyword">float</span> pOpnd2 = opnd.pop(); <span class="comment">//操作数</span></span><br><span class="line">                        <span class="keyword">float</span> pOpnd1 = opnd.pop();</span><br><span class="line">                        opnd.push( calcu(pOpnd1, op, pOpnd2) ); <span class="comment">//运算并回收</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> opnd.pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逆波兰表达式（RPN）-不需要判断优先级，只要遇到操作符就计算，后缀表达式"><a href="#逆波兰表达式（RPN）-不需要判断优先级，只要遇到操作符就计算，后缀表达式" class="headerlink" title="逆波兰表达式（RPN）:不需要判断优先级，只要遇到操作符就计算，后缀表达式"></a>逆波兰表达式（RPN）:不需要判断优先级，只要遇到操作符就计算，后缀表达式</h3><ul><li>变形：若欲取之，必先予之</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 括号显示表示优先级</span><br><span class="line">2. 将运算符移动对应的右括号之后</span><br><span class="line">3. 抹去所有运算符</span><br><span class="line">4. 稍加整理</span><br></pre></td></tr></table></figure><ul><li>实现：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//练习</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数据结构》笔记：列表</title>
      <link href="/2015/08/16/t-course_ds_003/"/>
      <url>/2015/08/16/t-course_ds_003/</url>
      
        <content type="html"><![CDATA[<h3 id="接口与实现"><a href="#接口与实现" class="headerlink" title="接口与实现"></a>接口与实现</h3><blockquote><p>列表是采用<strong>动态存储</strong>策略的典型结构，其中的元素称作节点(node)<br>各节点通过指针或者引用彼此联结，在<strong>逻辑</strong>上构成一个线性序列<br>属于双向链表结构</p></blockquote><ul><li>从静态到动态操作</li><li>1）静态：get O(1), search O(logn)</li><li>2）动态：insert O(n), remove O(n)</li><li>前驱后继：彼此相邻的节点，前驱或后继若存在则必然唯一</li><li>首末节点：没有前驱后后继的唯一节点</li><li>寻位置访问：called-by-position,通过节点的相互引用找到特定的节点</li><li>实现接口：列表节点作为基本单位<br>操作 | 功能<br>—|—<br>pred() | 取节点前驱<br>succ() | 取节点后继<br>data() | 取节点数据对象<br>insertAsPred(e) | 插入前驱节点，存入e，返回新节点位置<br>insertAsSucc(e) | 插入后继节点，存入e，返回新节点位置</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Post(T) ListNode<span class="meta-string">&lt;T&gt;*</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span>  <span class="comment">//完全开放，不再过度封装</span></span><br><span class="line">    T data;   <span class="comment">//数值</span></span><br><span class="line">    Post(T) pred;  <span class="comment">//前驱</span></span><br><span class="line">    Post(T) succ;  <span class="comment">//后继</span></span><br><span class="line">    ListNode() &#123;&#125;  <span class="comment">//针对header和trailer的构造</span></span><br><span class="line">    ListNode(T e, Posi(T) p = <span class="literal">NULL</span>, Post(T) s = <span class="literal">NULL</span>) : data(e), pred(p), succ(s) &#123;&#125; <span class="comment">//默认构造</span></span><br><span class="line">    Posi(T) insertAsPred(T <span class="keyword">const</span> &amp; e); <span class="comment">//前插入</span></span><br><span class="line">    Posi(T) insertAsSucc(T <span class="keyword">const</span> &amp; e); <span class="comment">//后插入</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>操作接口</li><li>模板类</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ListNode.h"</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">List</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> _size;</span><br><span class="line">    Posi(T) header;  <span class="comment">//头元素（不可见）</span></span><br><span class="line">    Posi(T) tailer;  <span class="comment">//末元素（不可见）</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">//内部函数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="comment">//析构函数</span></span><br><span class="line">    <span class="comment">//只读接口</span></span><br><span class="line">    <span class="comment">//可写接口</span></span><br><span class="line">    <span class="comment">//遍历接口</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//构造函数 规模为0</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">void</span> List&lt;T&gt;::init() &#123;</span><br><span class="line">    header = <span class="keyword">new</span> ListNode&lt;T&gt;;</span><br><span class="line">    trailer = <span class="keyword">new</span> ListNode&lt;T&gt;;</span><br><span class="line">    header-&gt;succ = trailer;</span><br><span class="line">    header-&gt;pred = <span class="literal">NULL</span>;</span><br><span class="line">    tailer-&gt;pred = header;</span><br><span class="line">    tailer-&gt;succ = <span class="literal">NULL</span>;</span><br><span class="line">    _size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul><li>秩到位置：模仿向量的循秩访问方式，重载下标符</li><li>查找</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; Posi(T) List&lt;T&gt;::find(T <span class="keyword">const</span> &amp;e, <span class="keyword">int</span> n, Posi(n) p) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">0</span> &lt; n--) </span><br><span class="line">        <span class="keyword">if</span> (e == ( p = p-&gt;pred )-&gt;data )</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>插入</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; Posi(T) List&lt;T&gt;::insertBefore(Posi(T) p, T <span class="keyword">const</span> &amp; e) &#123;</span><br><span class="line">    _size++;</span><br><span class="line">    <span class="keyword">return</span> p-&gt;insertAsPred(e);  <span class="comment">//e当作前驱插入</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; Posi(T) ListNode&lt;T&gt;::insertAsPred(T <span class="keyword">const</span> &amp; e) &#123;</span><br><span class="line">    Posi(T) x = <span class="keyword">new</span> ListNode(e, pred, <span class="keyword">this</span>); <span class="comment">//创建</span></span><br><span class="line">    pred-&gt;succ = x;                          <span class="comment">//建立连接</span></span><br><span class="line">    pred = x;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>基于复制的构造</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基于复制的构造</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">void</span> List&lt;T&gt;::copyNodes(Posi(T) p, <span class="keyword">int</span> n) &#123;  <span class="comment">//O(n)</span></span><br><span class="line">    init();  <span class="comment">//创建头尾节点初始化</span></span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;  <span class="comment">//自p的n下依次作为末节点插入</span></span><br><span class="line">        insertAsLast(p-&gt;data);</span><br><span class="line">        p = p-&gt;succ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>删除节点</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; T List&lt;T&gt;::remove(Posi(T) p) &#123;  <span class="comment">//O(1)</span></span><br><span class="line">    T e = p-&gt;data;     <span class="comment">//备份待删除的数值</span></span><br><span class="line">    p-&gt;pred-&gt;succ = p-&gt;succ; <span class="comment">//跳过p</span></span><br><span class="line">    p-&gt;succ-&gt;pred = p-&gt;pred; <span class="comment">//对称</span></span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">    _size--;</span><br><span class="line">    <span class="keyword">return</span> e;          <span class="comment">//返回数值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>析构</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//析构</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; List&lt;T&gt;::~List() &#123;</span><br><span class="line">    clear();          <span class="comment">//清空列表</span></span><br><span class="line">    <span class="keyword">delete</span> header;    <span class="comment">//释放头</span></span><br><span class="line">    <span class="keyword">delete</span> tailer;    <span class="comment">//释放末</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">int</span> List&lt;T&gt;::clear() &#123;</span><br><span class="line">    <span class="keyword">int</span> oldSize = _size;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">0</span> &lt; _size)</span><br><span class="line">        remove(header-&gt;succ); <span class="comment">//反复删除首节点</span></span><br><span class="line">    <span class="keyword">return</span> oldSize;</span><br><span class="line">&#125;  <span class="comment">//O(n)</span></span><br></pre></td></tr></table></figure><ul><li>唯一化</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//唯一化</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">int</span> List&lt;T&gt;::deduplicate() &#123;</span><br><span class="line">    <span class="keyword">if</span> (_size &lt; <span class="number">2</span>)    <span class="comment">//平凡列表自然无重复</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;     </span><br><span class="line">    <span class="keyword">int</span> oldSize = _size;  <span class="comment">//记录原规模</span></span><br><span class="line">    Posi(T) p = first();</span><br><span class="line">    Rank r = <span class="number">1</span>;           <span class="comment">//p从首节点开始</span></span><br><span class="line">    <span class="keyword">while</span> ( trailer != ( p = p-&gt;succ ) ) &#123;  <span class="comment">//依次到末节点</span></span><br><span class="line">        Posi(T) q = find(p-&gt;data, r, p);    <span class="comment">//从前驱中查找雷同的</span></span><br><span class="line">        q ? remove(q) : r++;                <span class="comment">//若存在删除，否则秩递增</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> oldSize - _size;                 <span class="comment">//列表规模变化，等于删除的元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><ul><li>唯一化</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有序向量唯一化</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">int</span> List&lt;T&gt;::uniquify() &#123; </span><br><span class="line">    <span class="keyword">if</span>(_size &lt; <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ordSize = _size;   <span class="comment">//原始规模</span></span><br><span class="line">    ListNodePosi(T) p = first(); </span><br><span class="line">    ListNodePosi(T) q;</span><br><span class="line">    <span class="keyword">while</span> ( trailer != ( q = p-&gt;succ ) ) <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">if</span> ( p-&gt;data != q-&gt;data )  <span class="comment">//不同</span></span><br><span class="line">            p = q;  <span class="comment">//连接</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            remove(q); <span class="comment">//雷同删除</span></span><br><span class="line">    <span class="keyword">return</span> oldSize - _size;</span><br><span class="line">&#125; <span class="comment">//O(n)</span></span><br></pre></td></tr></table></figure><ul><li>查找</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; Posi(T) List&lt;T&gt;::search(T <span class="keyword">const</span> &amp;e, <span class="keyword">int</span> n, Posi(T) p) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">0</span> &lt;= n-- )  <span class="comment">//从右往左扫描，发现下于即命中</span></span><br><span class="line">        <span class="keyword">if</span> ( ( (  p = p-&gt;pred )-&gt;data ) &lt;= e ) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><ul><li>单链表：节点只包含值域和指针域两个部分</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> posi(T) sList<span class="meta-string">&lt;T&gt;*</span></span></span><br><span class="line">Template &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">struct</span> <span class="title">sList</span> &#123;</span></span><br><span class="line">    T data;</span><br><span class="line">    posi(T) next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//特点：特定元素之后插入，删除，复杂度为O(1)</span></span><br><span class="line"><span class="comment">//尾节点的指针为空 tail-&gt;next = NULL;</span></span><br></pre></td></tr></table></figure><ul><li>- </li><li>双向链表（列表）</li><li>循环单链表：尾指针指向了首元素</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tail-&gt;next = head;</span><br><span class="line"><span class="comment">//特点：特点元素前后插入，删除复杂度O(1)</span></span><br></pre></td></tr></table></figure><ul><li>循环双链表：兼具双向链表和循环链表优势</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tail-&gt;succ = head;</span><br><span class="line">head-&gt;pred = tail;</span><br><span class="line"><span class="comment">//优势：在尾部插入删除元素的复杂度为O(1)</span></span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">void</span> List&lt;T&gt;::selectionSort(Posi(T) p, <span class="keyword">int</span> n) &#123;</span><br><span class="line">    Posi(T) head = p-&gt;pred;   <span class="comment">//待排区间</span></span><br><span class="line">    Posi(T) tail = p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        tail = tail-&gt;succ;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span> &lt; n) &#123;          <span class="comment">//反复从待排区间找出最大的移至有序区间前端</span></span><br><span class="line">        insertBefore( tail, remove( selectMax(head-&gt;succ), n) );</span><br><span class="line">        tail = tail-&gt;pred;</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尽可能少的使用new delete</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; Posi(T) List&lt;T&gt;::selectMax(Posi(T) p, <span class="keyword">int</span> n) &#123;</span><br><span class="line">    Posi(T) max = p;</span><br><span class="line">    <span class="keyword">for</span> (Posi(T) cur = p; <span class="number">1</span> &lt; n; n--) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( !lt ( (cur = cur-&gt;succ )-&gt;data, max-&gt;data) )</span><br><span class="line">            max = cur;</span><br><span class="line">    <span class="keyword">return</span> max;   <span class="comment">//返回最大节点位置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//O(n^2)  但是移动操作远远少于起泡排序</span></span><br><span class="line"><span class="comment">//改进比较操作后可以在nlogn下完成</span></span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><h3 id="LightHouse"><a href="#LightHouse" class="headerlink" title="LightHouse"></a>LightHouse</h3>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数据结构》笔记：向量</title>
      <link href="/2015/08/13/t-course_ds_002/"/>
      <url>/2015/08/13/t-course_ds_002/</url>
      
        <content type="html"><![CDATA[<h3 id="接口与实现"><a href="#接口与实现" class="headerlink" title="接口与实现"></a>接口与实现</h3><blockquote><p>抽象数据类型(ADT:Abstract Data Type) = 数据模型 + 一组操作<br>数据结构(DS:Data Structure) = 基于某种特定语言 + 实现ADT的一整套算法</p></blockquote><ul><li>数组：每个元素由编号唯一指代，并可以直接访问，亦称为线性数组</li><li>向量：数组的抽象和泛化，由一组元素按线性次序封装而成</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1）个元素与[0,n)整数一一对应，称成秩（RANK）</span><br><span class="line">2）元素类型不限于基本类型</span><br><span class="line">3）操作，管理，维护，更加简化安全</span><br><span class="line">4）可以为便捷的参与更加复杂的操作定制</span><br></pre></td></tr></table></figure><ul><li><p>模板：灵活指定类型,利用组成更复杂的数据结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; Vector;</span><br><span class="line">Vector &lt; <span class="keyword">int</span> &gt; myvertor;</span><br><span class="line">Vector &lt;BinTree&gt; forest;</span><br></pre></td></tr></table></figure></li><li><p>ADT接口：丰富的操作接口</p></li></ul><table><thead><tr><th>操作</th><th>功能</th></tr></thead><tbody><tr><td>size()</td><td>向量的规模</td></tr><tr><td>get(r)</td><td>获取秩为r的元素</td></tr><tr><td>put(r,e)</td><td>用e替换秩为r的元素</td></tr><tr><td>insert(r,e)</td><td>e作为秩为r的元素插入，原后继元素后移</td></tr><tr><td>remove(r)</td><td>剔除秩为r的元素</td></tr><tr><td>disordered()</td><td>判断所有元素是否已按非降序排列</td></tr><tr><td>sort()</td><td>调整元素位置，使之按非降序排列</td></tr><tr><td>find(e)</td><td>找到目标元素e放回秩</td></tr><tr><td>deduplicate()</td><td>剔除重复元素</td></tr><tr><td>traverse()</td><td>遍历所有元素</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Rank;          <span class="comment">//秩</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEFAULT_CAPACITY 3 <span class="comment">//默认容量</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">Vector</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>: </span><br><span class="line">    Rank _size;      <span class="comment">//规模</span></span><br><span class="line">    <span class="keyword">int</span> _capacity;   <span class="comment">//容量</span></span><br><span class="line">    T* _elem;        <span class="comment">//数据区</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">//内部函数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    Vector(<span class="keyword">int</span> c = DEFAULT_CAPACITY)&#123; _elem = <span class="keyword">new</span> T[_capacity = c]; _size = <span class="number">0</span>; &#125; <span class="comment">//默认</span></span><br><span class="line">    Vector(T <span class="keyword">const</span> *A, Rank lo, Rank hi) &#123; copyFrom(A, lo, hi); &#125; <span class="comment">//数组区间复制</span></span><br><span class="line">    Vector(Vector&lt;T&gt; <span class="keyword">const</span>&amp; V, Rank lo, Rank hi) &#123; copyFrom(V._elem, lo, hi); &#125; <span class="comment">//向量区间复制</span></span><br><span class="line">    Vector(Vector&lt;T&gt; <span class="keyword">const</span>&amp; V) &#123; copyFrom(V._elem, <span class="number">0</span>, V._size); &#125; <span class="comment">//向量整体复制</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//析构函数</span></span><br><span class="line">    ~Vector() &#123; <span class="keyword">delete</span> [] _elem; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//只读接口</span></span><br><span class="line">    <span class="comment">//可写接口</span></span><br><span class="line">    <span class="comment">//遍历接口</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//复制</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">void</span> Vector&lt;T&gt;::copyFrom(T* <span class="keyword">const</span> A, Rank lo, Rank hi) &#123;</span><br><span class="line">    _elem = <span class="keyword">new</span> T[_capacity = <span class="number">2</span>*(hi - lo)];  <span class="comment">//分配空间，预留2倍的空间</span></span><br><span class="line">    _size = <span class="number">0</span>; <span class="comment">//规模清零</span></span><br><span class="line">    <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">        _elem[_size++] = A[lo++];</span><br><span class="line">    &#125; <span class="comment">//元素逐一复制[0, hi-lo)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//扩容</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">void</span> Vector&lt;T&gt;::expand() &#123; </span><br><span class="line">    <span class="keyword">if</span>(_size &lt; _capacity) <span class="keyword">return</span>;    <span class="comment">//尚满，不扩</span></span><br><span class="line">    _capacity = max(_capacity, DEFAULT_CAPACITY); <span class="comment">//不低于最小容量</span></span><br><span class="line">    T* oldElem = _elem;   </span><br><span class="line">    _elem = <span class="keyword">new</span> T[_capacity &lt;&lt;= <span class="number">1</span>];  <span class="comment">//容量加倍</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _size; ++i)  <span class="comment">//复制原向量内容  </span></span><br><span class="line">        _elem[i] = oldElem[i];       <span class="comment">// = 重载了的</span></span><br><span class="line">    <span class="keyword">delete</span> [] oldElem;               <span class="comment">//释放原空间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可扩充向量：可能出现上溢-overflow-或者下溢-underflow"><a href="#可扩充向量：可能出现上溢-overflow-或者下溢-underflow" class="headerlink" title="可扩充向量：可能出现上溢(overflow)或者下溢(underflow)"></a>可扩充向量：可能出现上溢(overflow)或者下溢(underflow)</h3><blockquote><p>上溢：不足以存放所有元素 ，空间不足<br>下溢：寥寥无几，装填因子：_size/_capacity &lt;&lt; 50%,空间效率低</p><ul><li>蝉的哲学：每生长一段时间，蜕掉外壳，生成新的壳</li><li>即将上溢时适当的增加容量</li><li>得益于向量的封装，扩容后数据区的指针改变了，但不至于出现野指针</li><li>容量加倍策略：成本好于容量递增策略</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">复杂度：最坏情况，在初始容量为1的满容量中，连续插入n = 2^m</span><br><span class="line">当n = 1，2，4，8，16....时扩容</span><br><span class="line">空间上损失换取时间上的巨大收益</span><br></pre></td></tr></table></figure><table><thead><tr><th>策略</th><th>递增策略</th><th>加倍策略</th></tr></thead><tbody><tr><td>累计增容时间</td><td>O(n^2)</td><td>O(n)</td></tr><tr><td>分摊增容时间</td><td>O(n)</td><td>O(1)</td></tr><tr><td>装填因子</td><td>约100%</td><td>&gt;50%</td></tr></tbody></table><blockquote><p>平均复杂度：加权平均数，独立的考察平均程度<br>分摊分析：整体的考虑，连续的足够多次操作，总体成本分摊到单次操作，更加准确分析数据结构和算法成本</p></blockquote><h3 id="无序向量："><a href="#无序向量：" class="headerlink" title="无序向量："></a>无序向量：</h3><ul><li>元素的访问：沿用下标式操作，对下标操纵符进行重载</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; T &amp; Vector&lt;T&gt;::<span class="keyword">operator</span>[](Rank r) <span class="keyword">const</span> &#123; <span class="keyword">return</span> _elem[r]; &#125; <span class="comment">//循秩访问</span></span><br></pre></td></tr></table></figure><ul><li>插入：1.扩容2.后移(从后开始)3.赋值4.规模+1</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; Rank Vector&lt;T&gt;::insert(Rank r, T <span class="keyword">const</span> &amp; e) &#123;</span><br><span class="line">    expand();       <span class="comment">//若满，扩容</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = _size; i &gt; r; i--) </span><br><span class="line">        _elem[i] = _elem[i<span class="number">-1</span>];    <span class="comment">//原r后的整体元素后移一位(后开始)</span></span><br><span class="line">    _elem[r] = e;   <span class="comment">//r处赋值</span></span><br><span class="line">    _size++;        <span class="comment">//规模加一</span></span><br><span class="line">    <span class="keyword">return</span> r;       <span class="comment">//返回秩</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>删除：1.单独处理2.前移(从前开始)3.更新规模4.缩容</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;   <span class="comment">// 删除区间hi-lo</span></span><br><span class="line"><span class="keyword">int</span> Vector&lt;T&gt;::remove(Rank lo, Rank hi) &#123;</span><br><span class="line">    <span class="keyword">if</span> (lo == hi) </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;   <span class="comment">//单独处理退化</span></span><br><span class="line">    <span class="keyword">while</span> (hi &lt; _size)</span><br><span class="line">        _elem[lo++] = _elem[hi++]; <span class="comment">//整体前移一段(前开始)</span></span><br><span class="line">    _size = lo;</span><br><span class="line">    shirnk();       <span class="comment">//缩容</span></span><br><span class="line">    <span class="keyword">return</span> hi - lo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>单元素删除：调用多元素删除</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; T Vector&lt;T&gt;::remove(Rank r) &#123;</span><br><span class="line">    T e = _elem[r];</span><br><span class="line">    remove(r, r+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查找：无序向量，默认重载判等和比较操纵符，逆向扫描</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; Rank Vector&lt;T&gt;::find(T <span class="keyword">const</span> &amp; e, Rank lo, Rank hi) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> ((lo &lt; hi--) &amp;&amp; e != _elem[hi])    <span class="comment">//逆向查找</span></span><br><span class="line">        <span class="keyword">return</span> hi;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最坏O(n)最好O(1) 输入敏感</span></span><br></pre></td></tr></table></figure><ul><li>无序向量唯一化：剔除重复的元素</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;nametype T&gt; <span class="keyword">int</span> Vector&lt;T&gt;::deduplicate() &#123;</span><br><span class="line">    <span class="keyword">int</span> oldSize = _size;</span><br><span class="line">    Rank i = <span class="number">1</span>;               <span class="comment">//从第二个元素开始</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; _size)         <span class="comment">//由前向后逐步考查</span></span><br><span class="line">        (find(_elem[i], <span class="number">0</span>, i) &lt; <span class="number">0</span>) ?</span><br><span class="line">        i++ : remove(i);      <span class="comment">//删除雷同者</span></span><br><span class="line">    <span class="keyword">return</span> oldSize - _size;   <span class="comment">//删除的总数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成本：O(n^2)</span></span><br><span class="line"><span class="comment">//优化</span></span><br></pre></td></tr></table></figure><ul><li>遍历：visit操作</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用函数指针局部修改</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">void</span> Vector&lt;T&gt;::traverse(<span class="keyword">void</span> (*visit)(T&amp;)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _size; i++)</span><br><span class="line">        visit(_elem[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用函数对象</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">template</span> &lt;<span class="keyword">typename</span> TSV&gt;</span><br><span class="line"><span class="keyword">void</span> Vector&lt;T&gt;::traverse(TSV &amp; visit)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _size; i++)</span><br><span class="line">        visit(_elem[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有序向量：唯一化"><a href="#有序向量：唯一化" class="headerlink" title="有序向量：唯一化"></a>有序向量：唯一化</h3><ul><li>相邻逆序对数目可以来度量向量的逆序程度</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">int</span> Vector&lt;T&gt;::disordered() <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _size; i++)  <span class="comment">//逐一检查各对相邻元素</span></span><br><span class="line">        n += (_elem[i - <span class="number">1</span>] &gt; _e[i]); <span class="comment">//逆序则计数向量有序</span></span><br><span class="line">    <span class="keyword">return</span> n;                        <span class="comment">//当且仅当n=0时</span></span><br><span class="line">&#125; <span class="comment">//只判断是否有序，首次遇到逆序对直接终止</span></span><br></pre></td></tr></table></figure><ul><li>唯一化：低效与高效算法</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">int</span> Vector&lt;T&gt;::uniquift() &#123;</span><br><span class="line">    <span class="keyword">int</span> oldSize = _size;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; _size<span class="number">-1</span>) <span class="comment">//雷同删除后者</span></span><br><span class="line">        (_elem[i] == _elem[i+<span class="number">1</span>]) ? remove(i+<span class="number">1</span>) : i++;</span><br><span class="line">    <span class="keyword">return</span> oldSize - _size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最坏情况:O(n^2) 省去了find但竟然与无序向量竟然相同，低效算法</span></span><br><span class="line"><span class="comment">//反思：每个元素都多次进行多次前移</span></span><br><span class="line"><span class="comment">//改进：成批的删除(移动覆盖删除)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">int</span> Vector&lt;T&gt;::uniquift() &#123;</span><br><span class="line">    Rank i = <span class="number">0</span>, j = <span class="number">0</span>; <span class="comment">//相邻互异元素</span></span><br><span class="line">    <span class="keyword">while</span>(++j &lt; _size) <span class="comment">//跳过雷同者，不同者紧靠前者右侧</span></span><br><span class="line">        <span class="keyword">if</span>(_elem[i] != _elem[j])</span><br><span class="line">            _elem[++i] = _elem[j];</span><br><span class="line">    _size = ++i;</span><br><span class="line">    shirnk();</span><br><span class="line">    <span class="keyword">return</span> j - i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//常数迭代时间O(n)</span></span><br></pre></td></tr></table></figure><h3 id="有序向量：二分查找"><a href="#有序向量：二分查找" class="headerlink" title="有序向量：二分查找"></a>有序向量：二分查找</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">int</span> Vector&lt;T&gt;::search(T <span class="keyword">const</span> &amp; e, Rank lo, Rank hi) &#123;</span><br><span class="line">    <span class="keyword">return</span> (rand() % <span class="number">2</span>) ?</span><br><span class="line">    binSearch(_elem, e, lo, hi)</span><br><span class="line">    : fibSearch(_elem, e, lo, hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>语义约定：利于有序向量的自身的维护V.insert(1+search(e), e)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">约定：在有序向量区间V[lo,hi)中，确定不大于e的最后一个元素</span><br><span class="line">失败：若 &lt; V[lo] 则返回lo-1</span><br><span class="line">若 &gt; V[hi-1] 则返回hi-1</span><br><span class="line">重复：插入到不同的上一位</span><br></pre></td></tr></table></figure><ul><li>二分查找：折半查找，减而治之</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1)减而治之，以任一元素x=S[mi]为届，将带查找区间分三部分S(在[lo,mi) &lt;= S[mi] &lt;= S[mi,hi]</span></span><br><span class="line"><span class="comment">2)将目标元素e与x作比较，分三种情况处理</span></span><br><span class="line"><span class="comment">   1. e &lt; x : 必属左侧子区间，递归深入</span></span><br><span class="line"><span class="comment">   2. e &gt; x : 必属右侧子区间，递归深入</span></span><br><span class="line"><span class="comment">   3. e = x : 命中目标，随即返回</span></span><br><span class="line"><span class="comment">3)二分折半策略：轴点mi总是取作中点，每经过最多2次比较，或者命中或者将规模缩减至半</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//二分查找</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">static</span> Rank <span class="title">binSearch</span><span class="params">(T * A, T <span class="keyword">const</span> &amp;e, Rank lo, Rank hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">        Rank mi = (lo + hi) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (e &lt; A[mi]) </span><br><span class="line">            hi = mi;     <span class="comment">//三种情况</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( A[mi] &lt; e) </span><br><span class="line">            lo = mi + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">return</span> mi;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">//查找失败</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//复杂度分析</span></span><br><span class="line"><span class="comment">//递推分析：T(n) = T(n/2) + O(1) = O(log(n))</span></span><br><span class="line"><span class="comment">//递归跟踪：递归深度log(n),每次O(1),总的O(log(n))</span></span><br><span class="line"><span class="comment">//查找长度：关键码的比较次数</span></span><br><span class="line"><span class="comment">//精确的为：1.5log(n)</span></span><br></pre></td></tr></table></figure><h3 id="有序向量：fibonacci查找"><a href="#有序向量：fibonacci查找" class="headerlink" title="有序向量：fibonacci查找"></a>有序向量：fibonacci查找</h3><blockquote><p>二分查找的改进，转向左，右分支前的关键码比较次数不等，递归深度不同，对转向成本进行补偿</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fib查找</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">static</span> Rank <span class="title">fibSearch</span><span class="params">(T * A, T <span class="keyword">const</span> &amp;e, Rank lo, Rank hi)</span> </span>&#123;</span><br><span class="line">    <span class="function">Fib <span class="title">fib</span><span class="params">(hi - lo)</span></span>;   <span class="comment">//创建fib数列</span></span><br><span class="line">    <span class="keyword">while</span>(lo &lt; hi) &#123;</span><br><span class="line">        <span class="keyword">while</span> (hi - lo &lt; fib.get())</span><br><span class="line">            fib.prev(); <span class="comment">//向前查找确定fib(k)-1的轴点</span></span><br><span class="line">        Rank mi = lo + fib.get() - <span class="number">1</span>; <span class="comment">//切分</span></span><br><span class="line">        <span class="keyword">if</span> (e &lt; A[mi])  <span class="comment">//前半段</span></span><br><span class="line">            hi = mi;    </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (A[mi] &lt; e)</span><br><span class="line">            lo = mi + <span class="number">1</span>;<span class="comment">//后半段</span></span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">return</span> mi;  <span class="comment">//命中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//时间复杂度：O(log(n))</span></span><br><span class="line"><span class="comment">//精确复杂度：&lt; O(1.5log(n)) 优于二分查找</span></span><br></pre></td></tr></table></figure><ul><li>最优轴点：二分查找对应0.5，fibonacci查找对应的0.6180339黄金分割比</li></ul><h3 id="有序向量：改进二分查找，缩短长度到1，算法更加稳定"><a href="#有序向量：改进二分查找，缩短长度到1，算法更加稳定" class="headerlink" title="有序向量：改进二分查找，缩短长度到1，算法更加稳定"></a>有序向量：改进二分查找，缩短长度到1，算法更加稳定</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">左右分支不平衡问题</span></span><br><span class="line"><span class="comment">解决方案：只设置两个区间</span></span><br><span class="line"><span class="comment">1. e &lt; x ,若e存在必属S[lo, mi),递归深入</span></span><br><span class="line"><span class="comment">2. x &lt;= e, 若e存在必属S[mi, hi),递归深入</span></span><br><span class="line"><span class="comment">当hi - lo = 1时，判断是否命中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//二分查找B</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">static</span> Rank <span class="title">binSearch</span><span class="params">(T * A, T <span class="keyword">const</span> &amp;e, Rank lo, Rank hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span> &lt; hi - lo) &#123;</span><br><span class="line">        Rank mi = (lo + hi) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        (e &lt; A[mi]) ? hi = mi : lo = mi;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (e == A[mi]) ? lo : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//复杂度分析：最好的情况更坏，更坏的情况更好，稳定性高</span></span><br><span class="line"><span class="comment">//严格兑现了语义约定：多个命中元素，返回最靠右的</span></span><br><span class="line"><span class="comment">//失败时，返回小于e的最大者</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//二分查找C</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">static</span> Rank <span class="title">binSearch</span><span class="params">(T * A, T <span class="keyword">const</span> &amp;e, Rank lo, Rank hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">        Rank mi = (lo + hi) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        (e &lt; A[mi]) ? hi = mi : lo = mi + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> --lo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有序向量：插值查找-以后研究"><a href="#有序向量：插值查找-以后研究" class="headerlink" title="有序向量：插值查找(以后研究)"></a>有序向量：插值查找(以后研究)</h3><ul><li>均匀独立的随机分布</li></ul><h3 id="起泡排序"><a href="#起泡排序" class="headerlink" title="起泡排序"></a>起泡排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//排序接口</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">void</span> Vector&lt;T&gt;::sort(Rank lo, Rank hi) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (rand() % <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: bubbleSort(lo, hi); <span class="keyword">break</span>;  <span class="comment">//起泡排序</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: selectSort(lo, hi); <span class="keyword">break</span>;  <span class="comment">//选择排序</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>: mergeSort(lo, hi); <span class="keyword">break</span>;   <span class="comment">//归并排序</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>: heapSort(lo, hi); <span class="keyword">break</span>;    <span class="comment">//堆排序</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>: quickSort(lo, hi); <span class="keyword">break</span>;   <span class="comment">//快速排序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//起泡排序(改进版)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">void</span> Vector&lt;T&gt;::bubbleSort(Rank lo, Rank hi) &#123;</span><br><span class="line">    <span class="keyword">while</span> (!bubble(lo, hi--));               <span class="comment">//扫描直至全序      </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">bool</span> Vector&lt;T&gt;::bubble(Rank lo, Rank hi) &#123;</span><br><span class="line">    <span class="keyword">bool</span> sorted = <span class="literal">true</span>;                      <span class="comment">//有序标志</span></span><br><span class="line">    <span class="keyword">while</span> (++lo &lt; hi)                        <span class="comment">//整体扫描</span></span><br><span class="line">        <span class="keyword">if</span> (_elem[lo - <span class="number">1</span>] &gt; _elem[lo]) &#123;     <span class="comment">//若存在逆序</span></span><br><span class="line">            sorted = <span class="literal">false</span>;                  <span class="comment">//整体尚未有序的</span></span><br><span class="line">            swap(_elem[lo - <span class="number">1</span>], _elem[lo]);  <span class="comment">//交换</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> sorted;                           <span class="comment">//返回序标</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//复杂度：O(n^2) 改进节省相当多的时间（三角形变梯形），依然有改进空间</span></span><br><span class="line"><span class="comment">//改进后可以使之为O(n^1.5)</span></span><br><span class="line"><span class="comment">//再次改进</span></span><br><span class="line"><span class="comment">//起泡排序(再次改进)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">void</span> Vector&lt;T&gt;::bubbleSort(Rank lo, Rank hi) &#123;</span><br><span class="line">    <span class="keyword">while</span> (lo &lt; ( hi = bubble(lo, hi) ) );               <span class="comment">//扫描直至全序      </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; Rank Vector&lt;T&gt;::bubble(Rank lo, Rank hi) &#123;</span><br><span class="line">    Rank last = lo;             </span><br><span class="line">    <span class="keyword">while</span> (++lo &lt; hi)</span><br><span class="line">        <span class="keyword">if</span> (_elem[lo - <span class="number">1</span>] &gt; _elem[lo]) &#123;</span><br><span class="line">            last = lo;</span><br><span class="line">            swap(_elem[lo - <span class="number">1</span>], _elem[lo]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> sorted;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//省去更多的时间，跳过有序的部分，最好的情况一样O(n)，最坏的情况依然是O(n^2)</span></span><br></pre></td></tr></table></figure><ul><li>稳定性：重复的元素在输入,输出相对的次序,是保持不变的</li><li>起泡排序也是稳定的，元素a，b的相对位置发生变化，只有一种可能：</li><li>1）分别与其他元素交换，二者相互接近和相邻</li><li>2）接下来的一轮扫描交换中，二者因逆序而交换位置</li></ul><h3 id="归并排序：基于分治策略-递归分解"><a href="#归并排序：基于分治策略-递归分解" class="headerlink" title="归并排序：基于分治策略(递归分解)"></a>归并排序：基于<strong>分治策略</strong>(递归分解)</h3><blockquote><p>基于的比较排序：存在的上下界，O(n2) —bubbleSort———–mergeSort–&gt; O(nlogn)  </p></blockquote><ul><li>二路归并算法原理：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">序列1：21 - 13 - 8 - 5   </span><br><span class="line">序列2：29 - 19 - 4 - 2</span><br><span class="line">归并： 2 - 4 - 5 - 8 - 13 - 19 - 21 - 29</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//归并排序</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">void</span> Vetor&lt;T&gt;::mergeSort(Rank lo, Rank hi) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hi -lo &lt; <span class="number">2</span>) <span class="keyword">return</span>;   <span class="comment">//处理递归基，单元素区间自然有序</span></span><br><span class="line">    <span class="keyword">int</span> mi = (lo + hi) &gt;&gt; <span class="number">1</span>;  <span class="comment">//中心点</span></span><br><span class="line">    mergeSort(lo, mi);        <span class="comment">//前端递归</span></span><br><span class="line">    mergeSort(mi, hi);        <span class="comment">//后段递归</span></span><br><span class="line">    merge(lo, mi, hi);        <span class="comment">//归并</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">void</span> Vector&lt;T&gt;::merge(Rank lo, Rank mi, Rank hi) &#123;</span><br><span class="line">    T * A = _elem + lo;       <span class="comment">//合并后的向量</span></span><br><span class="line">    <span class="keyword">int</span> lb = mi - lo;         <span class="comment">//前子向量</span></span><br><span class="line">    T * B = <span class="keyword">new</span> T[lb];        <span class="comment">//复制前子向量</span></span><br><span class="line">    <span class="keyword">for</span> (Rank i = <span class="number">0</span>; i &lt; lb; B[i] = A[i++])</span><br><span class="line">        ;</span><br><span class="line">    <span class="keyword">int</span> lc = hi - mi;         <span class="comment">//后子向量</span></span><br><span class="line">    T * C = _elem + mi;       <span class="comment">//B[j]和C[k]小者转移A末尾</span></span><br><span class="line">    <span class="keyword">for</span> (Rank i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>; (j &lt; lb) || (k &lt; lc); ) &#123;</span><br><span class="line">        <span class="keyword">if</span>( (j &lt; lb) &amp;&amp; (lc &lt;= k) || (B[j] &lt;= C[k]) )</span><br><span class="line">            A[i++] = B[j++];</span><br><span class="line">        <span class="keyword">if</span>( (k &lt; lc) &amp;&amp; (lb &lt;= j) || (C[K] &lt;= B[j]) )</span><br><span class="line">            A[i++] = C[k++];</span><br><span class="line">    &#125; <span class="comment">//循环紧凑，效率不如拆分</span></span><br><span class="line">    <span class="keyword">delete</span> [] B;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//正确性：</span></span><br><span class="line"><span class="comment">//复杂度：for (...; (j &lt; lb) || (k &lt; lc); ) &#123;</span></span><br><span class="line">    <span class="keyword">if</span>() &#123; A[i++] = B[j++] ; &#125;</span><br><span class="line">    <span class="keyword">if</span>() &#123; A[i++] = C[k++] ; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>循环为主要消耗： j + k = n 总迭代不过O(n)线性时间</span><br><span class="line">总的 T(n) = <span class="number">2</span>T(n/<span class="number">2</span>)  ==&gt; O(nlogn)  最坏情况下</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数据结构》笔记：算法分析</title>
      <link href="/2015/08/10/t-course_ds_001/"/>
      <url>/2015/08/10/t-course_ds_001/</url>
      
        <content type="html"><![CDATA[<h3 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h3><p><em>Dijkstra名言：计算机科学，就是计算的科学</em></p><ul><li>绳索计算机和算法：古埃及人的算法，线段垂直</li><li>尺规计算机和算法：线段三等分</li><li><strong>总结：计算 = 信息处理，<br>借助某种工具，尊尊某种规则</strong><blockquote><p>算法：特定计算模型下，解决问题的指令序列</p></blockquote></li></ul><ol><li>输入：待处理的信息</li><li>输出：经处理的信息</li><li>正确性：的确可以解决指定的问题</li><li>确定性：基本操作组成的序列</li><li>可行性：每个操作都可以实现，在常数时间内完成</li><li>有穷性：如何输入，有穷次操作可以，得到输出结果</li></ol><ul><li>可行性：所有操作都可以兑现，例子3步把大象装到冰箱</li><li>有穷性：Hailstone(n)算法</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hailstone</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span> &lt; n)&#123;   </span><br><span class="line">        n%<span class="number">2</span>==<span class="number">0</span> ? n/=<span class="number">2</span> : n=<span class="number">3</span>*n+<span class="number">1</span>;</span><br><span class="line">        length++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结论：所有的n是否都可以有穷的步骤，还没有结论</strong></p><blockquote><p>程序 ！= 算法</p><h3 id="计算模型"><a href="#计算模型" class="headerlink" title="计算模型"></a>计算模型</h3><p><em>凯文名言：如果你需要改进某种东西，你首先的学会如何测量它</em></p></blockquote><ul><li>算法分析两个主要方面：正确性，成本</li><li>成本：时间成本，空间成本</li><li>怎么衡量时间成本：特定算法+不同示例</li><li>稳妥起见：关注最坏情况</li><li>同一问题多种算法，评价其优劣：实验统计不足够</li><li>图灵机模型</li><li><ul><li>Tape(带)：均匀划分单元格，各注一字符，默认为’#’</li></ul></li><li><ul><li>Alphabet：字符种类有限</li></ul></li><li><ul><li>Head：总是对准某一单元格，并可以读取修改其中的字符，<pre><code>每经过一个节拍，可转向左侧或右侧</code></pre></li></ul></li><li><ul><li>State TM：有限机状态</li></ul></li><li><ul><li>Transition Function：(q, c, d, L/R, p)<br>若当前状态为q，字符为c，将当前字符改写为d，转向左侧/右侧；转入p状态，一旦转入h停机<br>功能：二进制非负整数加一，全1的后缀转为0，原低位的0翻转为1</li></ul></li><li>RAM模型：寄存器顺序编号，总数没有限制</li></ul><p><strong>总结：图灵机，RAM模型为度量算法性能提供了准确的尺度</strong></p><h3 id="大O记号"><a href="#大O记号" class="headerlink" title="大O记号"></a>大O记号</h3><p><em>陶渊明名言：好读书不求甚解（更多的看重长远，主流）</em></p><ul><li>渐进分析： 考虑n &gt;&gt; 2, 对规模为n的输入，需执行的基本操作次数，存储单元数</li><li>大O记号（big-O notation）：<strong>T(n) = O( f(n) )</strong>  &lt;=   <strong>存在c &gt; 0， n &gt;&gt; ,有 T(n) &lt; c * f(n)</strong></li><li>常系数可忽略：<br>O（ c * f(n) ）= O ( f(n) )</li><li>低次项可忽略：<br>O ( n^a + n^b ) = O( n^a ) ,  a &gt; b</li><li>其他记号：最好，平均情况</li><li>常数O(1)：2 = 2013 = 2013^2013 = O(1)，不含转向</li><li>对数O(logn)：<strong>非常高效，无限接近与常数</strong></li><li><ul><li>常底数无所谓<br>所有 a, b &gt; 0, log(a) n = log(a) b * log(b)n = O( log(b) n )</li></ul></li><li><ul><li>常数次幂无所谓</li></ul></li><li><ul><li>对数多项式</li></ul></li><li>多项式（O（n ^c））:<strong>直接往高处化，通常认为令人满意了</strong></li><li><ul><li>线性（O（n））</li></ul></li><li><ul><li>从O（n）~ O（n^2）：编程题主要覆盖的范围</li></ul></li><li><ul><li>幂</li></ul></li><li>指数（a ^n）：计算成本增长极快，<br>和多项式之间有个分水岭（有效算法到无效算法）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">问题：<span class="number">2</span>-Subset </span><br><span class="line">S包含n个正整数，存在S = <span class="number">2</span>m</span><br><span class="line">是否有子集T，满足存在 T = m?</span><br><span class="line">美国大选说事</span><br></pre></td></tr></table></figure><p><strong>不存在可在多项式时间内解决该问题</strong></p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p><em>夸赞欧拉：像欧拉一样像呼吸一样自如</em></p><ul><li>主要任务：正确性+复杂度</li><li>C++基本指令：等价于RAM的基本指令，二者相当</li><li><ul><li>分支转向：goto //出于结构化被隐藏了</li></ul></li><li><ul><li>迭代循环：for（）、while（）、…… //本质上就是if + goto</li></ul></li><li><ul><li>调用加递归 //本质上也是goto</li></ul></li><li>分析方法：迭代（级数求和）、递归（递归跟踪+递推方程）、猜测</li><li>级数：</li><li><ul><li>算数级数（与末项平方同阶）：1 + 2 + …… + n = n (n+1) /2 = O(n^2)</li></ul></li><li><ul><li>幂级数（比末项高出一阶）：1^C + 2^C + …… n^C = O( n^(C+1) )</li></ul></li><li><ul><li>几何级数（与末项同阶）：a0 + a^1 + …… a^n = O(a^n)</li></ul></li><li><ul><li>收敛级数： O（1）</li></ul></li><li><ul><li>调和级数：1 + 1/2 + …… 1/n = O(logn)</li></ul></li><li><ul><li>对数级数：log1 + log2 + …… + logn = log(n!) = O(nlogn)</li></ul></li><li>循环与级数：</li><li><ul><li>二重循环复杂度：O(n^2)<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n; i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)</span><br><span class="line">        op();</span><br><span class="line">        </span><br><span class="line"><span class="comment">//变化界限   </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n; i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; j++)</span><br><span class="line">        op();  </span><br><span class="line"><span class="comment">//变化步长</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n; i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; j=+<span class="number">2017</span>)</span><br><span class="line">        op();</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>渐进复杂度依然一样：n + n + …… + n = n^2 = O(n^2)</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//变化成几何级数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ; i&lt;n; i&lt;&lt;<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)</span><br><span class="line">        op();</span><br></pre></td></tr></table></figure><p><strong>复杂度变为O(n)</strong></p><ul><li><ul><li>例子：冒泡排序<blockquote><p>估算：1天多少秒？<br><strong>1天 = 24hr <em> 60min </em> 60sec = 25 * 4000 = 100000 sec</strong></p><h3 id="迭代与递归"><a href="#迭代与递归" class="headerlink" title="迭代与递归"></a>迭代与递归</h3><p><strong>凡治众如治寡，分数是也</strong></p></blockquote></li></ul></li><li>例子求和</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SumI</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>; <span class="comment">//O（1）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += A[i]; <span class="comment">//O（1）</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;  <span class="comment">//O（1）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 时间复杂度：T(n)  = O（n）</span></span><br><span class="line"><span class="comment">// 空间复杂度：O(1)</span></span><br></pre></td></tr></table></figure><ul><li>减而治之：<blockquote><p>求解一个大规模的问题，划分成两个子问题：其一平凡，其二规模缩减（单调性）</p></blockquote></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SumJ</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">1</span>) ? <span class="number">0</span> : SumJ(A, n<span class="number">-1</span>) + A[n+<span class="number">1</span>] ;</span><br><span class="line">&#125; <span class="comment">//递归</span></span><br><span class="line">递归跟踪：T(n) = O(<span class="number">1</span>)*(n+<span class="number">1</span>) = O(n)</span><br><span class="line">递推方程：T(n) = T(n<span class="number">-1</span>) + O(<span class="number">1</span>)  T(<span class="number">0</span>) = O(<span class="number">1</span>)  ==&gt; T(n) = O(n)</span><br></pre></td></tr></table></figure><ul><li>例子:数组倒置</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void reverse(int * Am int lo, int hi)；</span><br><span class="line"><span class="comment">//递归版</span></span><br><span class="line"><span class="keyword">if</span>(lo &lt; hi) &#123; swap(A[lo], A[hi]); reverse(A, lo+<span class="number">1</span>, hi<span class="number">-1</span>); &#125;</span><br></pre></td></tr></table></figure><ul><li>分而治之：<blockquote><p>求解一个大规模的问题，划分成多个子问题，规模相当，分别求解子问题</p></blockquote></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lo == hi) <span class="keyword">return</span> A[lo];</span><br><span class="line">    <span class="keyword">int</span> mi = (lo+hi) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> sum(A, lo, mi) + sum(A, mi + <span class="number">1</span>, hi);</span><br><span class="line">&#125;<span class="comment">//二分递归</span></span><br><span class="line">递归跟踪：T(n) = O(<span class="number">1</span>) * (<span class="number">2</span>^<span class="number">0</span> + ... + <span class="number">2</span>^logn) = O(n)</span><br><span class="line">递推方程：T(n) = O(<span class="number">1</span>) + <span class="number">2</span>T(n/<span class="number">2</span>), T(<span class="number">1</span>) = O(<span class="number">1</span>)    T(n) = O(n);</span><br></pre></td></tr></table></figure><ul><li>例子：MAX2，[lo, hi) 找出最大和次大的</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( A[x1 = lo] &lt; A[x2 = lo + <span class="number">1</span>]) swap(x1, x2);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = lo + <span class="number">2</span>; i &lt; hi; i++)</span><br><span class="line">    <span class="keyword">if</span>(A[x2] &lt; A[i])</span><br><span class="line">        <span class="keyword">if</span>(A[x1] &lt; A[x2 =i])</span><br><span class="line">            swap(x1, x2);</span><br><span class="line">复杂度：最好的 n<span class="number">-1</span>次比较，最坏的<span class="number">2</span>n<span class="number">-3</span>次比较</span><br><span class="line">改进：分而治之 最坏<span class="number">5</span>n/<span class="number">3</span><span class="number">-2</span></span><br></pre></td></tr></table></figure><h3 id="动态规划-DSA优化"><a href="#动态规划-DSA优化" class="headerlink" title="动态规划(DSA优化)"></a>动态规划(DSA优化)</h3><blockquote><p>运转–&gt;正确–&gt;快速</p></blockquote><ul><li>例子：fib()（递归）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fib(n) = f(n-1) + f(n-2) &#123;0, 1, 1, 2, 3, 5, 8 ...&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(n)</span> </span>&#123; <span class="keyword">return</span> (<span class="number">2</span> &gt; n) ? n : fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>); &#125;</span><br><span class="line"><span class="comment">// fib(43)  ==&gt; 巨大的延迟</span></span><br><span class="line"><span class="comment">//时间复杂度分析</span></span><br><span class="line"><span class="comment">//递推公式：T(n-1) + T(n-2) + 1, T(1) = T(0) = 1, S(n) = fib(n+1) = 1.68... ^n</span></span><br><span class="line"><span class="comment">//==&gt; O(2^n) 指数复杂度  超过100项，需要几百年</span></span><br><span class="line"><span class="comment">//递归跟踪：大量重复的递归实例</span></span><br></pre></td></tr></table></figure><ul><li>例子：fib()（迭代）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法A(记忆)</span></span><br><span class="line"><span class="comment">//制表查询</span></span><br><span class="line"><span class="comment">//方法B(动态规划)</span></span><br><span class="line"><span class="comment">//颠倒计算方向，自底而上</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">0</span>, g = <span class="number">1</span>;  <span class="comment">//用2个参数存储中间指</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">0</span> &lt; n--)&#123;</span><br><span class="line">        g = g + f;</span><br><span class="line">        f = g - f; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> g;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//空间上只需要O(1)</span></span><br></pre></td></tr></table></figure><ul><li>例子：最长公共子序列（递归–&gt;动态规划）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 最长公共子序列</span></span><br><span class="line"><span class="comment"> * 可行----&gt;递归策略----&gt;减而治之----&gt;平凡情况</span></span><br><span class="line"><span class="comment"> * 效率----&gt;动态规划----&gt;自底而上----&gt;迭代策略</span></span><br><span class="line"><span class="comment"> * 对于序列A[0,n],B[0,m], LCS(A,B)无非3种情况</span></span><br><span class="line"><span class="comment"> * 1) n=-1或m=-1，作空序列</span></span><br><span class="line"><span class="comment"> * 2) A[n] = 'X' = B[m] 则LCS( A[0,n), B[0,m), 'X' )</span></span><br><span class="line"><span class="comment"> * 3) A[n] != B[m] 则 LCS( A[0,n], B[0,m) ) 与 LCS( A[0,n), B[0,m] ) 中取更长者(分而治之)</span></span><br><span class="line"><span class="comment"> * 采用倒推式方式求公共子序列，用二维数组存储中间值</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCS</span><span class="params">(<span class="built_in">string</span>, <span class="keyword">int</span>, <span class="built_in">string</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCS2</span><span class="params">(<span class="built_in">string</span>, <span class="keyword">int</span>, <span class="built_in">string</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a, b;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; LCS(a, a.length()<span class="number">-1</span>, b, b.length()<span class="number">-1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; a &lt;&lt; b &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCS</span><span class="params">(<span class="built_in">string</span> a, <span class="keyword">int</span> m, <span class="built_in">string</span> b, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m == <span class="number">-1</span> || n == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a[m] == b[n])</span><br><span class="line">        <span class="keyword">return</span> LCS(a, m<span class="number">-1</span>, b, n<span class="number">-1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> LCS(a, m, b, n<span class="number">-1</span>) &gt; LCS(a, m<span class="number">-1</span>, b, n)</span><br><span class="line">        ? LCS(a, m, b, n<span class="number">-1</span>) </span><br><span class="line">        : LCS(a, m<span class="number">-1</span>, b, n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//动态规划</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCS</span><span class="params">(<span class="built_in">string</span> a, <span class="keyword">int</span> m, <span class="built_in">string</span> b, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[m][n] = &#123;<span class="number">0</span>&#125;;   <span class="comment">//用数组存储中间值</span></span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>] == a[<span class="number">0</span>])</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《C primer plus》笔记：内存管理</title>
      <link href="/2015/07/15/t-book_c_006/"/>
      <url>/2015/07/15/t-book_c_006/</url>
      
        <content type="html"><![CDATA[<h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><h3 id="存储类别"><a href="#存储类别" class="headerlink" title="存储类别"></a>存储类别</h3><ul><li>对象（object）：被存储的值占有一定的物理内存<blockquote><p>此对象非面向对象中的对象</p></blockquote></li><li><p>访问（access）：声明变量来访问对象，也可以通过其他方式指定对象</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> entity = <span class="number">3</span>;      <span class="comment">//声明变量访问</span></span><br><span class="line"><span class="keyword">int</span> * pt = &amp;entity;   <span class="comment">//指针访问</span></span><br><span class="line"><span class="keyword">int</span> rank[<span class="number">10</span>];        <span class="comment">//数组访问</span></span><br></pre></td></tr></table></figure></li><li><p>作用域（scope）：</p></li><li><ul><li>块作用域：使用的局部变量（包含形参）都有块作用域 ，C99扩展了声明</li></ul></li><li><ul><li>函数作用域：仅用于goto，延伸整个函数</li></ul></li><li><ul><li>函数原型作用域：从形参定义到原型结束，形参名并不重要，仅变长数组需要</li></ul></li><li><ul><li>文件作用域：定义在函数外面，从该定义至文件末尾均可见（全局变量）<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">blocky</span><span class="params">(<span class="keyword">double</span> a)</span></span>&#123; </span><br><span class="line">    <span class="keyword">double</span> b; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">0</span>; c&lt;<span class="number">10</span>; c++)&#123; ... &#125;</span><br><span class="line">&#125; <span class="comment">//a, b, c 都具备块作用域</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>链接（linkage）：</p></li><li><ul><li>外部链接：全局作用域，在多个文件中使用的且具有文件作用域</li></ul></li><li><ul><li>内部链接：文件作用域，在一个文件使用且具有文件作用域</li></ul></li><li><ul><li>无链接：局部作用域，具有块，函数，原型作用域<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span>:</span><br><span class="line">    <span class="keyword">int</span> giants = <span class="number">5</span>;         <span class="comment">//文件作用，外部</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> dodgers = <span class="number">3</span>; <span class="comment">//文件作用，内部</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>存储期（storage duration）：对象在内存中保留的时间</p></li><li><ul><li>静态存储期：执行期间一直存在，文件作用域变量具有静态存储期</li></ul></li><li><ul><li>线程存储期：用于并发设计，从申明至线程结束</li></ul></li><li><ul><li>自动存储期：块作用域变量通常具备自动存储期</li></ul></li><li><ul><li>动态分配存储期：</li></ul></li><li>存储类别：5种</li></ul><table><thead><tr><th>存储类别</th><th>存储期</th><th>作用域</th><th>链接</th><th>声明</th></tr></thead><tbody><tr><td>自动</td><td>自动</td><td>块</td><td>无</td><td>块内</td></tr><tr><td>寄存器</td><td>自动</td><td>块</td><td>无</td><td>块内 使用register</td></tr><tr><td>静态外部链接</td><td>静态</td><td>文件</td><td>外部</td><td>函数外</td></tr><tr><td>静态内部链接</td><td>静态</td><td>文件</td><td>内部</td><td>函数外 使用static</td></tr><tr><td>静态无链接</td><td>静态</td><td>文件</td><td>无</td><td>块内 使用static</td></tr></tbody></table><ul><li>自动变量：</li><li><ul><li>使用auto显示声明（不同于c++中auto）</li></ul></li><li><ul><li>内层变量于外层同名：暂时隐藏外层变量，等运行完后回到原来作用域、</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"file:%d\n"</span>, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 1 2 3 4 5 6 7 8 9 file:3</span></span><br></pre></td></tr></table></figure><ul><li><ul><li>初始化：自动变量不会初始化除非显示初始化，未初始化会造成不可预期的异常</li></ul></li><li>寄存器变量：存储在cpu中，处理速度更快的自动变量</li><li>静态内部链接变量：只能用于同一文件的函数中</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>静态外部链接变量：外部变量（external variable）</li><li><ul><li>使用其他文件的变量必须再次声明，函数内则可以不必声明<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a;                <span class="comment">//定义外部变量，给全局</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span> coal;     <span class="comment">//声明使用其他文件外部变量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">char</span> coal; <span class="comment">//再次声明变量，可以省略</span></span><br><span class="line">    <span class="keyword">char</span> coal;        <span class="comment">//定义的自动变量，隐藏了外部变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><ul><li>初始化：可以显示初始化，也可以自动初始化为0，只能用常量表达式初始化</li></ul></li><li><ul><li>使用：函数内使用时，可以声明加extern,也可以不申明</li></ul></li><li><ul><li>定义和申明：<strong>extern表明声明的变量定义在别处</strong></li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> tern = <span class="number">1</span>;       <span class="comment">//定义并初始化</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> tern;    <span class="comment">//此文件声明，也可以不申明</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> a;       <span class="comment">//必须有其他文件定义过a</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> b = <span class="number">0</span>;   <span class="comment">//错误,extern只能申明不能初始化</span></span><br></pre></td></tr></table></figure><p>存储类别说明符：auto, register,static,extern,_ Thread_local,typedef<br>存储类别与函数：外部函数（默认）， 静态函数， 内联函数（C99）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">a</span><span class="params">()</span></span>;           <span class="comment">//外部函数，其他文件可以使用</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">beta</span><span class="params">()</span></span>; <span class="comment">//静态函数，此文件使用</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">double</span> <span class="title">c</span><span class="params">()</span></span>;    <span class="comment">//内联函数，其他文件定义的函数</span></span><br></pre></td></tr></table></figure><blockquote><p>存储类别：按需使用</p></blockquote><h3 id="随机数函数和静态变量"><a href="#随机数函数和静态变量" class="headerlink" title="随机数函数和静态变量"></a>随机数函数和静态变量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> next = <span class="number">1</span>; <span class="comment">//种子</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">rand0</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    next = next * <span class="number">1103515245</span> + <span class="number">12345</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>) (next / <span class="number">65536</span>) % <span class="number">32768</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeNext</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> seed)</span></span>&#123;</span><br><span class="line">    next = seed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="掷色子"><a href="#掷色子" class="headerlink" title="掷色子"></a>掷色子</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;     </span></span></span><br><span class="line"><span class="keyword">int</span> roll_count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">roll_n_dice</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rollem</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="comment">// int main(void)&#123;</span></span><br><span class="line"><span class="comment">//  for (int i = 0; i &lt; 10; ++i)</span></span><br><span class="line"><span class="comment">//  &#123;</span></span><br><span class="line"><span class="comment">//      printf("%d\n", rollem(6));</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//  return 0;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//生成1 - 6 之间的随机数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rollem</span><span class="params">(<span class="keyword">int</span> sides)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> roll;</span><br><span class="line">    roll = rand() % sides + <span class="number">1</span>;</span><br><span class="line">    roll_count++;</span><br><span class="line">    <span class="keyword">return</span> roll;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">roll_n_dice</span><span class="params">(<span class="keyword">int</span> dice, <span class="keyword">int</span> sides)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> d;</span><br><span class="line">    <span class="keyword">int</span> total =  <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(sides &lt; <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    <span class="keyword">if</span>(sides &lt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (d = <span class="number">0</span>; d &lt; dice; ++d)</span><br><span class="line">        total += rollem(sides);</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"testRandom.c"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dice, roll;</span><br><span class="line">    <span class="keyword">int</span> sides, status;</span><br><span class="line">    srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>) time(<span class="number">0</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"enter a number of sides:\n"</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;sides) == <span class="number">1</span> &amp;&amp; sides &gt; <span class="number">0</span>)&#123; </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"how many dice\n"</span>);</span><br><span class="line">        <span class="comment">//检查输入部分</span></span><br><span class="line">        <span class="keyword">if</span>(status = <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;dice) != <span class="number">1</span>)&#123; </span><br><span class="line">            <span class="keyword">if</span>(status == EOF)            <span class="comment">//检查是否有文件终止符</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(getchar() != <span class="string">'\n'</span>)  <span class="comment">//去掉换行符</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//开始计算骰子总和</span></span><br><span class="line">        roll = roll_n_dice(dice, sides);</span><br><span class="line">        <span class="comment">//打印结果</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"total %d , using %d times, %d-sides\n"</span>, roll, dice, sides);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"function called : %d\n"</span>, roll_count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分配内存"><a href="#分配内存" class="headerlink" title="分配内存"></a>分配内存</h3><ul><li>malloc与free函数：可以申请所需内存</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;   //使用时声明</span></span></span><br><span class="line"><span class="keyword">double</span> *p;</span><br><span class="line">p = (<span class="keyword">double</span> *) <span class="built_in">malloc</span>(<span class="number">30</span> * <span class="keyword">sizeof</span>(<span class="keyword">double</span>)); <span class="comment">//申请内存块给指针</span></span><br><span class="line"><span class="comment">// p为内存的首地址，可以作为数组名使用，比变长数组更灵活</span></span><br><span class="line"><span class="built_in">free</span>(p); <span class="comment">//回收内存，配套使用，如果不使用会造成内存泄露，即耗尽</span></span><br><span class="line"><span class="comment">//malloc 可能分配不到内存，放回空指针</span></span><br><span class="line"><span class="keyword">if</span>( p == <span class="literal">NULL</span> )</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FALLURE);</span><br></pre></td></tr></table></figure><ul><li>calloc与free函数：和malloc略有区别</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> * p;</span><br><span class="line">p = (<span class="keyword">double</span> *) <span class="built_in">calloc</span>(<span class="number">30</span> , <span class="keyword">sizeof</span>(<span class="keyword">double</span>)); <span class="comment">//把块所有位置设置为0</span></span><br><span class="line"><span class="built_in">free</span>(p);</span><br></pre></td></tr></table></figure><ul><li>存储类别和动态内存分配：自动对象，静态对象，动态对象存储在不同区域</li></ul><h3 id="类型限定符"><a href="#类型限定符" class="headerlink" title="类型限定符"></a>类型限定符</h3><ul><li>恒常性：const关键字申明的对象不能，赋值，递增或者递减来修改</li><li><ul><li>指针和形参中申明const</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> * p; <span class="comment">//指向float类型的const值</span></span><br><span class="line"><span class="keyword">float</span> <span class="keyword">const</span> * p; <span class="comment">//同上</span></span><br><span class="line"><span class="keyword">float</span> * <span class="keyword">const</span> p; <span class="comment">//常量指针，不能指向其他值</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> * <span class="keyword">const</span> p; <span class="comment">//前面2个的结合</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> * p, <span class="keyword">const</span> <span class="keyword">int</span> p[])</span> <span class="comment">//两个形参意义相同，表示数组数据不能更改</span></span></span><br></pre></td></tr></table></figure><blockquote><p>const 放在<em>左边表示指针指的对象是const，放在</em>右边表示指针是const</p></blockquote><ul><li><ul><li>对全局使用const：避免数据被更改，2种策略</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 外部变量，给其他地方声明</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">1</span>;    <span class="comment">//file1.c</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> a; <span class="comment">//file2.c</span></span><br><span class="line"><span class="comment">// 使用头文件</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">1</span>; <span class="comment">//file.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"file.h"</span>       <span class="comment">//file.c</span></span></span><br></pre></td></tr></table></figure><ul><li>易变形：volatile 涉及编译器（寄存器）的优化，const和volitile同时使用时顺序不重要</li><li>新增：restrict（c99表明指针是唯一访问，并初始的方式）, _Atomic（c11并发程序中要用到的）</li><li>新位置：c99加入</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">( <span class="keyword">int</span> * <span class="keyword">const</span> a, <span class="keyword">int</span> * <span class="keyword">restrict</span> b)</span></span>; <span class="comment">//旧式</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">( <span class="keyword">int</span> a[<span class="keyword">const</span>], <span class="keyword">int</span> b[<span class="keyword">restrict</span>])</span></span>;   <span class="comment">//新式</span></span><br></pre></td></tr></table></figure><ul><li>小训练：动态分配字符（待调bug）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 20</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_n</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> words;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;words) == <span class="number">1</span> &amp;&amp; words &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> words;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"enter error!!!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">char</span> * a[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>( i++ &lt; n )&#123;</span><br><span class="line">        <span class="built_in">puts</span>(a[i<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> words, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"how many words do you wish to enter:"</span>);</span><br><span class="line">    words = get_n();                 <span class="comment">//处理输入的单词数</span></span><br><span class="line">    <span class="comment">// char * q [5] = (char (*) [5])malloc( SIZE * 5 * sizeof(char) ); </span></span><br><span class="line">    <span class="comment">//动态创建</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"enter %d words:"</span>, words);</span><br><span class="line">    <span class="keyword">while</span>( (ch = getchar()) != <span class="string">'\n'</span> )&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch == <span class="string">' '</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> * p = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>( i * <span class="keyword">sizeof</span>(<span class="keyword">char</span>) );</span><br><span class="line">            q[j] = p;</span><br><span class="line">            <span class="built_in">free</span>( p );</span><br><span class="line">            j++;</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    show(q, words);</span><br><span class="line">    <span class="built_in">free</span>( q );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《C primer plus》笔记：文件</title>
      <link href="/2015/07/10/t-book_c_005/"/>
      <url>/2015/07/10/t-book_c_005/</url>
      
        <content type="html"><![CDATA[<h1 id="文件输入输出"><a href="#文件输入输出" class="headerlink" title="文件输入输出"></a>文件输入输出</h1><h3 id="文件通信"><a href="#文件通信" class="headerlink" title="文件通信"></a>文件通信</h3><ul><li>重定向：books &gt; bklist 可能会把不必要的东西输出到文件</li><li>文件：一系列连续的字节，文本模式，二进制模式</li><li>文件模式：所有文件内容都以二进制形式存储</li><li>文本文件：最初使用二进制编码的字符表示文本</li><li>二进制文件：二进制值代表机器语言代码或数值数据或图片或音乐编码</li><li>不同操作系统处理不同 MS-DOS读文件\r\n–&gt;\n写文件\n–&gt;\r\n</li><li>I/O级别：底层I/O使用操作系统标准I/O，标准高级I/O使用stdio.h头文件的定义的（通用）</li><li>标准文件：C打开3个文件，标准输入（键盘），标准输出，标准准错误输出（显示器）</li></ul><h3 id="标准I-O"><a href="#标准I-O" class="headerlink" title="标准I/O"></a>标准I/O</h3><ul><li>好处：可移植性强，专门函数简化了操作，输入输出优势缓冲的</li><li>演示：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ch;       <span class="comment">//读取文件,存储每个字符的地方</span></span><br><span class="line">    FILE *fp;     <span class="comment">//文件指针</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(argc != <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage: %s filename \n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( (fp = fopen(argv[<span class="number">1</span>], <span class="string">"r"</span>)) == <span class="literal">NULL</span> )&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"can't open %s\n"</span>, argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>( (ch = getc(fp)) != EOF )&#123;</span><br><span class="line">        putc(ch, <span class="built_in">stdout</span>);</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"File %s has %lu characters\n"</span>, argv[<span class="number">1</span>], count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>检查命令行参数：exit()关闭文件并结束程序（0或EXIT_SUCCESS结束成功，EXIT _FALLURE结束失败）</li><li>fopen函数：打开文件，成功打开后返回文件指针（FILE*）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FILE * fp = fopen(<span class="string">"words"</span>, <span class="string">"r"</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th>模式</th><th>含义</th></tr></thead><tbody><tr><td>r</td><td>读模式</td></tr><tr><td>w</td><td>写模式（文件长度截0，可以创建新文件）</td></tr><tr><td>a</td><td>写模式（添加字符，可以创建新文件）</td></tr><tr><td>r+</td><td>更新模式（读写）</td></tr><tr><td>w+</td><td>更新模式（读写，截断，创新）</td></tr><tr><td>a+</td><td>更新模式（读写，添加，创新）</td></tr><tr><td>*b</td><td>二进制文件用法同上</td></tr></tbody></table><ul><li>getc和putc函数：与getchar,putchar类似</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ch = getchar();   ch = getc(fp);   <span class="comment">//文件输入</span></span><br><span class="line">ch = <span class="built_in">putchar</span>();   ch = putc(fpout) <span class="comment">//文件输出</span></span><br></pre></td></tr></table></figure><ul><li>文件结尾：避免读到空文件，使用入口循环</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>( (ch = getc(fp)) != EOF) &#123; putc(fpout); &#125;</span><br></pre></td></tr></table></figure><ul><li>fclose函数：关闭指定的文件，必要刷新缓冲取区</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (fclose(fp) != <span class="number">0</span> )  <span class="comment">//成功放回0,否则返回EOF</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"error in closing file %s\n"</span>, argv[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><ul><li>指向标准文件的指针</li></ul><table><thead><tr><th>标准文件</th><th>文件指针</th><th>设备</th></tr></thead><tbody><tr><td>标准输入</td><td>stdin</td><td>键盘</td></tr><tr><td>标准输出</td><td>stdou</td><td>显示器</td></tr><tr><td>标准错误</td><td>stder</td><td>显示器</td></tr></tbody></table><h3 id="文件压缩程序"><a href="#文件压缩程序" class="headerlink" title="文件压缩程序"></a>文件压缩程序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 40</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span></span>&#123;</span><br><span class="line">    FILE *in, *out;</span><br><span class="line">    <span class="keyword">int</span> ch;</span><br><span class="line">    <span class="keyword">char</span> name[N];</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    <span class="comment">//检查命令行参数</span></span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Usage:%s filename\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置输入</span></span><br><span class="line">    <span class="keyword">if</span>( (in = fopen(argv[<span class="number">1</span>], <span class="string">"r"</span>)) == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"I could not open this file\" %s \" \n "</span>, argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置输出</span></span><br><span class="line">    <span class="built_in">strncpy</span>(name, argv[<span class="number">1</span>], N - <span class="number">5</span>);</span><br><span class="line">    name[N <span class="number">-5</span>] = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="built_in">strcat</span>(name, <span class="string">".red"</span>);</span><br><span class="line">    <span class="keyword">if</span>( (out = fopen(name, <span class="string">"w"</span>)) == <span class="literal">NULL</span> )&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"I could not open this file"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//拷贝</span></span><br><span class="line">    <span class="keyword">while</span>( (ch = getc(in)) != EOF )&#123;</span><br><span class="line">        <span class="keyword">if</span> (count++ % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">            putc(ch, out);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    <span class="keyword">if</span>( fclose(in) != <span class="number">0</span> || fclose(out) != <span class="number">0</span> )</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error in closing files\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件I-O"><a href="#文件I-O" class="headerlink" title="文件I/O"></a>文件I/O</h3><ul><li>fprinf和fscanf函数：与printf和scanf类似，区别在于，前面需要第一个参数待处理的文件。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"%s\n"</span>, words);</span><br><span class="line"><span class="built_in">fscanf</span>(fp, <span class="string">"%s\n"</span>, words);</span><br></pre></td></tr></table></figure><ul><li>fgets和fputs函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fgets(buf, LEN, fp);    <span class="comment">// buf char型数组的名称，fp指针</span></span><br><span class="line"><span class="built_in">fputs</span>(buf, fp);</span><br></pre></td></tr></table></figure><h3 id="随机访问"><a href="#随机访问" class="headerlink" title="随机访问"></a>随机访问</h3><ul><li>fseek() ftell()函数：文件看成数组，fseek返回int.ftell返回long</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fseek(fp, <span class="number">0L</span>, SEEK_END); <span class="comment">//定位到文件末尾</span></span><br><span class="line"><span class="comment">// 1）FILE指针,指向待查找的文件</span></span><br><span class="line"><span class="comment">// 2）偏移量，从起始点开始要移动的距离，正负0</span></span><br><span class="line"><span class="comment">// 3）模式，SEEK_SET文件开始, SEEK_CUR当前位置，SEEK_END文件末尾</span></span><br><span class="line"><span class="comment">// 正常返回0，c出现错误返回-1</span></span><br><span class="line">ftell(fp) <span class="comment">//返回当前位置</span></span><br></pre></td></tr></table></figure><ul><li>二进制模式和文本模式：</li><li><ul><li>UNIX只有一种文件格式，不需要特殊转换，MS-DOS很多编辑器都是用ctrl+z来标记文件结尾的二进制文件和文本文件模式的另一个不同的地方，</li></ul></li><li><ul><li>MS_DOS用户\r\n来标识文件结尾,c程序会把\r\n看做成\n,对于ftell()返回值把\r\n当作一个字节来计数</li></ul></li><li>可移植性：</li><li><ul><li>二进制模式中，实现不必支持SEEK_END模式，因此无法保证程序的可移植性，更好的办法是一个一个字节读取整个文件</li></ul></li><li><ul><li>文本模式中，只有使用fseek才能保证其相应的行为</li></ul></li><li>fgetpos函数，fsetpos函数：新增的定位函数，突破long的限制</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fgetpos</span><span class="params">(FILE * <span class="keyword">restrict</span> stream, <span class="keyword">fpos_t</span> * <span class="keyword">restrict</span> pos)</span></span>; <span class="comment">// 成功返回0，失败返回非0</span></span><br><span class="line"><span class="comment">// 把fpos_t的值放在pos指向的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fsetpos</span><span class="params">(FILE * stream, <span class="keyword">const</span> <span class="keyword">fpos_t</span> * pos)</span></span>; <span class="comment">//成功返回0，失败返回非0</span></span><br><span class="line"><span class="comment">// 使用fpos_t设置文件指针指向该值指向的位置</span></span><br></pre></td></tr></table></figure><h3 id="标准IO机理"><a href="#标准IO机理" class="headerlink" title="标准IO机理"></a>标准IO机理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一步：调用fopen打开文件</span></span><br><span class="line"><span class="comment">//1）自动打开3个标准文件 </span></span><br><span class="line"><span class="comment">//2）打开文件 </span></span><br><span class="line"><span class="comment">//3）打开一个或者两个缓冲区以及其文件缓冲的数据结构 </span></span><br><span class="line"><span class="comment">//4）返回一个指向该结构的指针</span></span><br><span class="line">FILE * fp = fopen(<span class="string">"words"</span>, <span class="string">"a+"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二步：调用stdio.h中的输入函数</span></span><br><span class="line"><span class="comment">//1）文件的数据块被拷贝至缓冲区</span></span><br><span class="line"><span class="comment">//2）设置缓冲区大小，设置fp所指向结构中的值（流中当前位置和拷贝进缓冲区的字节数）</span></span><br></pre></td></tr></table></figure><h3 id="其他标准IO函数"><a href="#其他标准IO函数" class="headerlink" title="其他标准IO函数"></a>其他标准IO函数</h3><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>int ungetc(int, FILE*)</td><td>c指定的字符放回输入流</td></tr><tr><td>int fflush(FILE*)</td><td>刷新缓冲区</td></tr><tr><td>int setcbuf(FILE<em>,char </em>, int, size_t)</td><td>创建一个供io替换的缓冲区</td></tr><tr><td>size_t fread()</td><td>二进制out</td></tr><tr><td>size_t fwirte()</td><td>二进制in</td></tr></tbody></table><ul><li>size_t fwrite函数：返回sizeof运算后的类型</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> fwrite(<span class="keyword">const</span> <span class="keyword">void</span> * <span class="keyword">restrict</span> ptr, <span class="keyword">size_t</span> size, <span class="keyword">size_t</span> nmemb, FILE * <span class="keyword">restrict</span> fp);</span><br><span class="line"><span class="comment">// ptr 待写入的地址，size数据块的大小， nmemb带写入数据块的数量，fp待写入的文件</span></span><br><span class="line"><span class="keyword">char</span> buffer[<span class="number">256</span>];</span><br><span class="line">fwrite(buffer, <span class="number">256</span>, <span class="number">1</span>, fp);</span><br><span class="line"><span class="keyword">double</span> earnings[<span class="number">10</span>];</span><br><span class="line">fwrite(earings, <span class="keyword">sizeof</span>(<span class="keyword">double</span>), <span class="number">10</span>, fp);</span><br></pre></td></tr></table></figure><ul><li>size_t fread函数：返回sizeof运算后的类型</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> fwrite(<span class="keyword">void</span> * <span class="keyword">restrict</span> ptr, <span class="keyword">size_t</span> size, <span class="keyword">size_t</span> nmemb, FILE * <span class="keyword">restrict</span> fp);</span><br><span class="line"><span class="comment">// ptr 待读取文件数据在内存中的地址，size数据块的大小， nmemb带写入数据块的数量，fp待读取的文件</span></span><br><span class="line"><span class="keyword">char</span> buffer[<span class="number">256</span>];</span><br><span class="line">fwrite(buffer, <span class="number">256</span>, <span class="number">1</span>, fp);</span><br><span class="line"><span class="keyword">double</span> earnings[<span class="number">10</span>];</span><br><span class="line">fwrite(earings, <span class="keyword">sizeof</span>(<span class="keyword">double</span>), <span class="number">10</span>, fp);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《C primer plus》笔记：字符串</title>
      <link href="/2015/07/06/t-book_c_004/"/>
      <url>/2015/07/06/t-book_c_004/</url>
      
        <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h3 id="表示字符串和字符串IO"><a href="#表示字符串和字符串IO" class="headerlink" title="表示字符串和字符串IO"></a>表示字符串和字符串IO</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MSG = <span class="meta-string">"hello world!"</span>;</span></span><br><span class="line"><span class="keyword">char</span> a[MAX] = <span class="string">"hello world!"</span>;</span><br><span class="line"><span class="keyword">char</span> * p = <span class="string">"hello world!"</span>;</span><br><span class="line"><span class="built_in">puts</span>(MSG);</span><br><span class="line"><span class="built_in">puts</span>(a);</span><br><span class="line"><span class="built_in">puts</span>(p);</span><br></pre></td></tr></table></figure><h3 id="定义字符串"><a href="#定义字符串" class="headerlink" title="定义字符串"></a>定义字符串</h3><ul><li>字符串字面量：双引号括起来的内容，编译器会自动加入\n，双引号之间紧邻或者空格看作相连的</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> * a = <span class="string">"hello "</span> <span class="string">"world!"</span>;  <span class="comment">//  hello world!</span></span><br></pre></td></tr></table></figure><p>函数中使用字符串，只存储一次，被视为指向该字符串位置的指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%s, %p, %c\n"</span>, <span class="string">"hello"</span>, <span class="string">"world"</span>, *<span class="string">"ok"</span>); <span class="comment">// hello,0X000000999,o</span></span><br></pre></td></tr></table></figure><ul><li>字符串数组：和字符数组区别，两种初始化方式</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> a[<span class="number">40</span>] = <span class="string">"sadasfsdfgsdgfdgfdhfdh"</span>;    <span class="comment">//简易初始化</span></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">40</span>] = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>..<span class="number">.'</span>g', <span class="string">'\n'</span>&#125;    <span class="comment">//标准初始化</span></span><br><span class="line"><span class="keyword">char</span> a[] = <span class="string">"dsfsdfsdfdsfsdfsdf"</span>;          <span class="comment">//编译器自动计算长度</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * a = <span class="string">"sdsafsdfsdfsdfsfdf"</span>;          <span class="comment">//同上</span></span><br><span class="line"><span class="comment">//定长初始化中未被初始化的部分填充'\0'</span></span><br></pre></td></tr></table></figure><ul><li>数组形式与指针形式区别</li><li><ul><li>数组形式的a == &amp;a[0] 只能作为常量，不能进行a ++等操作，指针形式a 是可以进行a ++的</li></ul></li><li><ul><li>指针对数据类型匹配很高，指向常量的指针需要被声明为常量const char * p = “abc”;</li></ul></li><li><ul><li>意味着不能用p改变数据的值，但可以改变p的位置</li></ul></li><li><ul><li>初始化数组把静态存储区的字符串拷贝给数组，初始化指针只是把字符串的地址给指针</li></ul></li><li>字符串与数组</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相当于字符的二维数组</span></span><br><span class="line"><span class="keyword">char</span> f[<span class="number">3</span>][<span class="number">4</span>] = &#123;&#123;<span class="string">"ab"</span>&#125;,&#123;<span class="string">"cd"</span>&#125;,&#123;<span class="string">"e"</span>&#125;&#125;;  <span class="comment">// ab\0, cd\0, e\0\0</span></span><br><span class="line"><span class="comment">//相当于3个字符串指针</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * p[<span class="number">3</span>] = &#123;&#123;<span class="string">"ab"</span>&#125;,&#123;<span class="string">"cd"</span>&#125;,&#123;<span class="string">"e"</span>&#125;&#125;; <span class="comment">// ab\0, cd\0, e\0 自动获取大小</span></span><br></pre></td></tr></table></figure><ul><li>字符串与指针：指针拷贝也只拷贝地址，没有拷贝整个字符串</li></ul><h3 id="字符串输入"><a href="#字符串输入" class="headerlink" title="字符串输入"></a>字符串输入</h3><ul><li>分配空间：用显示声明来输入，否则会丢失数据</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *name; <span class="built_in">scanf</span>(<span class="string">"%s"</span>, name);   <span class="comment">//不好</span></span><br><span class="line"><span class="keyword">char</span> name[SIZE]; <span class="built_in">scanf</span>(<span class="string">"%s"</span>, name); <span class="comment">//可以的</span></span><br></pre></td></tr></table></figure><ul><li>gets()函数：已废弃，并不知道字符串有多长，输入字符过长导致缓冲区溢出，可能导致其他数据被擦除</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line">    gets(name);</span><br><span class="line">    <span class="built_in">puts</span>(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//gcc 编译没报任何消息</span></span><br><span class="line"><span class="comment">//fgdfgdfgdfgfdgfdg</span></span><br><span class="line"><span class="comment">//fgdfgdfgdfgfdgfdg</span></span><br></pre></td></tr></table></figure><blockquote><p>实际情况：大多数编译器仍支持</p></blockquote><ul><li>fgets()函数：可以替代gets(),可扩展，可以从文件输入，保留换行符，需要手动设置为空字符</li><li><ul><li>读一行：读到换行或者读到n个字符，最终打印的n-1个字符<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">10</span>];</span><br><span class="line">    fgets(a, <span class="number">7</span>, <span class="built_in">stdin</span>);  <span class="comment">//读了dsfdsf个字符+'\0'</span></span><br><span class="line">    <span class="built_in">fputs</span>(a, <span class="built_in">stdout</span>);    <span class="comment">//输出dsfdsf\0 没有+'\n' </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//dsfdsfsdgfdgdffdg   </span></span><br><span class="line"><span class="comment">//dsfdsf</span></span><br></pre></td></tr></table></figure></li></ul></li><li><ul><li>连续读取，fgets可以存储换行符，读完一段，继续读剩下的，可以直接读到文件尾部<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> word[N];</span><br><span class="line">    <span class="keyword">while</span>( fgets(word, N, <span class="built_in">stdin</span>) != <span class="literal">NULL</span> &amp;&amp; word[<span class="number">0</span>] != <span class="string">'\n'</span> )&#123;</span><br><span class="line">        <span class="built_in">fputs</span>(word, <span class="built_in">stdout</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><ul><li>每行只读一定数量的字符，并丢弃了换行符</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> word[N];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">while</span>( fgets(word, N, <span class="built_in">stdin</span>) != <span class="literal">NULL</span> &amp;&amp; word[<span class="number">0</span>] != <span class="string">'\n'</span>)&#123;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(word[i] != <span class="string">'\n'</span> &amp;&amp; word[i] != <span class="string">'\0'</span>)</span><br><span class="line">            i++;             <span class="comment">//不是换行符或者空字符跳过</span></span><br><span class="line">        <span class="keyword">if</span>(word[i] == <span class="string">'\n'</span>)</span><br><span class="line">            word[i] = <span class="string">'\0'</span>; <span class="comment">//遇到换行符，转空字符</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">while</span>(getchar() != <span class="string">'\n'</span>) <span class="comment">//读到空字符，丢弃剩余</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">fputs</span>(word, <span class="built_in">stdout</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>空字符于空指针：空字符(‘\0’)与空指针(NULL)都可以用0表示，但空字符是字符型(1字节)，空指针是指针型(4字节)</p></blockquote><ul><li>gets_s()函数：c11新增，可扩展，只从标准输入中输入，丢弃换行符，输入太长时更安全</li><li>s_gets()函数：fgets()变体，遇到换行符设为空，遇到空丢弃其余字符</li><li>scanf()函数：可指定宽度，但遇空格即终止，只能用于输入单词</li></ul><h3 id="字符串输出"><a href="#字符串输出" class="headerlink" title="字符串输出"></a>字符串输出</h3><ul><li>puts()函数：使用字符串地址作参数，自动添加换行符</li><li>fputs()函数：用于文件输出，不添加换行符，遇fgets()配对使用</li><li>printf()函数：不自动加换行符，打印多个字符更简单</li></ul><h3 id="自定义输入输出"><a href="#自定义输入输出" class="headerlink" title="自定义输入输出"></a>自定义输入输出</h3><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><table><thead><tr><th>(类型)函数名</th><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>int    strlen</td><td>char *</td><td>统计字符串长度</td></tr><tr><td>char * strcat</td><td>char <em>, char </em></td><td>把第二个字符串拼接在第一个上</td></tr><tr><td>char * strncat</td><td>char <em>, char </em>, int</td><td>把第二个字符串指定长度添加到第一个字符串上</td></tr><tr><td>int    strcmp</td><td>char <em>, char </em></td><td>比较两个字符串，相同返回0，二大于1返回正，否则返回负</td></tr><tr><td>int    strncmp</td><td>char <em>, char </em>, int</td><td>限定比较的字符串长度</td></tr><tr><td>char * strcpy</td><td>char <em>, char </em></td><td>把第二个拷贝到第一个</td></tr><tr><td>char * strcpy</td><td>char <em>, char </em> int</td><td>限制拷贝的字符串长度</td></tr><tr><td>void  sprintf</td><td>char *, 格式化, name</td><td>将printf的内容存储在一个字符串中</td></tr></tbody></table><h3 id="字符串排序"><a href="#字符串排序" class="headerlink" title="字符串排序"></a>字符串排序</h3><ul><li>示例</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 81  <span class="comment">//字符串长度</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIM 20   <span class="comment">//最大行数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HALT <span class="meta-string">""</span>  <span class="comment">//读到空字符结束</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">strSort</span><span class="params">(<span class="keyword">char</span> * str [], <span class="keyword">int</span> num)</span></span>; <span class="comment">//排序函数</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">strGets</span><span class="params">(<span class="keyword">char</span> * , <span class="keyword">int</span> )</span></span>;    <span class="comment">//输入字符串函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> in[LIM][SIZE];</span><br><span class="line">    <span class="keyword">char</span> * pstr[LIM];</span><br><span class="line">    <span class="keyword">int</span> ct = <span class="number">0</span>, k = <span class="number">0</span>; <span class="comment">//输入输出计数</span></span><br><span class="line">    <span class="keyword">while</span>(ct &lt; LIM &amp;&amp; strGets(in[ct], SIZE) != <span class="literal">NULL</span> &amp;&amp; in[ct][<span class="number">0</span>] != <span class="string">'\0'</span>)&#123;</span><br><span class="line">        pstr[ct] = in[ct];</span><br><span class="line">        ct++;          <span class="comment">//输入字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">    strSort(pstr, ct); <span class="comment">//排序字符串</span></span><br><span class="line">    <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; ct; k++)</span><br><span class="line">        <span class="built_in">puts</span>(pstr[k]); <span class="comment">//输出字符串</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//选择排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">strSort</span><span class="params">(<span class="keyword">char</span> * str [], <span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *temp;</span><br><span class="line">    <span class="keyword">int</span> top, seek;</span><br><span class="line">    <span class="keyword">for</span> (top = <span class="number">0</span>; top &lt; num<span class="number">-1</span>; ++top)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (seek = top + <span class="number">1</span>; seek &lt; num; ++seek)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>( <span class="built_in">strcmp</span>(str[top], str[seek]) &gt; <span class="number">0</span> )</span><br><span class="line">                temp = str[top];</span><br><span class="line">                str[top] = str[seek];</span><br><span class="line">                str[seek] = temp; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自定义输入函数</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">strGets</span><span class="params">(<span class="keyword">char</span> * str, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> * ret_val;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    ret_val = fgets(str, n, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret_val)&#123;</span><br><span class="line">        <span class="keyword">while</span>(str[i] != <span class="string">'\n'</span> &amp;&amp; str[i] != <span class="string">'\0'</span>)</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">if</span>(str[i] == <span class="string">'\n'</span>)</span><br><span class="line">            str[i] = <span class="string">'\0'</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">while</span>(getchar() != <span class="string">'\n'</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret_val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>排序单位是指针：排序的是指针而不是字符串本身</li><li>选择排序算法</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//伪代码</span></span><br><span class="line"><span class="keyword">for</span> n = 首元素 to n=倒数第<span class="number">2</span>个元素</span><br><span class="line">    找出剩余元素中的最大元素，并将其放在第n个元素</span><br><span class="line"><span class="comment">//C代码</span></span><br><span class="line"><span class="keyword">for</span>(top = <span class="number">0</span>; top &lt; n - <span class="number">1</span>; top++)</span><br><span class="line">    <span class="keyword">for</span>(seek = top + <span class="number">1</span>; seek &lt; n; seek++)</span><br><span class="line">        <span class="keyword">if</span>(a[top] &gt; a[seek])</span><br><span class="line">            swap(&amp;a[top], &amp;a[seek]);</span><br></pre></td></tr></table></figure><h3 id="字符串和ctype-h字符函数"><a href="#字符串和ctype-h字符函数" class="headerlink" title="字符串和ctype.h字符函数"></a>字符串和ctype.h字符函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="命令行参数：int-argc-char-argv"><a href="#命令行参数：int-argc-char-argv" class="headerlink" title="命令行参数：int argc, char *argv[]"></a>命令行参数：int argc, char *argv[]</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    argc <span class="comment">// 命令行字符串数量</span></span><br><span class="line">    argv <span class="comment">// 字符串数组指针 argv[n] 表示第n个字符串的地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = argc;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, argc);</span><br><span class="line">    <span class="keyword">while</span>( i-- &gt;  <span class="number">1</span> )  </span><br><span class="line">        <span class="built_in">puts</span>(argv[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// --i情况  (没想到argc = 4)  (- -)</span></span><br><span class="line"><span class="comment">// test86 see you later  0 1 2 3 </span></span><br><span class="line"><span class="comment">// 1) (i = 4- 1 = 3, i &gt; 0) -&gt; a[3]</span></span><br><span class="line"><span class="comment">// 2) (i = 3- 1 = 2, i &gt; 0) -&gt; a[2]</span></span><br><span class="line"><span class="comment">// i--情况</span></span><br><span class="line"><span class="comment">// 1) (i = 4 &gt; 0, i = 3 - 1 = 2) -&gt; a[3]</span></span><br><span class="line"><span class="comment">// 2) (i = 3 &gt; 0, i = 2 - 1 = 2) -&gt; a[2]</span></span><br><span class="line"><span class="comment">// 3) (i = 2 &gt; 0, i = 1 - 1 = 1) -&gt; a[1]</span></span><br></pre></td></tr></table></figure><h3 id="字符串转数字"><a href="#字符串转数字" class="headerlink" title="字符串转数字"></a>字符串转数字</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>小训练：逆转字符串</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reStr</span><span class="params">(<span class="keyword">char</span> * a, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> b[n];</span><br><span class="line">    <span class="keyword">while</span>(i++ &lt; n)</span><br><span class="line">        b[i] = a[i<span class="number">-1</span>];</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n-- &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        a[i] = b[n];</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>小训练：命令行输出</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pf</span><span class="params">(<span class="keyword">char</span> * , <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">toUpper</span><span class="params">(<span class="keyword">char</span> * , <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">toLower</span><span class="params">(<span class="keyword">char</span> * , <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[N];</span><br><span class="line">    <span class="keyword">switch</span> (argv[<span class="number">1</span>][<span class="number">1</span>])&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'p'</span>: pf(a, N); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'u'</span>: toUpper(a, N); <span class="keyword">break</span>;     </span><br><span class="line">        <span class="keyword">case</span> <span class="string">'l'</span>: toLower(a, N); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span> : <span class="built_in">puts</span>(<span class="string">"enter error!"</span>); <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//原样输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pf</span><span class="params">(<span class="keyword">char</span> * a, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>( fgets(a, n, <span class="built_in">stdin</span>) != <span class="literal">NULL</span> &amp;&amp; a[<span class="number">0</span>] != <span class="string">'\n'</span>)&#123;</span><br><span class="line">        <span class="built_in">fputs</span>(a, <span class="built_in">stdout</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出大写</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">toLower</span><span class="params">(<span class="keyword">char</span> * a, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">while</span>( fgets(a, n, <span class="built_in">stdin</span>) != <span class="literal">NULL</span> &amp;&amp; a[<span class="number">0</span>] != <span class="string">'\n'</span>)&#123;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i++ &lt; n<span class="number">-1</span>)&#123;     <span class="comment">// i=0&lt;9 i=1 a[0], i=1&lt;9 i=2 a[1] ---&gt; i=8&lt;9 i=9 a[8]</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isupper</span>(a[i<span class="number">-1</span>]))</span><br><span class="line">                a[i<span class="number">-1</span>] = <span class="built_in">tolower</span>(a[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fputs</span>(a, <span class="built_in">stdout</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出小写</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">toUpper</span><span class="params">(<span class="keyword">char</span> * a, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">while</span>( fgets(a, n, <span class="built_in">stdin</span>) != <span class="literal">NULL</span> &amp;&amp; a[<span class="number">0</span>] != <span class="string">'\n'</span>)&#123;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i++ &lt; n<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">islower</span>(a[i<span class="number">-1</span>]))</span><br><span class="line">                a[i<span class="number">-1</span>] = <span class="built_in">toupper</span>(a[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fputs</span>(a, <span class="built_in">stdout</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《C primer plus》笔记：函数</title>
      <link href="/2015/07/04/t-book_c_003/"/>
      <url>/2015/07/04/t-book_c_003/</url>
      
        <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h3 id="复习函数"><a href="#复习函数" class="headerlink" title="复习函数"></a>复习函数</h3><ul><li>什么是函数：完成特定任务的独立程序代码单元</li><li>函数的作用：省去重复多于代码，提高代码可读性，方便修改</li><li>函数的构成：</li><li><ul><li>函数原型：声明函数，告诉编译器函数的类型</li></ul></li><li><ul><li>函数调用：使用函数</li></ul></li><li><ul><li>函数定义：实现函数</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">char</span> s)</span></span>; <span class="comment">//申明函数</span></span><br><span class="line"></span><br><span class="line">fun(<span class="string">'a'</span>); <span class="comment">//调用函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">char</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;        <span class="comment">//实现函数</span></span><br></pre></td></tr></table></figure><ul><li>函数形参：局部变量，内部私有，每个变量要求声明类型</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;   <span class="comment">//也是合法的</span></span><br></pre></td></tr></table></figure><ul><li>函数实参：实参是具体的值, 会赋值给形参</li><li>返回值：测试函数的程序称为驱动程序，return语句会终止函数并把控制交给主调函数</li><li>无参数：注意加void</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><ul><li>定义：C允许函数调用自己，这种调用称为递归</li><li>演示：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">up_and_down</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    up_and_down(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">up_and_down</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d, %p\n"</span>, n, &amp;n);</span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">4</span>)</span><br><span class="line">        up_and_down(n+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d, %p\n"</span>, n, &amp;n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1, 0060FF20</span></span><br><span class="line"><span class="comment">// 2, 0060FF00</span></span><br><span class="line"><span class="comment">// 3, 0060FEE0</span></span><br><span class="line"><span class="comment">// 4, 0060FEC0</span></span><br><span class="line"><span class="comment">// 4, 0060FEC0</span></span><br><span class="line"><span class="comment">// 3, 0060FEE0</span></span><br><span class="line"><span class="comment">// 2, 0060FF00</span></span><br><span class="line"><span class="comment">// 1, 0060FF20</span></span><br></pre></td></tr></table></figure><ul><li>原理：</li><li><ul><li>每次调用都有自己的变量，变量都是n但值不同</li></ul></li><li><ul><li>每次调用完之后都会返回一次，逐级返回</li></ul></li><li><ul><li>调用之前的顺序执行，调用之后的倒序返回</li></ul></li><li><ul><li>没有拷贝函数代码，可以代替循环，可以被i循环代替</li></ul></li><li><ul><li>必须包含让递归停止的语句</li></ul></li><li>尾递归：递归调用置于函数的末尾，相当于循环，能使用选择循环，莫使用递归（速度，内存优势）</li><li>递归和倒序计算</li><li>整数化二进制</li><li><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">to_binary</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    r = n % <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>( n &gt;= <span class="number">2</span> )</span><br><span class="line">        to_binary( n/<span class="number">2</span> );</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, r==<span class="number">0</span> ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>递归优缺点：<strong>为很多程序提供了简单的解决方案，但效率和消耗不令人满意</strong></p></li></ul><h3 id="多文件编译"><a href="#多文件编译" class="headerlink" title="多文件编译"></a>多文件编译</h3><ul><li>预处理和申明函数放在头文件中</li><li>使用命令编译(linux)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc file1.c file2.c   <span class="comment">//一起编译</span></span><br><span class="line">gcc file1.c file2.o</span><br></pre></td></tr></table></figure><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><ul><li>本质：值为内存地址的变量</li><li>作用：存储变量的地址</li><li>取地址符&amp;：得到变量的地址 &amp;a 表示a的地址</li><li>解引用符<em>：找到存储在地址中的值 </em>&amp;a ==&gt; a</li><li>用%p打印地址</li><li>声明与赋值：严格区分开</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> * pi;     <span class="comment">//声明int型指针</span></span><br><span class="line">pi = &amp;a;      <span class="comment">//给指针赋值</span></span><br><span class="line"><span class="keyword">int</span> *pi = &amp;a; <span class="comment">//上面两步合并成一步</span></span><br><span class="line">b = *pi;      <span class="comment">//获取pi所指向地址中存储变量的值并赋值给b</span></span><br></pre></td></tr></table></figure><ul><li>使用指针在函数间通信：函数传值无法真正的改变实参的值，传地址可以改变实参的值。</li><li>交换两个整数值：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *, <span class="keyword">int</span> *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>, b =<span class="number">2</span>;</span><br><span class="line">    swap(&amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d, %d\n"</span>, a, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *p, <span class="keyword">int</span> *q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    temp = *p;</span><br><span class="line">    *p = *q;</span><br><span class="line">    *q = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>小训练1：10进制转任何进制</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">to_base_n</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    r = x%n;</span><br><span class="line">    <span class="keyword">if</span>(x &gt;=  n)</span><br><span class="line">        to_base_n(x/n, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, r );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>小训练2：Fibonacci递归与非递归</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fibonacciRec</span><span class="params">(<span class="keyword">int</span>)</span></span>; <span class="comment">//递归</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span>)</span></span>;    <span class="comment">//非递归</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, fibonacciRec(n) );</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, fibonacci(n) );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fibonacciRec</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span> || n == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> fibonacciRec(n<span class="number">-1</span>) + fibonacciRec(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, fib1 = <span class="number">1</span>, fib2 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>( n == <span class="number">1</span> || n == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">3</span> ; i &lt;= n; i++)&#123;</span><br><span class="line">        fib2 = fib1 + fib2;</span><br><span class="line">        fib1 = fib2 - fib1; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fib2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《C primer plus》笔记：数组</title>
      <link href="/2015/07/03/t-book_c_002/"/>
      <url>/2015/07/03/t-book_c_002/</url>
      
        <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><ul><li><p>声明：和声明变量一样，但是数组不能直接赋值给它，可以初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br></pre></td></tr></table></figure></li><li><p>初始化：声明并初始化并非赋值，不允许先声明后直接赋值</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>] = &#123;<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span>，<span class="number">5</span>，<span class="number">6</span>，<span class="number">6</span>，<span class="number">7</span>，<span class="number">7</span>，<span class="number">8</span>&#125;; <span class="comment">//可读可写</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> b[<span class="number">10</span>] = = &#123;<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span>，<span class="number">5</span>，<span class="number">6</span>，<span class="number">6</span>，<span class="number">7</span>，<span class="number">7</span>，<span class="number">8</span>&#125;;<span class="comment">//只读数组</span></span><br></pre></td></tr></table></figure><ul><li>未完全初始化：<strong>不初始化，数组里面同变量一样全是垃圾值，如果部分初始化，其余值为0</strong></li><li>指定初始化器：C99增加的特性，可以指定某个位置的值</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>] = <span class="number">10</span>, <span class="number">5</span>, <span class="number">6</span>, [<span class="number">9</span>] = <span class="number">20</span>&#125;;</span><br><span class="line"><span class="comment">// 1, 2, 3, 0, 0, 10, 5, 6, 0, 20</span></span><br><span class="line"><span class="comment">//直接到指定的值给其赋值，中间未赋值的设置为0</span></span><br></pre></td></tr></table></figure><ul><li>赋值：通过循环依次给数组赋值，<strong>不允许作为单元给数组赋值</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;SIZE; i++)</span><br><span class="line">    a[i] = i;</span><br></pre></td></tr></table></figure><ul><li>边界：使用时要防止下标越界，gcc编译器允许编译，但是越界的值是垃圾值<blockquote><p>编译器是相信程序员的，程序员最好声明数组时，用符号常量来表示数组大小</p></blockquote></li><li>变长数组（VLA）：c90不允许，c99允许，c11可选（不是必备）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[a];   <span class="comment">//a为变量，非常量</span></span><br></pre></td></tr></table></figure><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><ul><li>申明：第一个是行，第二个是列</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>];</span><br></pre></td></tr></table></figure><ul><li>初始化：2种方式</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123;</span><br><span class="line">                &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;,</span><br><span class="line">                &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;,</span><br><span class="line">                &#123;<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>&#125;</span><br><span class="line">            &#125;;</span><br><span class="line">    <span class="comment">// 3行4列</span></span><br></pre></td></tr></table></figure><ul><li>赋值：使用双重循环进行赋值</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(a = <span class="number">0</span>; a &lt; ROWS; a++)</span><br><span class="line">    <span class="keyword">for</span>( b = <span class="number">0</span> ; b &lt; COLS; b++)</span><br><span class="line">        arr[a][b] = a + b;</span><br></pre></td></tr></table></figure><h3 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h3><ul><li>指针与数组的联系：数组名是数组首元素的地址,首地址加1是下一个元素的地址</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>];    <span class="comment">// a == &amp;a[0];</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 10</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">short</span> a[SIZE] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">double</span> b[SIZE] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">short</span> i, *pa = a;</span><br><span class="line">    <span class="keyword">double</span> *pb = b;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"pa%d point %p\n"</span>, i, pa++);</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"pb%d point %p\n"</span>, i, pb++);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// pa0 point 0060FF00</span></span><br><span class="line"><span class="comment">// pa1 point 0060FF02</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pb0 point 0060FEB0</span></span><br><span class="line"><span class="comment">// pb1 point 0060FEB8</span></span><br></pre></td></tr></table></figure><blockquote><p>系统中，地址是按字节编址，而在c语言中指针加1是指增加一个存储单元，而不是固定的字节</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a[SIZE]; <span class="comment">// a+5 == &amp;a[0+5]  *(a+5) == a[5]</span></span><br><span class="line">*a+<span class="number">1</span>  ==&gt; (*a)+<span class="number">1</span> ==&gt; a[<span class="number">0</span>]+<span class="number">1</span></span><br><span class="line">*(a+<span class="number">1</span>) ==&gt; a[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="数组的传递"><a href="#数组的传递" class="headerlink" title="数组的传递"></a>数组的传递</h3><ul><li>函数原型与定义（数组）：<strong>通过传指针的方式，传数组</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> *， <span class="keyword">int</span>)</span></span>;   <span class="comment">//通过指针传递（数组首地址）</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> [], <span class="keyword">int</span>)</span></span>;   <span class="comment">//等效1，提醒读者是数组</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> * a, <span class="keyword">int</span> n)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>调用数组：<strong>传递数组首地址</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(a, SIZE);   <span class="comment">//a为数组名， SZIE为数组大小</span></span><br></pre></td></tr></table></figure><ul><li>指针形参：传2个指针表示数组的开始和结束</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> * start, <span class="keyword">int</span> * end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(start &lt; end)&#123;</span><br><span class="line">        sum += *start;</span><br><span class="line">        start++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>是否可以 sum += *start++ ? 答案是可以的</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 4</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> * start, <span class="keyword">int</span> * end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(start &lt; end)&#123;</span><br><span class="line">        sum += *start++;</span><br><span class="line">        <span class="comment">//分析 * ++（后缀） 同优先级右结合</span></span><br><span class="line">        <span class="comment">//步骤分解 1. start先使用用 sum = sum + *start;</span></span><br><span class="line">        <span class="comment">//        2. start = start + 1;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[SIZE] = &#123;<span class="number">1</span>, <span class="number">2</span> , <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, sum(a, a+SIZE));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 10  正确</span></span><br></pre></td></tr></table></figure><p><strong> 另外两种形式又怎样呢？ </strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *p1, *p2, *p3;</span><br><span class="line">    p1 = p2 = p3 = a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d,%d\n"</span>, *p1, *p1++, *p1); </span><br><span class="line">    <span class="comment">//分析: 函数中参数的传递的顺序是从右往左传递</span></span><br><span class="line">    <span class="comment">//     1.*p1 = 1  ==&gt; no3 = 1</span></span><br><span class="line">    <span class="comment">//     2.*p1++ ==&gt; *p1 = 1 , p1 += 1 ==&gt; no2 = 1</span></span><br><span class="line">    <span class="comment">//     3.*p1 ==&gt; a[1] ==&gt; no3 = 2</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d,%d\n"</span>, *p2, (*p2)++, *p2);</span><br><span class="line">    <span class="comment">//     1.*p2 = 1  ==&gt; no3 = 1</span></span><br><span class="line">    <span class="comment">//     2.(*p2)++ ==&gt; *p2 = a[0], no2 = 1, a[0] = 2    </span></span><br><span class="line">    <span class="comment">//     3.*p2 = a[0] = 2 ==&gt; no1 = 2;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d,%d\n"</span>, *p3, *++p3, *p3);</span><br><span class="line">    <span class="comment">//     1.*p3 = a[0]  ==&gt; no3 = 2</span></span><br><span class="line">    <span class="comment">//     2.*++p3 ==&gt; p3= p3+1 = &amp;a[1] =&gt;   no2 = *&amp;a[1] = 2</span></span><br><span class="line">    <span class="comment">//     3.*p3 = a[1] = 2 ==&gt; no1 = 2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 1 1</span></span><br><span class="line"><span class="comment">// 2 1 1</span></span><br><span class="line"><span class="comment">// 2 2 2</span></span><br></pre></td></tr></table></figure><blockquote><p>函数中参数的传递的顺序是从右往左传递</p></blockquote><h3 id="指针操作"><a href="#指针操作" class="headerlink" title="指针操作"></a>指针操作</h3><ul><li>赋值</li><li>解引用</li><li>取地址</li><li>与整数相加</li><li>递增</li><li>与整数相减</li><li>递减</li><li>求差</li><li>比较</li></ul><h3 id="保护数组数据"><a href="#保护数组数据" class="headerlink" title="保护数组数据"></a>保护数组数据</h3><ul><li>原因：通过地址传的数组都是原始数据，可以改变<br>但有些时候不需要改变数组的原始数据</li><li>对形参使用const:不需要改变数组内容时，最好加上const</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(coust <span class="keyword">int</span> *, <span class="keyword">int</span>)</span></span>;    <span class="comment">//不能完全保护</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> [], <span class="keyword">int</span>)</span></span>;   <span class="comment">//完全保护</span></span><br></pre></td></tr></table></figure><ul><li>const其他内容：const比#define更加灵活，不应该把const数组作实参传递</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>;       <span class="comment">//PI值不能被改变</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a[SIZE] = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;  <span class="comment">//数组值不能被改变</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p = a;             <span class="comment">//将int类型声明为const，不能用p来改变a的值</span></span><br><span class="line"><span class="comment">//可以用数组改变其值，p也可以指向其他变量</span></span><br><span class="line"><span class="keyword">int</span> * <span class="keyword">const</span> p = a;            <span class="comment">//常量指针不能指向其他地方</span></span><br><span class="line"><span class="comment">//可以修改指向的值</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span> p = a;      <span class="comment">//不能指向其他地方，也不能通过p来改变变量的值</span></span><br></pre></td></tr></table></figure><h3 id="指针和多维数组"><a href="#指针和多维数组" class="headerlink" title="指针和多维数组"></a>指针和多维数组</h3><ul><li>首地址之间的关系：a == a[0] == &amp;a[0][0] 值虽然相同，但代表的含义不同</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123;</span><br><span class="line">                &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">                &#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;</span><br><span class="line">                &#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">1</span>&#125;</span><br><span class="line">            &#125;;</span><br><span class="line"><span class="comment">// a == &amp;a[0][0];     二维数组的首地址</span></span><br><span class="line"><span class="comment">// a[0] == &amp;a[0][0];   作为第一个数组名a[0]的首地址也为二维数组的首地址</span></span><br><span class="line"><span class="comment">// 即有 a == a[0]  值虽然相同，但代表的含义不同</span></span><br></pre></td></tr></table></figure><ul><li><p>解引用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a           &amp;a[<span class="number">0</span>][<span class="number">0</span>]    二维数组首地址 </span><br><span class="line">a+<span class="number">2</span>         &amp;a[<span class="number">2</span>]       二维数组第<span class="number">3</span>个元素地址</span><br><span class="line">*(a+<span class="number">2</span>)      &amp;a[<span class="number">2</span>][<span class="number">0</span>]    二维数组第<span class="number">3</span>个元素的首地址</span><br><span class="line">*(a+<span class="number">2</span>)+<span class="number">1</span>    &amp;a[<span class="number">2</span>][<span class="number">1</span>]    二维数组第<span class="number">3</span>个元素的第二个元素的地址</span><br><span class="line">*(*(a+<span class="number">2</span>)+<span class="number">1</span>) a[<span class="number">2</span>][<span class="number">1</span>]     二维数组第<span class="number">3</span>个元素的第二个元素的值</span><br></pre></td></tr></table></figure></li><li><p>地址步长：a + 1 跨一个数组元素， *a + 1 跨一个数元素</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>指向多维数组的指针：[]优先级高于*,所以一定要加（）</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> (*p) [<span class="number">2</span>];  <span class="comment">//声明含有两个int的数组</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">p = a;         <span class="comment">//指向二维数组a</span></span><br><span class="line"><span class="keyword">int</span> * p[<span class="number">2</span>];    <span class="comment">//声明一个含有两个指针的数组</span></span><br></pre></td></tr></table></figure><ul><li>指针兼容性：指针之间类型没有隐式转化，类型不匹配会编译出错</li><li>多维数组与函数：形参3种写法,指针式无法省略参数会引发歧义</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int sum(int (*p)[COLS], int ROWS);  //指针式</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a[][COLS], <span class="keyword">int</span> ROWS)</span></span>;   <span class="comment">//数组式</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> [][COLS], <span class="keyword">int</span> ROWS)</span></span>;    <span class="comment">//数组略参式</span></span><br></pre></td></tr></table></figure><ul><li>变长数组：变长数组并不能改变大小，只是在初始化的时候可以用变量来初始化大小</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a[rows][cols], <span class="keyword">int</span> rows, <span class="keyword">int</span> cols)</span></span>; <span class="comment">//无效顺序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> rows, <span class="keyword">int</span> cols, <span class="keyword">int</span> a[rows][cols])</span></span>; <span class="comment">//有效</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span> a[*][*])</span></span>; <span class="comment">//省略形参名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">80</span>;</span><br><span class="line"><span class="keyword">int</span> sum[SIZE]; c11允许 ,c90好像不允许</span><br></pre></td></tr></table></figure><ul><li>复合字面量：C99加入的 { 2，3，4，5，9 } </li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>] = &#123;<span class="number">10</span> ,<span class="number">20</span>&#125;; <span class="comment">//初始化数组</span></span><br><span class="line">(<span class="keyword">int</span> [<span class="number">2</span>]) &#123;<span class="number">10</span>, <span class="number">20</span>&#125;;  <span class="comment">//初始化匿名数组，必须在创建的同时使用它</span></span><br><span class="line">(<span class="keyword">int</span> []) &#123;<span class="number">10</span>, <span class="number">20</span>&#125;;   <span class="comment">//省略大小，编译器自动计算</span></span><br><span class="line"><span class="keyword">int</span> *p = (<span class="keyword">int</span> []) &#123;<span class="number">10</span>, <span class="number">20</span>&#125;; <span class="comment">//首地址给指针p</span></span><br><span class="line">sum( (<span class="keyword">int</span> [])&#123;<span class="number">10</span>, <span class="number">20</span>&#125;, SIZE );  <span class="comment">//用作实参</span></span><br></pre></td></tr></table></figure><ul><li>小训练：一维数组3种拷贝函数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 5</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cp_arr</span><span class="params">(<span class="keyword">double</span> [], <span class="keyword">const</span> <span class="keyword">double</span> [], <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cp_ptr</span><span class="params">(<span class="keyword">double</span> [], <span class="keyword">const</span> <span class="keyword">double</span> *, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cp_ptrs</span><span class="params">(<span class="keyword">double</span> *, <span class="keyword">const</span> <span class="keyword">double</span> *, <span class="keyword">const</span> <span class="keyword">double</span> *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_arr</span><span class="params">(<span class="keyword">double</span> [], <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> source[N] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">double</span> target1[N], target2[N], target3[N];</span><br><span class="line">    cp_arr(target1, source, N);</span><br><span class="line">    cp_ptr(target2, source, N);</span><br><span class="line">    cp_ptrs(target3, source, source+N);</span><br><span class="line">    show_arr(target1, N);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    show_arr(target2, N);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    show_arr(target3, N);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cp_arr</span><span class="params">(<span class="keyword">double</span> target[], <span class="keyword">const</span> <span class="keyword">double</span> source[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        target[i] = source[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cp_ptr</span><span class="params">(<span class="keyword">double</span> target[], <span class="keyword">const</span> <span class="keyword">double</span> *source, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        target[i] = *(source+i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cp_ptrs</span><span class="params">(<span class="keyword">double</span> target[], <span class="keyword">const</span> <span class="keyword">double</span> *source_start, <span class="keyword">const</span> <span class="keyword">double</span> *source_end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(source_start &lt; source_end)&#123;</span><br><span class="line">        *target = *source_start++;</span><br><span class="line">        target++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_arr</span><span class="params">(<span class="keyword">double</span> a[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf "</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>小训练：二维数组处理函数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROWS 3 <span class="comment">//行数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COLS 5 <span class="comment">//列数</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getArr</span><span class="params">(<span class="keyword">double</span> [][COLS] ,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">averageGroup</span><span class="params">(<span class="keyword">double</span> [], <span class="keyword">const</span> <span class="keyword">double</span> [][COLS], <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">average</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span> [][COLS], <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span> [][COLS], <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">double</span> *, <span class="keyword">double</span> *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">double</span> [], <span class="keyword">int</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> arr[ROWS][COLS] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">double</span> aveGroup[ROWS] = &#123;<span class="number">0</span>&#125;; <span class="comment">//注意初始化</span></span><br><span class="line">    <span class="keyword">double</span> ave = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> m = <span class="number">0</span>;</span><br><span class="line">    getArr(arr, ROWS);</span><br><span class="line">    averageGroup(aveGroup, arr, ROWS);</span><br><span class="line">    ave = average(arr, ROWS);</span><br><span class="line">    m = max(arr, ROWS);</span><br><span class="line">    show(aveGroup, ROWS, ave, m);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//给二维数组赋值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getArr</span><span class="params">(<span class="keyword">double</span> a[][COLS], <span class="keyword">int</span> rows)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; rows; ++i)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; COLS; ++j)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;a[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求每行数据的平均值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">averageGroup</span><span class="params">(<span class="keyword">double</span> b[], <span class="keyword">const</span> <span class="keyword">double</span> a[][COLS], <span class="keyword">int</span> rows)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; rows; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; COLS; ++j)</span><br><span class="line">            sum += a[i][j]; </span><br><span class="line">        b[i] = sum/rows;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求所有数据的平均值</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">average</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span> a[][COLS], <span class="keyword">int</span> rows)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; rows; ++i)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; COLS; ++j)</span><br><span class="line">            sum += a[i][j]; </span><br><span class="line">    <span class="keyword">return</span> sum/(COLS*rows);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求二维数组的最大值</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span> a[][COLS], <span class="keyword">int</span> rows)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; rows; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; COLS; ++j)</span><br><span class="line">            <span class="keyword">if</span>(a[i][j] &gt; a[i][j+<span class="number">1</span>])</span><br><span class="line">                swap(&amp;a[i][j], &amp;a[i][j+<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span>(a[i][j] &gt; a[i+<span class="number">1</span>][j])</span><br><span class="line">            swap(&amp;a[i][j], &amp;a[i+<span class="number">1</span>][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a[i][j];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印结果</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">double</span> a[], <span class="keyword">int</span> size, <span class="keyword">double</span> av, <span class="keyword">double</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf "</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\naverage = %.2lf\n"</span>, av);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"max = %.2lf\n"</span>, m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换两个变量值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">double</span> *p, <span class="keyword">double</span> *q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> temp = *p;</span><br><span class="line">    *p = *q;</span><br><span class="line">    *q = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《C primer plus》笔记：C与数据</title>
      <link href="/2015/07/01/t-book_c_001/"/>
      <url>/2015/07/01/t-book_c_001/</url>
      
        <content type="html"><![CDATA[<h1 id="C与数据"><a href="#C与数据" class="headerlink" title="C与数据"></a>C与数据</h1><h3 id="11种数据类型"><a href="#11种数据类型" class="headerlink" title="11种数据类型"></a>11种数据类型</h3><ul><li>整型类：int，short（短整型），long（长整型），unsigned（无符号），char（字符整型）</li><li>浮点类：float（单精度），double（双精度）</li><li>C90新增：signed（有符号），void（空）</li><li>C99新增：<em>_Boo</em>l（布尔指）<em>，_Complex</em>（复数），<em>_Imaginary</em>（虚数）</li></ul><h3 id="存储单元"><a href="#存储单元" class="headerlink" title="存储单元"></a>存储单元</h3><ul><li>位：最小的存储单元，存储0或1</li><li>字节：常用存储单位，几乎所有机器有1字节等于8位，即1字节可以表示0-255之间的整数</li><li>字：自然存储单位：8位的微型计算机一字为8位，16，32位的为即一字为16位或32位</li></ul><h3 id="基本整型类型"><a href="#基本整型类型" class="headerlink" title="基本整型类型"></a>基本整型类型</h3><ol><li>int型：储存要占1个机器字长，16位机器，范围-32768 ~ 32767目前大多数机器32位，即占4个字节，存储数字范围为：-2147483648 ~ 2147483647</li><li>short型：存储小于等于int，-32768 ~ 32767</li><li>long型：储存大于等于int，-2147483648 ~ 2147483647</li><li>long long型：存储至少64位，即8个字节</li><li>unsigned型：无符号，只能存储正整数，能存储比signed更大的整数</li><li>目前普遍设置：long long 64位8字节，long 32位4字节，short 16位2字节，int 16/32位 2/4字节</li><li>常量：超出int范围，视为long，超出long范围，视为unsigned long，继续long long, unsigned long long</li><li>用H/h作为short，用L/l作为long， 用LL/ll作为long long，用U/u作为unsigned，例如343H，3234L，35455LL，435345U，534546467ULL</li><li>char型：一个字节，-128 ~ 127，ASCII编码0~127,存储绰绰有余，C语言将字符常量视为int型非char型，是否有符号看编译器</li><li>整型可以表示10，8，16进制，如32，032，0x32/0X32</li></ol><h3 id="基本浮点类型"><a href="#基本浮点类型" class="headerlink" title="基本浮点类型"></a>基本浮点类型</h3><ul><li>float：至少6位有效数字，取值至少10的-37到+37次方。通常浮点占32位，8位指数的值和符号，剩下的24位非指数的值和符号。<br>浮点最大：999999961690316250000000000000000000.000000<br>超过：<em>1.#INF00</em></li><li>double，至少13位有效数字。通常64位，剩下的32位给非指数部分。</li><li>long double 更高的精确要求，至少比double精确</li></ul><h3 id="复数和虚数类型"><a href="#复数和虚数类型" class="headerlink" title="复数和虚数类型"></a>复数和虚数类型</h3><ul><li>复数：float_Complex，double_Complex,long double_Complex</li><li>虚数：float_Imaginary，double_Imaginary，long double_Imaginary</li></ul><h3 id="类型大小"><a href="#类型大小" class="headerlink" title="类型大小"></a>类型大小</h3><p>sizeof()函数<br>sizeof(int),sizeof(char)等等……</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>整型，浮点的上溢出，下溢出？</p><h1 id="字符串与格式化输出输入"><a href="#字符串与格式化输出输入" class="headerlink" title="字符串与格式化输出输入"></a>字符串与格式化输出输入</h1><h3 id="字符串-string"><a href="#字符串-string" class="headerlink" title="字符串 string"></a>字符串 string</h3><ol><li>字符串数组（变量）来存储，char name[40];</li><li>输入scanf(“%s”,name) name是数组首地址</li><li>输出printf(“%s”,name)</li><li>数组大小sizeof(name) =&gt; 40，可以写成 sizeof name</li><li>字符串长度 strlen(name) =&gt;字符实际长度</li><li>空字符结尾（\n）</li></ol><h3 id="预处理-define"><a href="#预处理-define" class="headerlink" title="预处理 define"></a>预处理 define</h3><ul><li>格式 #define NAME ‘shaosuo’</li><li>注意是简单的替换，没有其他操作</li></ul><h3 id="限定符-const"><a href="#限定符-const" class="headerlink" title="限定符 const"></a>限定符 const</h3><ul><li>明示常量：limits.h float.h</li><li>imits/h:包含<em>INT_MAX</em>， <em>INT_MIN</em> 等预处理常量数值h</li><li>float.h:包含<em>FLT_MAX</em>， <em>FLT_MIN</em>..</li></ul><h3 id="输出函数-printf"><a href="#输出函数-printf" class="headerlink" title="输出函数 printf()"></a>输出函数 printf()</h3><h4 id="转换格式"><a href="#转换格式" class="headerlink" title="转换格式"></a>转换格式</h4><ul><li>%a/A  浮点，16进制，p计数</li><li>%g/G  自动选择%f，%e</li><li>%i    有符号10进制整数</li><li>%u    无符号10进制整数</li><li>%%    打印百分号</li><li>%p    指针</li><li>%o    无符号8进制</li><li>%x    无符号16进制</li></ul><h4 id="转换修饰符"><a href="#转换修饰符" class="headerlink" title="转换修饰符"></a>转换修饰符</h4><ul><li>标记：-（左对齐），+（添加符号），空格（空格覆盖正号），#（防止0被删除），0（0填充符号位）</li><li>宽度：数字（最小字段宽度）（用于字段对齐，右对齐）</li><li>精度：.数字</li><li>类型：h（short），hh（char），j，l，ll，L（long  double），t，z</li></ul><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>, b =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pn1 = <span class="built_in">printf</span>(<span class="string">"ok!\n"</span>);            <span class="comment">// pn1 = 4</span></span><br><span class="line">    <span class="keyword">int</span> pn2 = <span class="built_in">printf</span>(<span class="string">"ok!,%d,%d\n"</span>,a, b); <span class="comment">// pn2 = 8</span></span><br><span class="line">    <span class="keyword">int</span> sn1 = <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a, &amp;b);        <span class="comment">// sn1 = 1</span></span><br><span class="line">    <span class="keyword">int</span> sn2 = <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);      <span class="comment">// sn2 = 2</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"pn1=%d, sn1=%d, pn2=%d, sn2=%d\n"</span>, pn1, sn1, pn2, sn2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>printf（）返回正确按照格式变量个数，即打印字符的数</li><li>scanf（）返回正确按照指定格式接收的变量个数  <h1 id="运算符表达式和语句"><a href="#运算符表达式和语句" class="headerlink" title="运算符表达式和语句"></a>运算符表达式和语句</h1></li></ul><h3 id="基本运算符"><a href="#基本运算符" class="headerlink" title="基本运算符"></a>基本运算符</h3><ul><li>算数：（），+（取正），-（取负），+，-，*，/，%（取模），=（赋值）</li><li>sizeof：如果对象是类型，必须加括号，是变量可以不加，返回字节大小</li><li>%取模运算符：如13%5=3，只能用于整数，不能用于浮点数</li><li>递增（减）运算符++（–）：前缀与后缀区别，<strong>i++ =&gt; 先使用 i，再递增，++ i  =&gt; 先递增 i，再使用</strong></li></ul><h3 id="类型自动转换"><a href="#类型自动转换" class="headerlink" title="类型自动转换"></a>类型自动转换</h3><ul><li>普遍：<strong>较小类型转换为较大类型</strong></li><li>运算时：两个值被分别两种；类型的更高级别</li><li>高低：long double，double，float，unsigned long long，long long，unsigned long， long，unsigned int，int（int和long大小可能相同<br>）</li><li>参数传递时，char，short转换成int，float转化成double</li><li><strong>赋值语句可能导致类型的升级和降级</strong></li></ul><h3 id="类型强制转化"><a href="#类型强制转化" class="headerlink" title="类型强制转化"></a>类型强制转化</h3><ul><li>格式：（double）a = （double）1 + (double) 1;</li><li>显示使用类型转化比较好，避免不必要的错误<h1 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h1></li></ul><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><ul><li>关系运算符，表达式：&lt;，&lt;=，==，&gt;=，&gt;，!=</li><li>真假：<strong>非0 即为真</strong></li><li>注意：<strong>= 赋值，== 比较</strong></li><li>优先级关系：x &gt; y + 2 =&gt; x = ( y + 2 )</li><li>while语句：非计数循环</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">27</span>] = <span class="string">"abcdefghijklmnopqrstuvwxyz"</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>( i++ &lt; <span class="number">26</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, a[i<span class="number">-1</span>]); <span class="comment">//前面+1 ，-1即为真实元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>for语句：计数循环</li><li>逗号运算符：结果为右边的值</li><li>入口，出口条件：while，do while</li><li>嵌套循环</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> lets[<span class="number">27</span>] = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>, lets[i*(i+<span class="number">1</span>)/<span class="number">2</span>+j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>示例：倒序打印（test47.c）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_LEN 255</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[MAX_LEN];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, a);</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="keyword">while</span>(len-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, a[len]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>示例：冒泡排序（test43.c）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bb</span><span class="params">(<span class="keyword">int</span> a[])</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>  i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; LEN <span class="number">-1</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; LEN - i - <span class="number">1</span>; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j] &lt; a[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                swap(&amp;a[j], &amp;a[j+<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分支与跳转"><a href="#分支与跳转" class="headerlink" title="分支与跳转"></a>分支与跳转</h3><ul><li>选择语句 if……：<strong>执行或者跳过这条语句</strong></li><li>双选语句 if ……else：<strong>在两条语句中进行选择</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">    s = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    s = <span class="number">-1</span>;</span><br></pre></td></tr></table></figure><ul><li><p>字符输入输出函数：getchar(),putchar(),它们是#include中的<strong>预处理，不是真正的函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ch = getchar();   <span class="comment">//scanf("%c", &amp;ch);</span></span><br><span class="line"><span class="built_in">putchar</span>(ch);    <span class="comment">//printf("%c", ch);</span></span><br></pre></td></tr></table></figure></li><li><p>ctype.h系列的字符函数：<strong>使用时别忘记头文件</strong></p></li></ul><table><thead><tr><th>函数名</th><th>作用</th></tr></thead><tbody><tr><td>isalnum（）</td><td>字母或数组</td></tr><tr><td>isalpha（）</td><td>字母</td></tr><tr><td>isblank（）</td><td>空白符</td></tr><tr><td>isdigit（）</td><td>数字</td></tr><tr><td>islower（）</td><td>小写字母</td></tr><tr><td>isupper（）</td><td>大写字母</td></tr><tr><td>isxdigit（）</td><td>16进制字母</td></tr><tr><td>tolower（）</td><td>返回小写字母</td></tr><tr><td>toupper（）</td><td>返回大写字母</td></tr></tbody></table><ul><li>多重选择if …… （else if） …… else：在多条语句中选择，<strong>完全等价与if else多重嵌套模式</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (score &lt;= <span class="number">60</span>)</span><br><span class="line">    score = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(score &lt;= <span class="number">70</span> )</span><br><span class="line">    score = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(score &lt;= <span class="number">80</span>)</span><br><span class="line">    score = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    score = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><ul><li>逻辑运算符：&amp;&amp;（与）， ||（或），！（非）</li><li>替代iso664.h：and，or，not</li><li>优先级：<strong>！与递增运算符一样，&amp;&amp;大于||</strong></li><li>条件运算符： ？：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max = a &gt; b ? a : b;</span><br></pre></td></tr></table></figure><ul><li>配对：else 与最近的 if 配对</li><li>循环辅助continue：程序循环到一部分，可以跳过剩余部分，进行下一轮循环</li><li>循环辅助break：程序循环到一部，直接跳出该层循环，进入下一阶段</li><li>多重选择switch ……break：可用来替代ifelse，使用break跳出，不往下继续执行</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (整型表达式)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">1</span>:</span><br><span class="line">        语句</span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">2</span>:</span><br><span class="line">        语句</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>多重case标签</li><li>跳转语句goto：避免使用goto</li><li><strong>注意：“==” 不要写成“=”，不要忘记打印结果</strong> </li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch, pre;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>( (ch = getchar()) != <span class="string">'#'</span> )&#123;</span><br><span class="line">        <span class="keyword">if</span>(pre == <span class="string">'e'</span> &amp;&amp; ch == <span class="string">'i'</span>) <span class="comment">//切记</span></span><br><span class="line">            n++;</span><br><span class="line">        pre = ch;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n); <span class="comment">//切记</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>综合训练：<strong>注意，getchar连续输入要去掉\n，菜单要过滤字符，退出写在循环条件中</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> choice;</span><br><span class="line">    <span class="keyword">float</span> fweight = <span class="number">0</span>, sweight = <span class="number">0</span>, tweight = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> fcharge = <span class="number">0</span>, scharge = <span class="number">0</span>, tcharge = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> weight, price, charge, orderCharge, orderWeight, account, extCharge, pay;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"enter a, b, c chooce your goods, q is quit:\n"</span>);</span><br><span class="line">    <span class="keyword">while</span> ( (choice = getchar()) != <span class="string">'q'</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">'\n'</span> == choice)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>( choice == <span class="string">'a'</span> || choice == <span class="string">'b'</span> || choice == <span class="string">'c'</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span> (choice)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">                    price = <span class="number">2.05</span>;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"please enter want to buy yangli weight:\n"</span>);</span><br><span class="line">                    <span class="built_in">scanf</span>(<span class="string">"%f"</span>, &amp;weight); ;</span><br><span class="line">                    fweight += weight;</span><br><span class="line">                    fcharge += fweight * price;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, fweight);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'b'</span>:</span><br><span class="line">                    price = <span class="number">1.15</span>; </span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"please enter want to buy taincai weight:\n"</span>);</span><br><span class="line">                    <span class="built_in">scanf</span>(<span class="string">"%f"</span>, &amp;weight); </span><br><span class="line">                    sweight += weight;</span><br><span class="line">                    scharge += sweight * price;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, sweight);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'c'</span>:</span><br><span class="line">                    price = <span class="number">1.09</span>;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"please enter want to buy hulubo weight:\n"</span>);</span><br><span class="line">                    <span class="built_in">scanf</span>(<span class="string">"%f"</span>, &amp;weight); </span><br><span class="line">                    tweight += weight;</span><br><span class="line">                    tcharge += tweight * price;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, tweight);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>: ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"pleae enter 'a', 'b', 'c' !\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"enter a, b, c chooce your goods, q is quit:\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    orderWeight = fweight + sweight + tweight; </span><br><span class="line">    orderCharge = fcharge + scharge + tcharge;</span><br><span class="line">    account = orderCharge &gt; <span class="number">100</span> ? orderCharge * <span class="number">0.05</span> : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>( orderWeight &lt;= <span class="number">5</span> )</span><br><span class="line">        extCharge = <span class="number">6.5</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( orderWeight &lt;= <span class="number">20</span>)</span><br><span class="line">        extCharge = <span class="number">14</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        extCharge = <span class="number">14</span> + (orderWeight<span class="number">-14</span>) * <span class="number">0.5</span>;</span><br><span class="line">    pay = orderCharge + extCharge - account;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*******************   order    ******************\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*name-------price------weight-------charge*\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*yang-------$2.05--------%9.2f---------$%9.2f*\n"</span>, fweight, fcharge);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*tian-------$1.15--------%9.2f---------$%9.2f*\n"</span>, sweight, scharge);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*hulobo-----$1.09--------%9.2f---------$%9.2f*\n"</span>, tweight, tcharge);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"totalWeight:%.2f, orderCharge:$%.2f"</span>, orderWeight, orderCharge);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"account:$%.2f, extCharge:$%.2f, pay:$%.2f\n"</span>, account, extCharge, pay);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*************************************************\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="友好的交互"><a href="#友好的交互" class="headerlink" title="友好的交互"></a>友好的交互</h3><ul><li>缓冲区：字符被收集存储的临时存储区（是否有无缓冲输入取决于系统）正常的都是有缓冲输入</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">typeHI!--&gt;|无缓冲区程序立即使用| HI!</span><br><span class="line">typeHI!--&gt;|缓冲区| HI!</span><br></pre></td></tr></table></figure><ul><li>结束键盘输入：文件，流，键盘输入</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">while</span>( (ch =getchar()) != <span class="string">'#'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(ch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用的#字符可能会被我们用到，使用#退出并不一定起作用</strong><br><strong>c语言把输入输出设备，视为文件，stdin流表示键盘输入，stdout流表示显示输出</strong><br><strong>使用文件的形式来结束键盘的输入</strong></p><ul><li>文件结尾：Ctrl+Z(曾经操作系统)，存储文件大小信息，<strong>EOF（C语言）</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EOF -1 <span class="comment">//stdio.h定义的</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>( (ch =getchar()) != EOF)</span><br></pre></td></tr></table></figure><ul><li><ul><li><strong>getchar（）返回int，可能会报信息，但不影响putchar（）输出字符</strong></li></ul></li><li><ul><li><strong>正确的使用是找到操作系统，文件终止符识别方案，大多数是Ctrl+D，有些是Ctrl+Z</strong></li></ul></li><li><ul><li><strong>EOF不要加字符的‘’</strong></li></ul></li><li>重定向和文件：把stdin流重新赋给文件，主要问题与操作系统有关</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">testFileIO &lt; words            <span class="comment">// UNIX与DOS 输入重定向</span></span><br><span class="line">testFileIO &gt; mywords          <span class="comment">//输出重定向 DOS Ctrl+Z结束，UNIX Ctrl+D结束</span></span><br><span class="line">testFileIO &lt; words &gt; mywords  <span class="comment">//组合重定向</span></span><br></pre></td></tr></table></figure><p><strong>不能读多个文件，也不能写多个文件，空格不是必须的，写入的会把之前的覆盖掉</strong></p><ul><li>友好的用户界面<br><strong>丢弃换行符两种方式比较</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ch == <span class="string">'\n'</span>)   <span class="comment">//当输入的字符为换行符时，直接跳入下一轮循环</span></span><br><span class="line">    <span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>( getchar() != <span class="string">'\n'</span> ) <span class="comment">//只要输入的字符不为换行符进入下一轮循环</span></span><br><span class="line">    <span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure><p><strong><em>问题来了？为什么用第二种不用第一种？</em></strong></p><ul><li>混合字符数字输入：<br><strong>1.验证输入正确性2.丢弃换行符</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>（<span class="number">2</span> != <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b)）</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><ul><li>输入验证：<br><strong>事先预测可能输入，检测和处理</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>( <span class="built_in">scanf</span>(<span class="string">"%ld"</span>, &amp;n) == <span class="number">1</span> &amp;&amp; n &gt; <span class="number">0</span> ) <span class="comment">//验证正整数</span></span><br></pre></td></tr></table></figure><ul><li>模块化编程：<strong>用单独的函数，验证输入和管理显示</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">count</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_int</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">get_first</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">get_choice</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> choice;</span><br><span class="line">    count();</span><br><span class="line">    <span class="keyword">while</span>( (choice = get_choice()) != <span class="string">'q'</span> )&#123;</span><br><span class="line">        <span class="keyword">switch</span> (choice)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"buy low, sell high\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'b'</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\a\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'c'</span>:</span><br><span class="line">                count();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"error!!!\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">count</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Count how far?\n"</span>);</span><br><span class="line">    n = get_int();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>( getchar() != <span class="string">'\n'</span> )</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//异常处理</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_int</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != <span class="number">1</span> )&#123;</span><br><span class="line">        <span class="keyword">while</span>( getchar() != <span class="string">'\n'</span>)</span><br><span class="line">            <span class="built_in">putchar</span>(ch);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"is not a integer!!!\n"</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//过滤换行符</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">get_first</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> choice;</span><br><span class="line">    choice = getchar();</span><br><span class="line">    <span class="keyword">while</span>( getchar() != <span class="string">'\n'</span> )</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">return</span> choice;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删选合适的字符</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">get_choice</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> choice;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please enter a, b, c\n"</span>);</span><br><span class="line">    choice = get_first();</span><br><span class="line">    <span class="keyword">while</span>( (choice &lt; <span class="string">'a'</span> || choice &gt; <span class="string">'c'</span>) &amp;&amp; choice != <span class="string">'q'</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"please enter correct code!!\n"</span>);</span><br><span class="line">        choice = get_first();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> choice;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实战例子（test57.c）:统计文件字符数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>( (ch = getchar()) != EOF )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(isblank(ch) || ch == <span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"count : %d\n"</span>, count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实战例子（test61.c）:二分查找找1-100中的数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ran, lower = <span class="number">1</span>, upper = <span class="number">100</span>, i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> smart = (lower + upper) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please enter 1 ~ 100 a integer:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;ran);</span><br><span class="line">    <span class="keyword">while</span>( ran != smart)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ran &lt; smart)</span><br><span class="line">            upper = smart;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            lower = smart;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"though %d times = %d\n"</span>, i, smart);</span><br><span class="line">        smart = (lower + upper) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"though %d times = %d\n"</span>, i+<span class="number">1</span>, smart);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
