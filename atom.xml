<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>锁越smile</title>
  
  <subtitle>邵锁的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-18T05:23:25.885Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>suoyue</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何理解 SSR？</title>
    <link href="http://yoursite.com/2019/03/02/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3SSR%E4%BB%A5%E5%8F%8A%E5%9C%A8Vue%E5%92%8CReact%E4%B8%AD%E4%BD%BF%E7%94%A8SSR/"/>
    <id>http://yoursite.com/2019/03/02/如何理解SSR以及在Vue和React中使用SSR/</id>
    <published>2019-03-02T12:31:11.000Z</published>
    <updated>2019-06-18T05:23:25.885Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/Users/suosmile/Pictures/截图/Xnip2019-05-29_14-36-16.jpg" alt="Xnip2019-05-29_14-36-16"></p><h2 id="为啥要做服务器渲染？"><a href="#为啥要做服务器渲染？" class="headerlink" title="为啥要做服务器渲染？"></a>为啥要做服务器渲染？</h2><p>那我们就回顾一下，我们到底是怎么告别了使用 php/jsp 做服务器端渲染，进入前后端分离的客户端渲染时代，又为什么重新回到了服务端渲染。</p><p>其实把 next.js/nust.js 称为 SSR（服务器端渲染 Server Side Render）不太精确，应该是 Isomorphic render（同构渲染）。</p><p>为了方便解释，我们引入几个概念。</p><ul><li>数据：通常来自数据库，或者第三方服务等，比如用户的信息，订单详情等。数据使用某些数据结果来存储和传输，例如 json，xml，数组，Map 等</li><li>模块：一个页面的基本轮廓和展示，模板定义了某个元素显示在什么位置。比如 PHP/JSP 就是模板语言，还有很多的模板引擎包括 Smarty/Jad/JSX 等</li><li>页面：为了简化后面的说明，我们就把页面狭义的定义为 HTML。</li></ul><p>在引入要给公式：</p><p>​    页面 = 模板 + 数据</p><p>上面的加号（+）并不是加法，它就是我们今天要讲到的<strong>渲染（Render）</strong>。</p><ul><li>服务端渲染：渲染过程在服务器端完成，最终的渲染结果 HTML 页面通过 HTTP 协议发送给客户端。对于客户端而言，只是看到了最终的 HTML 页面，看不到数据，也看不到模板。</li><li>客户端渲染：服务器端把模板和数据发送给客户端，渲染过程在客户端完成。</li></ul><p>那么我们再对比一下，服务器端渲染的优势就是容易 SEO，首屏加载快，因为客户端接收到的是完整的 HTML 页面。这个时代，我称其为“Web Page”时代，我们开发的是网页，是给用户看的。</p><p>但是缺点也很明显：渲染过程在后端完成，那么肯定会耗费后端资源。费流量，即使局部页面的变化也需要重新发送整个页面。等等</p><p>对于客户端渲染，我们经常会讨论 React/Vue/Angular 三大框架，或者 SPA。这个时代，我称其为 “Web App”时代（SPA 中的 A 就是 Application 的首字母）。相比 Web Page 而言，我们现在开发的是 Web App，是给用户用的。</p><p>客户端渲染的优势是：节省后端资源，局部刷新页面，多端渲染，前后端分离。缺点是：首屏性能差，白屏，无法（或很难）进行 SEO。等等。</p><p>服务端渲染的优点就是客户端渲染的缺点，服务端渲染的缺点同时也是客户端渲染的优点，反之亦然。</p><p>而 Next.js 做的是同构渲染。同一套代码既可以在服务器端渲染，也可以在客户端渲染。Exciting</p><p>当我们首次访问时，换言之当我们访问<strong>首屏页面</strong>时，Next.js 使用服务器端渲染，为我们返回已经渲染完成的最终 HTML 页面。这样就同时解决了首屏白屏问题以及 SEO 问题。此后当我们再进行交互时，则使用客户端渲染。HTML、CSS、JS 等资源都不需要再重新请求，只需要通过 ajax/websocket 等途径获取数据，在客户端完成渲染过程。</p><h2 id="总结服务器渲染的目的"><a href="#总结服务器渲染的目的" class="headerlink" title="总结服务器渲染的目的"></a>总结服务器渲染的目的</h2><p>解决 SEO 问题和首屏加载的性能问题，在服务端生成对应的<code>HTML</code>字符串，客户端接收到对应的<code>HTML</code>字符串，能立即渲染<code>DOM</code>，最高效的首屏耗时。此外，由于服务端直接生成了对应的<code>HTML</code>字符串，对<code>SEO</code>也非常友好；</p><h2 id="Vue-中使用服务器渲染"><a href="#Vue-中使用服务器渲染" class="headerlink" title="Vue 中使用服务器渲染"></a>Vue 中使用服务器渲染</h2><h3 id="安装-vue-server-renderer"><a href="#安装-vue-server-renderer" class="headerlink" title="安装 vue-server-renderer"></a>安装 <code>vue-server-renderer</code></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue vue-server-renderer --save</span><br></pre></td></tr></table></figure><h3 id="渲染-Vue-实例"><a href="#渲染-Vue-实例" class="headerlink" title="渲染 Vue 实例"></a>渲染 Vue 实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第 1 步：创建一个 Vue 实例</span></span><br><span class="line"><span class="keyword">const</span> Vue = <span class="built_in">require</span>(<span class="string">'vue'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  template: <span class="string">`&lt;div&gt;Hello World&lt;/div&gt;`</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第 2 步：创建一个 renderer</span></span><br><span class="line"><span class="keyword">const</span> renderer = <span class="built_in">require</span>(<span class="string">'vue-server-renderer'</span>).createRenderer();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第 3 步：将 Vue 实例渲染为 HTML</span></span><br><span class="line">renderer.renderToString(app, (err, html) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(html);</span><br><span class="line">  <span class="comment">// =&gt; &lt;div data-server-rendered="true"&gt;Hello World&lt;/div&gt;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="服务端处理"><a href="#服务端处理" class="headerlink" title="服务端处理"></a>服务端处理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">    ctx.status = <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">let</span> html = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        html = <span class="keyword">await</span> renderer.renderToString(app, ctx);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        ctx.logger(<span class="string">'Vue SSR Render error'</span>, <span class="built_in">JSON</span>.stringify(err));</span><br><span class="line">        html = <span class="keyword">await</span> ctx.getErrorPage(err); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ctx.body = html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取文件传输到-Vue-Renderer"><a href="#读取文件传输到-Vue-Renderer" class="headerlink" title="读取文件传输到 Vue Renderer"></a>读取文件传输到 Vue Renderer</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tpl = fs.readFileSync(path.resolve(__dirname, <span class="string">'./index.html'</span>), <span class="string">'utf-8'</span>);</span><br><span class="line"><span class="keyword">const</span> renderer = vssr.createRenderer(&#123;</span><br><span class="line">    template: tpl,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="HTML-模版包裹"><a href="#HTML-模版包裹" class="headerlink" title="HTML 模版包裹"></a>HTML 模版包裹</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--vue-ssr-outlet--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/Users/suosmile/Pictures/截图/Xnip2019-05-29_14-36-16.jpg&quot; alt=&quot;Xnip2019-05-29_14-36-16&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;为啥要做服务器渲染？&quot;&gt;&lt;a href=&quot;#为啥要做服
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="ssr" scheme="http://yoursite.com/tags/ssr/"/>
    
  </entry>
  
  <entry>
    <title>再探 vue 框架：&lt;下篇&gt;</title>
    <link href="http://yoursite.com/2018/12/28/t-note_vue_004/"/>
    <id>http://yoursite.com/2018/12/28/t-note_vue_004/</id>
    <published>2018-12-28T08:33:33.000Z</published>
    <updated>2019-06-14T07:04:19.796Z</updated>
    
    <content type="html"><![CDATA[<h1 id="再探-vue-框架：-lt-下篇-gt"><a href="#再探-vue-框架：-lt-下篇-gt" class="headerlink" title="再探 vue 框架： &lt;下篇&gt;"></a>再探 vue 框架： &lt;下篇&gt;</h1><h2 id="服务器渲染"><a href="#服务器渲染" class="headerlink" title="服务器渲染"></a>服务器渲染</h2><h2 id="结合-TypeScript-使用"><a href="#结合-TypeScript-使用" class="headerlink" title="结合 TypeScript 使用"></a>结合 TypeScript 使用</h2><h2 id="vue-开发感想"><a href="#vue-开发感想" class="headerlink" title="vue 开发感想"></a>vue 开发感想</h2><h2 id="后续研究"><a href="#后续研究" class="headerlink" title="后续研究"></a>后续研究</h2><h2 id="读源码相关收获"><a href="#读源码相关收获" class="headerlink" title="读源码相关收获"></a>读源码相关收获</h2><h2 id="React-相关"><a href="#React-相关" class="headerlink" title="React 相关"></a>React 相关</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;再探-vue-框架：-lt-下篇-gt&quot;&gt;&lt;a href=&quot;#再探-vue-框架：-lt-下篇-gt&quot; class=&quot;headerlink&quot; title=&quot;再探 vue 框架： &amp;lt;下篇&amp;gt;&quot;&gt;&lt;/a&gt;再探 vue 框架： &amp;lt;下篇&amp;gt;&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="框架" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>再探 vue 框架 &lt;上篇&gt;</title>
    <link href="http://yoursite.com/2018/12/13/t-note_vue_003/"/>
    <id>http://yoursite.com/2018/12/13/t-note_vue_003/</id>
    <published>2018-12-13T12:31:11.000Z</published>
    <updated>2019-06-14T07:15:47.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="再探-vue-框架（上）"><a href="#再探-vue-框架（上）" class="headerlink" title="再探 vue 框架（上）"></a>再探 vue 框架（上）</h1><h2 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h2><h2 id="异步路由"><a href="#异步路由" class="headerlink" title="异步路由"></a>异步路由</h2><h2 id="自动化测试"><a href="#自动化测试" class="headerlink" title="自动化测试"></a>自动化测试</h2><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;再探-vue-框架（上）&quot;&gt;&lt;a href=&quot;#再探-vue-框架（上）&quot; class=&quot;headerlink&quot; title=&quot;再探 vue 框架（上）&quot;&gt;&lt;/a&gt;再探 vue 框架（上）&lt;/h1&gt;&lt;h2 id=&quot;组件化开发&quot;&gt;&lt;a href=&quot;#组件化开发&quot; c
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="框架" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>设计模式研究</title>
    <link href="http://yoursite.com/2018/09/02/t-design_mode/"/>
    <id>http://yoursite.com/2018/09/02/t-design_mode/</id>
    <published>2018-09-02T12:31:11.000Z</published>
    <updated>2019-06-14T08:50:27.353Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>apiza 管理api</title>
    <link href="http://yoursite.com/2018/07/23/t-note_apiza/"/>
    <id>http://yoursite.com/2018/07/23/t-note_apiza/</id>
    <published>2018-07-23T12:33:23.000Z</published>
    <updated>2019-06-14T08:46:01.198Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="api" scheme="http://yoursite.com/categories/api/"/>
    
    
      <category term="api" scheme="http://yoursite.com/tags/api/"/>
    
      <category term="data" scheme="http://yoursite.com/tags/data/"/>
    
  </entry>
  
  <entry>
    <title>DOM事件流</title>
    <link href="http://yoursite.com/2018/06/23/t-dom-event/"/>
    <id>http://yoursite.com/2018/06/23/t-dom-event/</id>
    <published>2018-06-23T12:33:23.000Z</published>
    <updated>2019-06-14T07:13:58.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DOM-事件流"><a href="#DOM-事件流" class="headerlink" title="DOM 事件流"></a>DOM 事件流</h1><h2 id="基本概念（dom级别）"><a href="#基本概念（dom级别）" class="headerlink" title="基本概念（dom级别）"></a>基本概念（dom级别）</h2><h3 id="级别"><a href="#级别" class="headerlink" title="级别"></a>级别</h3><ul><li>dom0<br><code>element.onclick = function() {}</code></li><li>dom2<br><code>element.addEventListener(&#39;click&#39;, function(){}, false)</code></li><li>dom3<br><code>element.addEventListener(&#39;keyup&#39;, function(){}, false)</code></li></ul><h2 id="DOM事件模型（捕获、冒泡）"><a href="#DOM事件模型（捕获、冒泡）" class="headerlink" title="DOM事件模型（捕获、冒泡）"></a>DOM事件模型（捕获、冒泡）</h2><ul><li>捕获</li><li>冒泡</li></ul><h2 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h2><ol><li>捕获</li><li>目标阶段</li><li>冒泡</li></ol><h2 id="DOM事件捕获的具体流程"><a href="#DOM事件捕获的具体流程" class="headerlink" title="DOM事件捕获的具体流程"></a>DOM事件捕获的具体流程</h2><ol><li>window</li><li>document</li><li>html （document.documentElement）</li><li>body</li><li>…</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 捕获 true</span></span><br><span class="line"><span class="comment">// 冒泡 false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> event = <span class="built_in">document</span>.getElementById(<span class="string">'ev'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'window'</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'document'</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.documentElement.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'html'</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'body'</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">event.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'el'</span>)</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h2 id="Event对象的常见应用（监听、响应）"><a href="#Event对象的常见应用（监听、响应）" class="headerlink" title="Event对象的常见应用（监听、响应）"></a>Event对象的常见应用（监听、响应）</h2><ol><li><code>event.preventDefault()</code></li><li><code>event.stopPropagation()</code> 阻止冒泡</li><li><code>event.stopImmediatePropagation()</code> 阻止立即冒泡</li><li><code>event.currentTarget</code> 当前绑定事件的元素</li><li><code>event.target</code> 当前被点击的元素</li></ol><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> Event(<span class="string">'myClick'</span>)</span><br><span class="line">event.addEventListener(<span class="string">'myClick'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'custome'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">event.dispatchEvent(event)</span><br><span class="line"></span><br><span class="line"><span class="comment">// CostomEvent</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DOM-事件流&quot;&gt;&lt;a href=&quot;#DOM-事件流&quot; class=&quot;headerlink&quot; title=&quot;DOM 事件流&quot;&gt;&lt;/a&gt;DOM 事件流&lt;/h1&gt;&lt;h2 id=&quot;基本概念（dom级别）&quot;&gt;&lt;a href=&quot;#基本概念（dom级别）&quot; class=&quot;he
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="es5" scheme="http://yoursite.com/tags/es5/"/>
    
  </entry>
  
  <entry>
    <title>vue 源码分析之双向绑定</title>
    <link href="http://yoursite.com/2018/06/18/vue%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/"/>
    <id>http://yoursite.com/2018/06/18/vue 源码分析之双向绑定/</id>
    <published>2018-06-18T12:31:11.000Z</published>
    <updated>2019-06-18T05:20:35.548Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一个简单的demo"><a href="#一个简单的demo" class="headerlink" title="一个简单的demo"></a>一个简单的demo</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"sayHi"</span>&gt;</span>change model<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/observer.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/watcher.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/compile.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/mvvm.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> MVVM(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#mvvm-app'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            msg: <span class="string">'Hello World!'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="javascript">            sayHi: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.msg = <span class="string">'Hi, everybody!'</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="主流实现"><a href="#主流实现" class="headerlink" title="主流实现"></a>主流实现</h4><ol><li>发布订阅者模式（backbone.js）<br>一般通过sub, pub的方式实现数据和视图的绑定监听，更新数据方式通常做法是 vm.set(‘property’, value)</li><li>脏值检测法（angular.js）<br>在指定事件触发时进入脏检测，使用<code>setInterval</code>进行轮询检测数据的变动</li></ol><ul><li>dom 事件</li><li>ajax</li><li>定时器事件</li><li>浏览器location 变更事件</li></ul><ol><li>数据劫持+发布订阅（vue.js）<br>通过Object.defineProperty来劫持各个属性的<code>setter</code>和<code>getter</code>， 数据变动时发布消息给订阅者，触发相应的回调</li></ol><h4 id="vue-双向绑定流程"><a href="#vue-双向绑定流程" class="headerlink" title="vue 双向绑定流程"></a>vue 双向绑定流程</h4><p><img src="/Users/suosmile/Pictures/截图/Xnip2019-06-16_12-39-51.jpg" alt="Xnip2019-06-16_12-39-51"><br>分为两条线，一条是初始化视图，一条是更新视图<br>初始化过程中我们通过编译器将模版编译成dom树，渲染在视图中<br>同时我们通过<code>Object.defineProperty</code>封装一个Observer来实现对节点属性的监听，一旦监听到节点中属性的改变，我们将这个改变通知给dep发给侦听器Watcher，然和Watcher添加一个订阅者，从而更新视图。这样就实现一个双向绑定</p><h4 id="vue-双向绑定实现"><a href="#vue-双向绑定实现" class="headerlink" title="vue 双向绑定实现"></a>vue 双向绑定实现</h4><ol><li>实现 Obeserver<br>关键要做的事情是使用<code>Object.defineProperty</code>来监听属性的变动，所以我们要将obsever上的属性进行递归遍历，包括子属性对象的属性，都加上<code>setter</code> 和 <code>getter</code>,给某个对象的属性赋值就能监听到数据的变化<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;<span class="attr">name</span>: <span class="string">'shaosuo'</span>&#125;;</span><br><span class="line">observe(data);</span><br><span class="line">data.name = <span class="string">'suo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!data || <span class="keyword">typeof</span> data !== <span class="string">'object'</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  defineReactive(data, key, data[key]);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dep = <span class="keyword">new</span> Dep();</span><br><span class="line">  observe(val); <span class="comment">// 监听子属性</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>, <span class="comment">// 可枚举</span></span><br><span class="line">    configurable: <span class="literal">false</span>, <span class="comment">// 不能再define</span></span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Dep.target &amp;&amp; dep.addSub(Dep.target);</span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">      val = newVal;</span><br><span class="line">      <span class="comment">// 将监听到变化通知消息订阅者</span></span><br><span class="line">      dep.notify()</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消息阅读器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.subs = [];</span><br><span class="line">&#125;</span><br><span class="line">Dep.prototype = &#123;</span><br><span class="line">  addSub: <span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subs.push(sub);</span><br><span class="line">  &#125;,</span><br><span class="line">   notify: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">        sub.update();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><p>添加订阅者<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Watcher.js</span></span><br><span class="line">Watcher.prototype = &#123;</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    Dep.target = <span class="keyword">this</span>;</span><br><span class="line">      <span class="keyword">this</span>.value = data[key];    </span><br><span class="line">      <span class="comment">// 这里会触发属性的getter，从而添加订阅者</span></span><br><span class="line">      Dep.target = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;一个简单的demo&quot;&gt;&lt;a href=&quot;#一个简单的demo&quot; class=&quot;headerlink&quot; title=&quot;一个简单的demo&quot;&gt;&lt;/a&gt;一个简单的demo&lt;/h4&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="源码分析" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 初探基本知识概念（上）</title>
    <link href="http://yoursite.com/2018/06/13/t-typescript/"/>
    <id>http://yoursite.com/2018/06/13/t-typescript/</id>
    <published>2018-06-13T12:31:11.000Z</published>
    <updated>2019-06-14T09:03:53.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>[TOC]</p><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><h3 id="布尔类型-boolean"><a href="#布尔类型-boolean" class="headerlink" title="布尔类型 boolean"></a>布尔类型 boolean</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> flag:<span class="built_in">boolean</span> = <span class="literal">true</span></span><br><span class="line">flag = <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="字符串-string"><a href="#字符串-string" class="headerlink" title="字符串 string"></a>字符串 string</h3><h3 id="数组类型-array"><a href="#数组类型-array" class="headerlink" title="数组类型 array"></a>数组类型 array</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种定义数组</span></span><br><span class="line"><span class="keyword">const</span> arr:number[] = [<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>]</span><br><span class="line"><span class="comment">// 第二种定义数组</span></span><br><span class="line"><span class="keyword">const</span> arr1:<span class="built_in">Array</span>&lt;number&gt; = [<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>]</span><br></pre></td></tr></table></figure><h3 id="元组类型-tuple"><a href="#元组类型-tuple" class="headerlink" title="元组类型 tuple"></a>元组类型 tuple</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每一个位置指定一个类型</span></span><br><span class="line"><span class="keyword">let</span> arr:[<span class="built_in">number</span>, <span class="built_in">string</span>] = [<span class="number">123</span>, <span class="string">'suo'</span>]</span><br></pre></td></tr></table></figure><h3 id="枚举类型-enum"><a href="#枚举类型-enum" class="headerlink" title="枚举类型 enum"></a>枚举类型 enum</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数值代替类型不直观易读性差</span></span><br><span class="line"><span class="keyword">enum</span> Flag &#123;success = <span class="number">1</span>, error = <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">let</span> s:Flag = Flag.success</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标识符没有赋值，默认为下标</span></span><br></pre></td></tr></table></figure><h3 id="任意类型-any"><a href="#任意类型-any" class="headerlink" title="任意类型 any"></a>任意类型 any</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有指定类型相似</span></span><br><span class="line"><span class="comment">// TODO：任意类型的作用</span></span><br><span class="line"><span class="keyword">let</span> num:<span class="built_in">any</span> = <span class="number">123</span></span><br></pre></td></tr></table></figure><h3 id="未定义类型-undefined"><a href="#未定义类型-undefined" class="headerlink" title="未定义类型 undefined"></a>未定义类型 undefined</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义未赋值</span></span><br><span class="line"><span class="keyword">const</span> num:number | <span class="literal">undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(num)</span><br></pre></td></tr></table></figure><h3 id="空指针类型-null"><a href="#空指针类型-null" class="headerlink" title="空指针类型 null"></a>空指针类型 null</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num:<span class="literal">null</span></span><br></pre></td></tr></table></figure><h3 id="空类型-void"><a href="#空类型-void" class="headerlink" title="空类型 void"></a>空类型 void</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'a'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>):<span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'a'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他类型-never"><a href="#其他类型-never" class="headerlink" title="其他类型 never"></a>其他类型 never</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从不会出现的值</span></span><br><span class="line"><span class="keyword">var</span> a:never</span><br><span class="line"></span><br><span class="line">a = <span class="function">(<span class="params">(<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>)</span></span><br></pre></td></tr></table></figure><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><h4 id="访问联合类型的属性或方法"><a href="#访问联合类型的属性或方法" class="headerlink" title="访问联合类型的属性或方法"></a>访问联合类型的属性或方法</h4><p>当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，<strong>我们只能访问此联合类型的所有类型里共有的属性或方法</strong></p><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><h3 id="声明合并"><a href="#声明合并" class="headerlink" title="声明合并"></a>声明合并</h3><p>### </p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>):<span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">get</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>):<span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数传参数"><a href="#函数传参数" class="headerlink" title="函数传参数"></a>函数传参数</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可选参数（必须配置到最后面）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">name:<span class="built_in">string</span>, age?:<span class="built_in">number</span></span>):<span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (age) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span> -- <span class="subst">$&#123;age&#125;</span>`</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span>(<span class="string">'shao'</span>)</span><br><span class="line"><span class="keyword">get</span>(<span class="string">'shaosuo'</span>, <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">name:<span class="built_in">string</span>, age:<span class="built_in">number</span> = 20</span>):<span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (age) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span> -- <span class="subst">$&#123;age&#125;</span>`</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">get</span>(<span class="string">'shao'</span>)</span><br><span class="line"><span class="keyword">get</span>(<span class="string">'shaosuo'</span>, <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 剩余参数（三点运输符）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...rest:<span class="built_in">number</span>[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> rest.reduce(<span class="function">(<span class="params">it, cur, index, arr</span>) =&gt;</span> it + cur）</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数的重载(函数名相同参数不同)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">css</span>(<span class="params">config:<span class="built_in">any</span></span>):<span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">css</span>(<span class="params">config: <span class="built_in">any</span>, value: <span class="built_in">number</span></span>): <span class="title">any</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 构造属性、方法</span></span><br><span class="line">  <span class="keyword">this</span>.name</span><br><span class="line">  <span class="keyword">this</span>.age</span><br><span class="line">  <span class="keyword">this</span>.work = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'work'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型属性、方法</span></span><br><span class="line">Person.prototype.phone = <span class="string">'12343435'</span></span><br><span class="line">Person.prototype.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'run'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 静态属性、方法</span></span><br><span class="line">Person.address = <span class="string">'guangzhou'</span></span><br><span class="line">Person.jump = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> suo = <span class="keyword">new</span> Person()</span><br><span class="line">suo.work()</span><br><span class="line">suo.run()</span><br><span class="line"></span><br><span class="line"><span class="comment">// TS</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">static</span> sex: <span class="built_in">string</span> = <span class="string">'男'</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  setName(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  getName(name: <span class="built_in">string</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  run(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 静态方法无法直接调用属性</span></span><br><span class="line">  <span class="keyword">static</span> print(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`static print <span class="subst">$&#123;sex&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person(<span class="string">'张三'</span>)</span><br><span class="line">p.run()</span><br></pre></td></tr></table></figure><h3 id="继承类"><a href="#继承类" class="headerlink" title="继承类"></a>继承类</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="comment">// 对象冒充</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PersonOther</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>) <span class="comment">// 继承构造函数</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型链继承</span></span><br><span class="line">PersonOther.prototype = <span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line"><span class="comment">// TS</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  run(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;this.name&#125;</span> 运动`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> personOther <span class="keyword">extends</span> Penson &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> other = <span class="keyword">new</span> personOther(<span class="string">'李四'</span>)</span><br><span class="line">other.run()</span><br></pre></td></tr></table></figure><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// public, protected, private</span></span><br><span class="line"><span class="comment">// public 父子都可以访问，外部可以访问</span></span><br><span class="line"><span class="comment">// protected 父子类可以访问，外部不可以访问</span></span><br><span class="line"><span class="comment">// private 只要自己才能访问</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  public name: string</span><br><span class="line">  getName(): string &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">  &#125;</span><br><span class="line">  setName(name: string): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person()</span><br><span class="line">p.name <span class="comment">// 外部</span></span><br><span class="line">p.getName() <span class="comment">// 内部</span></span><br></pre></td></tr></table></figure><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类实现一个方法不实现，子类实现，不同类不同表现</span></span><br><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">params: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = params.name</span><br><span class="line">  &#125;</span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'eat...'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">parmas: nay</span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(parmas)</span><br><span class="line">  &#125;</span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="keyword">return</span> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象方法不实现，只能在抽象类中，要求子类必须包含方法</span></span><br><span class="line"><span class="comment">// 抽象类一般有抽象方法才有意义</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Animal &#123;</span><br><span class="line">  <span class="keyword">abstract</span> eat(): <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 无法创建</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">parmas: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(parmas)</span><br><span class="line">  &#125;</span><br><span class="line">  eat(): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;parmas.name&#125;</span> eat bone`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>标准的一种定义，对类的属性方法，行为规范的规范和约束。</p><h3 id="属性接口"><a href="#属性接口" class="headerlink" title="属性接口"></a>属性接口</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 属性接口 </span></span><br><span class="line"><span class="comment">* 对json的约束</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">label: <span class="built_in">string</span></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(label)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对对象的约束</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">obj: &#123;label: <span class="built_in">string</span>&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(label)</span><br><span class="line">&#125;</span><br><span class="line">print(&#123;label: <span class="string">'123'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量对函数进行约束</span></span><br><span class="line"><span class="keyword">interface</span> FullName &#123;</span><br><span class="line">  firstName: <span class="built_in">string</span></span><br><span class="line">  secondName: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printName</span>(<span class="params">name: FullName</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name.firstName + <span class="string">' '</span> name.secondName)</span><br><span class="line">&#125;</span><br><span class="line">printName(&#123;firstName: <span class="string">'shao'</span>, secondName: <span class="string">'suo'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">info</span>(<span class="params">name: Fullname</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name.firstName + <span class="string">' '</span> name.secondName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选属性接口</span></span><br><span class="line"><span class="keyword">interface</span> FullName &#123;</span><br><span class="line">  firstName: <span class="built_in">string</span></span><br><span class="line">  secondName?: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">name: FullName</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="keyword">interface</span> config &#123;</span><br><span class="line">  <span class="keyword">type</span>: <span class="built_in">string</span></span><br><span class="line">  url: <span class="built_in">string</span></span><br><span class="line">  data?: <span class="built_in">string</span></span><br><span class="line">  dataType: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">config: config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  xhr.open(config.type, <span class="string">'true'</span>)</span><br><span class="line">  xhr.send(config.data)</span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (config.dataType === <span class="string">'json'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(xhr.responseText))</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(xhr.responseText)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ajax(&#123;</span><br><span class="line">  <span class="keyword">type</span>: <span class="string">'get'</span>,</span><br><span class="line">  url: <span class="string">'www.baidu.com'</span>,</span><br><span class="line">  dataType: <span class="string">'json'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="函数接口"><a href="#函数接口" class="headerlink" title="函数接口"></a>函数接口</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对方法传入参数和返回值约束</span></span><br><span class="line"><span class="keyword">interface</span> encrypt &#123;</span><br><span class="line">  (key: <span class="built_in">string</span>, value: <span class="built_in">string</span>): <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> md5: encrypt = <span class="function"><span class="keyword">function</span>(<span class="params">key: <span class="built_in">string</span>, value: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> key + value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可索引接口"><a href="#可索引接口" class="headerlink" title="可索引接口"></a>可索引接口</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对数组的约束</span></span><br><span class="line"><span class="keyword">interface</span> userArr &#123;</span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr: userArr = [<span class="string">'aaa'</span>, <span class="string">'bbb'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对对象的约束</span></span><br><span class="line"><span class="keyword">interface</span> userObj &#123;</span><br><span class="line">  [index: <span class="built_in">string</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj: userObj = &#123;name: <span class="string">'shap'</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="类接口"><a href="#类接口" class="headerlink" title="类接口"></a>类接口</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对类类型接口</span></span><br><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  eat(str: <span class="built_in">string</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">implements</span> Animal &#123;</span><br><span class="line">  name: strin</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  eat(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'eat bone'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口扩展"><a href="#接口扩展" class="headerlink" title="接口扩展"></a>接口扩展</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">  eat(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Person <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  work(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Web <span class="keyword">implements</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  eat() &#123;&#125;</span><br><span class="line">  work() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="范型"><a href="#范型" class="headerlink" title="范型"></a>范型</h2><h3 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h3><p>不特定的数据类型<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解决类接口方法复用性。不特定数据类型支持</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">value: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入什么返回什么</span></span><br><span class="line"><span class="comment">// 放弃了类型检查</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">value: <span class="built_in">any</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 范性，可以支持不特定的类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>&lt;<span class="title">T</span>&gt;(<span class="params">value: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getData&lt;<span class="built_in">number</span>&gt;(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数时候指定参数类型</span></span><br></pre></td></tr></table></figure></p><h3 id="类-1"><a href="#类-1" class="headerlink" title="类"></a>类</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Min &#123;</span><br><span class="line">  list: <span class="built_in">number</span>[] = [];</span><br><span class="line">  add(num: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.list.push(num);</span><br><span class="line">  &#125;</span><br><span class="line">  min(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> minNum = <span class="keyword">this</span>.list[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">this</span>.list.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      minNum = minNum &lt; item ? minNum : item</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Min&lt;T&gt; &#123;</span><br><span class="line">  list: T[] = [];</span><br><span class="line">  add(num: T) &#123;</span><br><span class="line">    <span class="keyword">this</span>.list.push(num);</span><br><span class="line">  &#125;</span><br><span class="line">  min(): T &#123;</span><br><span class="line">    <span class="keyword">this</span>.list.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      minNum = minNum &lt; item ? minNum : item)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化时候确定内部类型</span></span><br><span class="line"><span class="keyword">const</span> m1 = <span class="keyword">new</span> Min&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line"><span class="keyword">const</span> m2 = <span class="keyword">new</span> Min&lt;<span class="built_in">string</span>&gt;();</span><br></pre></td></tr></table></figure><h3 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ConfigFn &#123;</span><br><span class="line">  (value1: <span class="built_in">string</span>, vlaue2: <span class="built_in">string</span>): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setData: ConfigFn = <span class="function"><span class="keyword">function</span>(<span class="params">value1: <span class="built_in">string</span>, value2: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value + value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 范型接口</span></span><br><span class="line"><span class="comment">// 第一种写法</span></span><br><span class="line"><span class="keyword">interface</span> ConfigFn &#123;</span><br><span class="line">  &lt;T&gt;(value1: T, value2: T): T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> getData: ConfigFn = <span class="function"><span class="keyword">function</span>&lt;<span class="title">T</span>&gt;(<span class="params">value1: T, value2: T</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value1 + value2;</span><br><span class="line">&#125;</span><br><span class="line">getData&lt;<span class="built_in">number</span>&gt;(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 第二种写法</span></span><br><span class="line"><span class="keyword">interface</span> ConfigFn&lt;T&gt; &#123;</span><br><span class="line">  &lt;T&gt;(value1: T, value2: T): T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> getMyData:ConfigFn&lt;<span class="built_in">number</span>&gt; = getData;</span><br></pre></td></tr></table></figure><p>over..</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TypeScript&quot;&gt;&lt;a href=&quot;#TypeScript&quot; class=&quot;headerlink&quot; title=&quot;TypeScript&quot;&gt;&lt;/a&gt;TypeScript&lt;/h1&gt;&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>单元测试探究</title>
    <link href="http://yoursite.com/2018/05/02/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%8E%A2%E7%A9%B6/"/>
    <id>http://yoursite.com/2018/05/02/单元测试探究/</id>
    <published>2018-05-02T12:31:11.000Z</published>
    <updated>2019-06-17T03:31:20.552Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ol><li>第一问：单元测试到底测试什么？</li></ol><p>答： 根据不同情况来定，如果要保证数据接口稳定，则进行接口测试，对api进行测试。如果是自己写了很多公共组件，则需要对组件进行测试。如果项目流程很多，则需要对页面功能模块测试。如歌页面交互很复杂，则要进行e2e或者进行快照测试</p><ol><li>第二问：是否是覆盖率越高越好？</li></ol><p>答： 当然不是，单元测试应该突出要测试的重点，而不是要每一行代码都测试到</p><ol><li>第三问： 现在主流的单元测试有哪些？</li></ol><p>答： 一种是<code>karma + sion + mocha</code>的组合，一种是由facebook出版的<code>jest</code>，他们各有各的优势</p><h4 id="现在我们使用第一种方案进行单元测试"><a href="#现在我们使用第一种方案进行单元测试" class="headerlink" title="现在我们使用第一种方案进行单元测试"></a>现在我们使用第一种方案进行单元测试</h4><ol><li>安装单元测试</li></ol><p>粗暴一点，直接在package.json 里添加模块使用 <code>yarn</code> 安装<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">"devDependencies": &#123;</span><br><span class="line">  "@vue/cli-plugin-babel": "^3.0.0",</span><br><span class="line">  "@vue/cli-plugin-eslint": "^3.0.0",</span><br><span class="line">  "@vue/cli-plugin-unit-mocha": "^3.3.0",</span><br><span class="line">  "@vue/cli-service": "^3.1.4",</span><br><span class="line">  "axios-mock-adapter": "^1.16.0",</span><br><span class="line">  "babel-eslint": "^10.0.1",</span><br><span class="line">  "chai": "^4.2.0",</span><br><span class="line">  "chai-spies": "^1.0.0",</span><br><span class="line">  "cross-env": "^5.2.0",</span><br><span class="line">  "@vue/test-utils": "^1.0.0-beta.28",</span><br><span class="line">  "karma": "^4.0.0",</span><br><span class="line">  "karma-chai": "^0.1.0",</span><br><span class="line">  "karma-chai-spies": "^0.1.4",</span><br><span class="line">  "karma-chrome-launcher": "^2.2.0",</span><br><span class="line">  "karma-coverage": "^1.1.2",</span><br><span class="line">  "karma-firefox-launcher": "^1.1.0",</span><br><span class="line">  "karma-html-reporter": "^0.2.7",</span><br><span class="line">  "karma-mocha": "^1.3.0",</span><br><span class="line">  "karma-polyfill": "^1.0.0",</span><br><span class="line">  "karma-sourcemap-loader": "^0.3.7",</span><br><span class="line">  "karma-spec-reporter": "0.0.32",</span><br><span class="line">  "karma-webpack": "^4.0.0-rc.5",</span><br><span class="line">  "mocha": "^5.2.0",</span><br><span class="line">  "mocha-webpack": "^1.1.0",</span><br><span class="line">  "mockjs": "^1.0.1-beta3",</span><br><span class="line">  "eslint": "^5.0.0",</span><br><span class="line">  "eslint-config-standard": "^6.2.1",</span><br><span class="line">  "eslint-friendly-formatter": "^2.0.7",</span><br><span class="line">  "eslint-loader": "^2.1.2",</span><br><span class="line">  "eslint-plugin-html": "^2.0.1",</span><br><span class="line">  "eslint-plugin-promise": "^3.5.0",</span><br><span class="line">  "eslint-plugin-standard": "^2.3.1",</span><br><span class="line">  "eslint-plugin-vue": "^5.0.0-0",</span><br><span class="line">  "lint-staged": "^7.2.2",</span><br><span class="line">  "vue-template-compiler": "^2.5.17"</span><br><span class="line">&#125;,</span><br><span class="line">"gitHooks": &#123;</span><br><span class="line">  "pre-commit": "lint-staged"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>配置单元测试模块<br>配置 <code>karma.conf.js</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Karma configuration</span></span><br><span class="line"><span class="comment">// Generated on Wed Jan 30 2019 15:02:45 GMT+0800 (China Standard Time)</span></span><br><span class="line"><span class="keyword">var</span> webpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.config.test.js'</span>)</span><br><span class="line"><span class="keyword">delete</span> webpackConfig.entry</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    config.set(&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// base path that will be used to resolve all patterns (eg. files, exclude)</span></span><br><span class="line">        basePath: <span class="string">''</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// frameworks to use</span></span><br><span class="line">        <span class="comment">// available frameworks: https://npmjs.org/browse/keyword/karma-adapter</span></span><br><span class="line">        frameworks: [<span class="string">'mocha'</span>, <span class="string">'chai-spies'</span>, <span class="string">'chai'</span>],</span><br><span class="line"></span><br><span class="line">        <span class="comment">// list of files / patterns to load in the browser</span></span><br><span class="line">        files: [<span class="string">'./index.js'</span>],</span><br><span class="line"></span><br><span class="line">        <span class="comment">// list of files / patterns to exclude</span></span><br><span class="line">        exclude: [<span class="string">'node_modules'</span>],</span><br><span class="line"></span><br><span class="line">        <span class="comment">// preprocess matching files before serving them to the browser</span></span><br><span class="line">        <span class="comment">// available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor</span></span><br><span class="line">        preprocessors: &#123;</span><br><span class="line">            <span class="string">'./index.js'</span>: [<span class="string">'webpack'</span>, <span class="string">'sourcemap'</span>]</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// test results reporter to use</span></span><br><span class="line">        <span class="comment">// possible values: 'dots', 'progress'</span></span><br><span class="line">        <span class="comment">// available reporters: https://npmjs.org/browse/keyword/karma-reporter</span></span><br><span class="line">        reporters: [<span class="string">'html'</span>, <span class="string">'spec'</span>, <span class="string">'coverage'</span>],</span><br><span class="line"></span><br><span class="line">        coverageReporter: &#123;</span><br><span class="line">            dir: <span class="string">'reports/'</span>,</span><br><span class="line">            reporters: [</span><br><span class="line">                &#123; <span class="attr">type</span>: <span class="string">'text-summary'</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">type</span>: <span class="string">'lcov'</span>, <span class="attr">subdir</span>: <span class="string">'./coverage'</span> &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        htmlReporter: &#123;</span><br><span class="line">            outputDir: <span class="string">'./tests/unit/reports'</span>,</span><br><span class="line">            reportName: <span class="string">'report'</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        webpack: webpackConfig,</span><br><span class="line"></span><br><span class="line">        webpackMiddleware: &#123;</span><br><span class="line">            <span class="comment">// webpack-dev-middleware configuration</span></span><br><span class="line">            <span class="comment">// i. e.</span></span><br><span class="line">            noInfo: <span class="literal">true</span>,</span><br><span class="line">            stats: <span class="string">'errors-only'</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// enable / disable colors in the output (reporters and logs)</span></span><br><span class="line">        colors: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// level of logging</span></span><br><span class="line">        <span class="comment">// possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span></span><br><span class="line">        logLevel: config.LOG_INFO,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// enable / disable watching file and executing tests whenever any file changes</span></span><br><span class="line">        autoWatch: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// start these browsers</span></span><br><span class="line">        <span class="comment">// available browser launchers: https://npmjs.org/browse/keyword/karma-launcher</span></span><br><span class="line">        browsers: [<span class="string">'Chrome'</span>, <span class="string">'ChromeWithoutSecurity'</span>],</span><br><span class="line"></span><br><span class="line">        customLaunchers: &#123;</span><br><span class="line">            ChromeWithoutSecurity: &#123;</span><br><span class="line">                base: <span class="string">'ChromeHeadless'</span>,</span><br><span class="line">                flags: [<span class="string">'--no-sandbox'</span>, <span class="string">'--disable-web-security'</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Continuous Integration mode</span></span><br><span class="line">        <span class="comment">// if true, Karma captures browsers, runs the tests and exits</span></span><br><span class="line">        singleRun: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Concurrency level</span></span><br><span class="line">        <span class="comment">// how many browser should be started simultaneous</span></span><br><span class="line">        concurrency: <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>配置 <code>webpack.conf.test.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">'development'</span>,</span><br><span class="line">    entry: <span class="string">'./src/main.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">        publicPath: <span class="string">'/dist/'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line">            <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span>,</span><br><span class="line">            <span class="string">'@'</span>: path.resolve(<span class="string">'src'</span>),</span><br><span class="line">            <span class="string">'@unit'</span>: path.resolve(<span class="string">'tests/unit'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        extensions: [<span class="string">'*'</span>, <span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.pug$/</span>,</span><br><span class="line">                loader: <span class="string">'pug-html-loader'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(css|scss)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">'vue-style-loader'</span>,</span><br><span class="line">                    <span class="string">'style-loader'</span>,</span><br><span class="line">                    <span class="string">'css-loader'</span>,</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">                loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    compilerOptions: &#123;</span><br><span class="line">                        preserveWhitespace: <span class="literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(jsx?|babel|es6)$/</span>,</span><br><span class="line">                loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|jpg|gif|svg|woff2?|eot|ttf|otf)$/</span>,</span><br><span class="line">                loader: <span class="string">'file-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    name: <span class="string">'[name].[ext]?[hash]'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">        noInfo: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    performance: &#123;</span><br><span class="line">        hints: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: <span class="string">'#inline-source-map'</span>,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">            <span class="string">'process.env'</span>: &#123;</span><br><span class="line">                NODE_ENV: <span class="string">'"testing"'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> VueLoaderPlugin()</span><br><span class="line">    ],</span><br><span class="line">    node: &#123;</span><br><span class="line">        fs: <span class="string">'empty'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置 index.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// require all src files except main.js for coverage.</span></span><br><span class="line"><span class="comment">// you can also change this to match only the subset of files that</span></span><br><span class="line"><span class="comment">// you want coverage for.</span></span><br><span class="line"><span class="comment">// const srcContext = require.context('../../src', true, /^\.\/\w+\/.+$/)</span></span><br><span class="line"><span class="comment">// srcContext.keys().forEach(srcContext)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> componentContext = <span class="built_in">require</span>.context(<span class="string">'../../src/components/'</span>, <span class="literal">true</span>, /^\.\/\w+\/.+$/)</span><br><span class="line"><span class="keyword">const</span> modulesContext = <span class="built_in">require</span>.context(<span class="string">'../../src/views/'</span>, <span class="literal">true</span>, /^\.\/\w+\/.+$/)</span><br><span class="line"><span class="keyword">const</span> serivesContext = <span class="built_in">require</span>.context(<span class="string">'../../src/api/'</span>, <span class="literal">true</span>, /^\.\/\w+\/.+$/)</span><br><span class="line"></span><br><span class="line">componentContext.keys().forEach(componentContext)</span><br><span class="line">modulesContext.keys().forEach(modulesContext)</span><br><span class="line">serivesContext.keys().forEach(serivesContext)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-extend-native */</span></span><br><span class="line"><span class="comment">// require all test files (files that ends with .spec.js)</span></span><br><span class="line"><span class="keyword">const</span> testsContext = <span class="built_in">require</span>.context(<span class="string">'./specs'</span>, <span class="literal">true</span>, /\.spec$/)</span><br><span class="line">testsContext.keys().forEach(testsContext)</span><br></pre></td></tr></table></figure></p><p>然后在新建目录写相关的用例就可以了</p><p>在tests目录下，新建一个文件夹 module, 新建一个文件demo.spec.js </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单元测试用例工具文档 https://vue-test-utils.vuejs.org/zh/api/</span></span><br><span class="line"><span class="keyword">import</span> chai <span class="keyword">from</span> <span class="string">'chai'</span></span><br><span class="line"><span class="keyword">import</span> &#123; shallowMount, createLocalVue &#125; <span class="keyword">from</span> <span class="string">'@vue/test-utils'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> starfish <span class="keyword">from</span> <span class="string">'starfish'</span></span><br><span class="line"><span class="keyword">import</span> filters <span class="keyword">from</span> <span class="string">'@/util/filters'</span></span><br><span class="line"><span class="keyword">import</span> UserOrder <span class="keyword">from</span> <span class="string">'@/views/finance/UserOrder.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> spies = <span class="built_in">require</span>(<span class="string">'chai-spies'</span>)</span><br><span class="line">chai.use(spies)</span><br><span class="line"><span class="keyword">const</span> expect = chai.expect</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>)</span><br><span class="line"><span class="keyword">const</span> MockAdapter = <span class="built_in">require</span>(<span class="string">'axios-mock-adapter'</span>)</span><br><span class="line"><span class="keyword">const</span> mock = <span class="keyword">new</span> MockAdapter(axios)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> localVue = createLocalVue()</span><br><span class="line">localVue.use(VueRouter)</span><br><span class="line">localVue.use(starfish)</span><br><span class="line"><span class="keyword">let</span> routes = [&#123; <span class="attr">path</span>: <span class="string">'/ag/finance/user/order'</span>, <span class="attr">component</span>: UserOrder &#125;]</span><br><span class="line"><span class="keyword">let</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册过滤器</span></span><br><span class="line"><span class="built_in">Object</span>.keys(filters).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    localVue.filter(key, filters[key])</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tokenResp <span class="keyword">from</span> <span class="string">'@/../mock/data/ssoToken.json'</span></span><br><span class="line"><span class="keyword">import</span> userInfoResp <span class="keyword">from</span> <span class="string">'@/../mock/data/userinfo.json'</span></span><br><span class="line"><span class="keyword">import</span> menuResp <span class="keyword">from</span> <span class="string">'@/../mock/data/menu.json'</span></span><br><span class="line"><span class="keyword">import</span> packageResp <span class="keyword">from</span> <span class="string">'@/../mock/data/package.json'</span></span><br><span class="line"><span class="keyword">import</span> userOrderTheadResp <span class="keyword">from</span> <span class="string">'@/../mock/data/userOrderThead.json'</span></span><br><span class="line"><span class="keyword">const</span> getUserOrder = <span class="built_in">require</span>(<span class="string">'../../karma.conf.js'</span>)</span><br><span class="line"><span class="keyword">import</span> orderAmountResp <span class="keyword">from</span> <span class="string">'@/../mock/data/orderAmount.json'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userOrderResp = &#123;</span><br><span class="line">    code: <span class="number">0</span>,</span><br><span class="line">    data: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'Home.vue'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// TODO 对登录状态的处理暂时这样实现</span></span><br><span class="line">    mock.onGet(<span class="string">'xx'</span>).reply(<span class="number">200</span>, tokenResp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> wrapper = shallowMount(UserOrder, &#123;</span><br><span class="line">        localVue,</span><br><span class="line">        router</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'test limit'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> vm = wrapper.vm</span><br><span class="line">        expect(vm.limit).to.equal(<span class="number">20</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行测试<code>yarn test</code></p><p>生成report <code>yarn test --report</code><br>现在就对接口进行了测试</p><h4 id="使用第二种方式只需要安装jest，里面包含了第一种模块的东西。"><a href="#使用第二种方式只需要安装jest，里面包含了第一种模块的东西。" class="headerlink" title="使用第二种方式只需要安装jest，里面包含了第一种模块的东西。"></a>使用第二种方式只需要安装jest，里面包含了第一种模块的东西。</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;第一问：单元测试到底测试什么？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;答： 根据不同情况来定，如果要保证数据接口稳定，则进行接口测试，对a
      
    
    </summary>
    
      <category term="前端工程化" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    
      <category term="前端工程化" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
      <category term="单元测试" scheme="http://yoursite.com/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>添加 download 下载文件</title>
    <link href="http://yoursite.com/2018/04/03/%E6%B7%BB%E5%8A%A0%20download%20%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/04/03/添加 download 下载文件/</id>
    <published>2018-04-03T12:31:11.000Z</published>
    <updated>2019-06-17T03:05:40.135Z</updated>
    
    <content type="html"><![CDATA[<p>最近发现项目按钮页面会闪现一下<br>review 了一下代码原来是模拟点击的a标签中缺少一个属性 <code>download</code></p><p>现在我们看一下具体代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a.text-sm.mt-1(</span><br><span class="line">  target=&quot;_blank&quot;</span><br><span class="line">  href=&quot;/api/xx&quot;</span><br><span class="line">  style=&quot;display: inline-block;text-decoration: underline;&quot;</span><br><span class="line">) 下载文件示例</span><br></pre></td></tr></table></figure></p><p>这里采用的是超链接的下载方法，点击超链接请求一个新窗口，页面会跳转一下，链接指向的是一个接口，返回的是文件数据，所以此时窗口会抖动一下</p><p>现在我们在<code>a</code>标签中加一个<code>download</code>就可以下载文件了而且没有页面闪现的bug，<code>download</code> 是HTML5里面的新增的属性，用来下载文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a.text-sm.mt-1(</span><br><span class="line">  download</span><br><span class="line">  target=&quot;_blank&quot;</span><br><span class="line">  href=&quot;/api/xx&quot;</span><br><span class="line">  style=&quot;display: inline-block;text-decoration: underline;&quot;</span><br><span class="line">) 下载文件示例</span><br></pre></td></tr></table></figure></p><p>为了解决跨域问题，我们同时使用 <code>blob</code>进行接口 <code>fetch</code> 的资源<br>接下来我们将<code>download</code>下载文件的方法封装成一个工具函数来模拟a标签的写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理返回的文件流</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">httpDownlaodFile</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> elink = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>) <span class="comment">// 创建a标签</span></span><br><span class="line">  elink.download = <span class="built_in">decodeURI</span>(</span><br><span class="line">  elink.style.display = <span class="string">'none'</span></span><br><span class="line">  <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([content])</span><br><span class="line">  elink.href = URL.createObjectURL(blob)</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(elink)</span><br><span class="line">  elink.click() <span class="comment">// 触发点击a标签事件</span></span><br><span class="line">  <span class="built_in">document</span>.body.removeChild(elink)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在caniuse和mdn上我们发现<code>download</code>这个属性是html5的，对于ie浏览器不支持，考虑到兼容的问题，这种做法是一种尽量舍弃ie浏览器的做法也是，微软现在也在舍弃ie了，相信不久之后这些兼容问题已不是问题了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近发现项目按钮页面会闪现一下&lt;br&gt;review 了一下代码原来是模拟点击的a标签中缺少一个属性 &lt;code&gt;download&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;现在我们看一下具体代码&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
      <category term="HTML" scheme="http://yoursite.com/categories/HTML/"/>
    
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>使用mock搭建前后分离环境</title>
    <link href="http://yoursite.com/2018/03/13/%E4%BD%BF%E7%94%A8mock%E6%90%AD%E5%BB%BA%E5%89%8D%E5%90%8E%E5%88%86%E7%A6%BB%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2018/03/13/使用mock搭建前后分离环境/</id>
    <published>2018-03-13T12:31:11.000Z</published>
    <updated>2019-06-17T03:44:27.551Z</updated>
    
    <content type="html"><![CDATA[<h4 id="为什么要搭建mock"><a href="#为什么要搭建mock" class="headerlink" title="为什么要搭建mock"></a>为什么要搭建mock</h4><ol><li>真正实现前后分离，后端接口未实现的情况下，前端也能开发</li><li>接口变化情况，前端依然可以开发</li><li>接口数据真实数据没办法反映数据极端情况的状态</li></ol><h4 id="怎么搭建mock"><a href="#怎么搭建mock" class="headerlink" title="怎么搭建mock"></a>怎么搭建mock</h4><ol><li>方法一：使用json-serve</li><li>方法二：使用nodejs或者express和koa搭建</li></ol><p>对于第一种方式可以查阅json-serve文档即可</p><p>简单来说就就三步</p><ol><li>安装模块</li><li>配置config，路由替换相关</li><li>使用mock.js 将data生成模拟数据，并在json服务器上运行</li></ol><p>对于第二种方式，直接使用file文件io来处理。读取json文件，使用node的获取json，解析json数据，最后使用mockjs模拟生成数据,在服务器上响应<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> respond = <span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(fn, <span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将请求url与响应数据做对应</span></span><br><span class="line"><span class="keyword">const</span> MockExpection = <span class="function"><span class="keyword">function</span> <span class="title">MockExpection</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.app = app</span><br><span class="line">&#125;</span><br><span class="line">MockExpection.prototype.expect = <span class="function"><span class="keyword">function</span> (<span class="params">method, apiList</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">this</span>.app</span><br><span class="line">    apiList.forEach(<span class="function">(<span class="params">[url, getMock]</span>) =&gt;</span> &#123;</span><br><span class="line">        app[method](url, (rep, res) =&gt; &#123;</span><br><span class="line">            respond(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                res.json(Mock.mock(getMock(rep.query)))</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    getJsonFile (filePath) &#123;</span><br><span class="line">        <span class="keyword">var</span> json = fs.readFileSync(path.resolve(__dirname, filePath), <span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(json)</span><br><span class="line">    &#125;,</span><br><span class="line">    MockExpection,</span><br><span class="line">    errorResponse: &#123;</span><br><span class="line">        code: <span class="number">1</span>,</span><br><span class="line">        message: <span class="string">'错误的响应'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    successResponse: &#123;</span><br><span class="line">        code: <span class="number">0</span>,</span><br><span class="line">        message: <span class="string">'成功的响应'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其实本质上第二种也是一个json服务器，不过是我们自己写的，不是直接拿的包</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;为什么要搭建mock&quot;&gt;&lt;a href=&quot;#为什么要搭建mock&quot; class=&quot;headerlink&quot; title=&quot;为什么要搭建mock&quot;&gt;&lt;/a&gt;为什么要搭建mock&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;真正实现前后分离，后端接口未实现的情况下，前端也能开发&lt;/li&gt;
      
    
    </summary>
    
      <category term="前端工程化" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    
      <category term="前端工程化" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
      <category term="Mock" scheme="http://yoursite.com/tags/Mock/"/>
    
  </entry>
  
  <entry>
    <title>前端工程化之路：初探 Webpack 打包工具</title>
    <link href="http://yoursite.com/2018/03/01/t-note_webpack_001/"/>
    <id>http://yoursite.com/2018/03/01/t-note_webpack_001/</id>
    <published>2018-03-01T12:33:23.000Z</published>
    <updated>2019-06-14T07:14:41.664Z</updated>
    
    <content type="html"><![CDATA[<p>最近一段时间前端的工具越来越多，让人不禁眼花缭绕。其中也不乏好的工具，比如 Webpack 和 Gulp 两种不同风格的前端工具。感觉再不学都跟不上技术的节奏了。所以最近尝试的去学习了一些。收获也是颇丰。现在记下笔记，以便日后，查看。</p><h3 id="Webpack-作用Webpack-被称为前端打包工具。将项目当作一个整体，通过给定主文件，使用-loaders-处理后生成浏览器可识别的-JavaScript-文件"><a href="#Webpack-作用Webpack-被称为前端打包工具。将项目当作一个整体，通过给定主文件，使用-loaders-处理后生成浏览器可识别的-JavaScript-文件" class="headerlink" title="Webpack 作用Webpack 被称为前端打包工具。将项目当作一个整体，通过给定主文件，使用 loaders 处理后生成浏览器可识别的 JavaScript 文件"></a>Webpack 作用Webpack 被称为前端打包工具。将项目当作一个整体，通过给定主文件，使用 loaders 处理后生成浏览器可识别的 JavaScript 文件</h3><h3 id="Webpack-原理"><a href="#Webpack-原理" class="headerlink" title="Webpack 原理"></a>Webpack 原理</h3><ul><li>模块化，处理依赖关系</li><li>CommonJs 标准</li><li>加载工具，集成在一起</li></ul><h3 id="Webpack-安装"><a href="#Webpack-安装" class="headerlink" title="Webpack 安装"></a>Webpack 安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装</span></span><br><span class="line">npm install -g webpack</span><br><span class="line"><span class="comment"># 安装到项目目录</span></span><br><span class="line">npm install --save-dev webpack</span><br></pre></td></tr></table></figure><h3 id="Webpack-使用"><a href="#Webpack-使用" class="headerlink" title="Webpack 使用"></a>Webpack 使用</h3><p>1.建立npn环境<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure></p><p>2.使用webpack工具<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack &#123;entry file&#125; &#123;destination file&#125;</span><br></pre></td></tr></table></figure></p><p>3.添加配置文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: _dirname + <span class="string">"/app/main.js"</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: _dirname + <span class="string">"/public"</span>,</span><br><span class="line">        filename: <span class="string">"bundle.js"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4.添加调试工具<br>(1)安装<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure></p><p>(2)配置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devtools: <span class="string">"eval-source-map"</span>,</span><br><span class="line">    entry: _dirname + <span class="string">"/app/main.js"</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: _dirname + <span class="string">"/public"</span>,</span><br><span class="line">        filename: <span class="string">"bundle.js"</span></span><br><span class="line">    &#125;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: <span class="string">"./public"</span>,</span><br><span class="line">        historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">        inline: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(3)开启服务器<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">"script": &#123;</span><br><span class="line">    "server": "webpack-dev-server --open"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(4)运行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run server</span><br></pre></td></tr></table></figure></p><p>5.使用loaders</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近一段时间前端的工具越来越多，让人不禁眼花缭绕。其中也不乏好的工具，比如 Webpack 和 Gulp 两种不同风格的前端工具。感觉再不学都跟不上技术的节奏了。所以最近尝试的去学习了一些。收获也是颇丰。现在记下笔记，以便日后，查看。&lt;/p&gt;
&lt;h3 id=&quot;Webpack
      
    
    </summary>
    
      <category term="前端工具" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>React 初探（上）</title>
    <link href="http://yoursite.com/2018/02/13/react%20%E5%88%9D%E6%8E%A2%20%E4%B8%8A/"/>
    <id>http://yoursite.com/2018/02/13/react 初探 上/</id>
    <published>2018-02-13T12:31:11.000Z</published>
    <updated>2019-06-15T01:50:17.817Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><h4 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h4><h4 id="jsx"><a href="#jsx" class="headerlink" title="jsx"></a>jsx</h4><h4 id="绑定数据"><a href="#绑定数据" class="headerlink" title="绑定数据"></a>绑定数据</h4><h4 id="绑定属性"><a href="#绑定属性" class="headerlink" title="绑定属性"></a>绑定属性</h4><h4 id="引入图片"><a href="#引入图片" class="headerlink" title="引入图片"></a>引入图片</h4><h4 id="引入数组"><a href="#引入数组" class="headerlink" title="引入数组"></a>引入数组</h4><h4 id="事件方法"><a href="#事件方法" class="headerlink" title="事件方法"></a>事件方法</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'../assets/images/logo.png'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      name: <span class="string">'home'</span>,</span><br><span class="line">      title: <span class="string">'title'</span>,</span><br><span class="line">      class: 'class',</span><br><span class="line">      <span class="keyword">for</span>: <span class="string">'htmlFor'</span>,</span><br><span class="line">      style: &#123;</span><br><span class="line">        color: <span class="string">'red'</span>,</span><br><span class="line">        marginTop: <span class="string">'1px'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      list: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">      list2: [<span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">key</span>=<span class="string">'1'</span>&gt;</span>l1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>, &lt;h2 key=<span class="string">'2'</span>&gt;l2&lt;<span class="regexp">/h2&gt;]</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 第二种绑定this</span></span><br><span class="line"><span class="regexp">this.getData = this.getData.bind(this)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">run() &#123;</span></span><br><span class="line"><span class="regexp">console.log('run')</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">getData() &#123;</span></span><br><span class="line"><span class="regexp">console.log(this.state.name);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 第三种</span></span><br><span class="line"><span class="regexp">getData = () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">console.log(this.state.name);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">setName = (name) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">this.setState(&#123;</span></span><br><span class="line"><span class="regexp">name: name</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">render() &#123;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ jsx</span></span><br><span class="line"><span class="regexp">const listDom = this.list.map((item, index, arr)=&gt; &#123;</span></span><br><span class="line"><span class="regexp">return &lt;li key=&#123;index&#125;&gt;&#123;item&#125;&lt;/</span>li&gt;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123;<span class="keyword">this</span>.state.name&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;div title=&#123;this.state.title&#125;&gt; &lt;/</span>div&gt;</span><br><span class="line">        &lt;main</span><br><span class="line">          className=&#123;<span class="keyword">this</span>.state.class&#125;</span><br><span class="line">          htmlFor=&#123;<span class="keyword">this</span>.state.for&#125;</span><br><span class="line">          style=&#123;<span class="keyword">this</span>.state.style&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;div className=<span class="string">'content'</span>&gt;</span><br><span class="line">            &lt;img src=&#123;logo&#125; /&gt;</span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;ul&gt;</span></span><br><span class="line"><span class="regexp">&#123;this.state.list&#125;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &#123;listDom&#125;</span><br><span class="line">          &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;ul&gt;</span></span><br><span class="line"><span class="regexp">&#123;</span></span><br><span class="line"><span class="regexp">this.state.list2.map((item, index, arr) &#123;</span></span><br><span class="line"><span class="regexp">return &lt;li key=&#123;index&#125;&gt;&#123;item&#125;&lt;/</span>li&gt;</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">          &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onClick=&#123;this.run&#125;&gt;&lt;button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onClick=&#123;this.getData.bind(this)&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>button&gt;</span><br><span class="line">          &lt;button onClick=&#123;<span class="keyword">this</span>.setData().bind(<span class="keyword">this</span>, <span class="string">'index'</span>)&#125;</span><br><span class="line">          &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/m</span>ain&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default Home;</span></span><br></pre></td></tr></table></figure><h3 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h3><h4 id="表单键盘事件"><a href="#表单键盘事件" class="headerlink" title="表单键盘事件"></a>表单键盘事件</h4><h4 id="双向事件绑定"><a href="#双向事件绑定" class="headerlink" title="双向事件绑定"></a>双向事件绑定</h4><h4 id="非约束组件，约束组件"><a href="#非约束组件，约束组件" class="headerlink" title="非约束组件，约束组件"></a>非约束组件，约束组件</h4><h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  contstructor(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      username: <span class="string">''</span>,</span><br><span class="line">      sex: <span class="number">1</span>,</span><br><span class="line">      address: [&#123;</span><br><span class="line">        id: <span class="number">1</span>,</span><br><span class="line">        name: <span class="string">'广州'</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        id: <span class="number">2</span>,</span><br><span class="line">        name: <span class="string">'杭州'</span></span><br><span class="line">      &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  run = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event.target);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取dom属性</span></span><br><span class="line">    event.target.style.background = <span class="string">'red'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  inputChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过事件对象</span></span><br><span class="line">    <span class="keyword">const</span> username = e.target.value</span><br><span class="line">    <span class="comment">// 通过refs</span></span><br><span class="line">    <span class="keyword">const</span> username = <span class="keyword">this</span>.refs.username</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      username: username</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 键盘事件 keyup,keydown,keypress</span></span><br><span class="line">  inputKeyup = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.keyCode === <span class="number">13</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 处理性别</span></span><br><span class="line">  handleSex = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    e.perventDefault();</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      sex: e.target.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 提交表单</span></span><br><span class="line">  handleSubmit = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      username: <span class="keyword">this</span>.state.username</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">      &lt;form onSubmit=&#123;<span class="keyword">this</span>.handleSubmit&#125;&gt; </span><br><span class="line">        &#123;<span class="comment">/*非约束组件，纯获取*/</span>&#125;</span><br><span class="line">      &lt;input defaultValue=&#123;<span class="keyword">this</span>.state.username&#125; ref=<span class="string">"username"</span>&gt; <span class="xml"><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line">      &#123;<span class="comment">/*约束组件，双向绑定*/</span>&#125;</span><br><span class="line">      &lt;input value=&#123;<span class="keyword">this</span>.state.username&#125; ref=<span class="string">"username"</span> onChange=&#123;<span class="keyword">this</span>.inputChange&#125;/&gt;</span><br><span class="line">      &lt;input type=<span class="string">"radio"</span> value=<span class="string">"1"</span> checked=&#123;<span class="keyword">this</span>.state.sex === <span class="number">1</span>&#125; onChange=&#123;<span class="keyword">this</span>.handleSex&#125;/&gt;男</span><br><span class="line">      &lt;input type=<span class="string">"radio"</span> value=<span class="string">"2"</span> checked=&#123;<span class="keyword">this</span>.state.sex === <span class="number">2</span>&#125; onChange=&#123;<span class="keyword">this</span>.handleSex&#125;/&gt;女</span><br><span class="line">      &lt;input onKeyup=&#123;<span class="keyword">this</span>.inputKeyup&#125;/&gt;</span><br><span class="line">      &lt;input type=<span class="string">"submit"</span> defaultValue=<span class="string">"提交"</span>/&gt;</span><br><span class="line">          &lt;button onClick=&#123;<span class="keyword">this</span>.getData.bind(<span class="keyword">this</span>)&#125;&gt;点击</span><br><span class="line">          &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span><span class="keyword">from</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><h4 id="组件抽离封装"><a href="#组件抽离封装" class="headerlink" title="组件抽离封装"></a>组件抽离封装</h4><h4 id="工具抽离封装"><a href="#工具抽离封装" class="headerlink" title="工具抽离封装"></a>工具抽离封装</h4><h4 id="接口抽离封装"><a href="#接口抽离封装" class="headerlink" title="接口抽离封装"></a>接口抽离封装</h4><h4 id="css工具样式"><a href="#css工具样式" class="headerlink" title="css工具样式"></a>css工具样式</h4><h3 id="父子组件"><a href="#父子组件" class="headerlink" title="父子组件"></a>父子组件</h3><h4 id="定义：相对关系"><a href="#定义：相对关系" class="headerlink" title="定义：相对关系"></a>定义：相对关系</h4><h4 id="传值"><a href="#传值" class="headerlink" title="传值"></a>传值</h4><ol><li>父组件给自组件传值、传方法、整个组件</li></ol><ul><li>调用子组件时候定义属性</li><li>子组件 <code>this.props.name</code></li></ul><ol><li>子组件给父组件传值</li></ol><ul><li>调用组件时候定义属性传方法，绑定值参数<code>this</code>上传参数过去</li><li>子组件上定义属性ref，父组件调用<code>this.refs</code></li></ul><ol><li>defaultProps 默认值 propTypes 限制传值类型<br>父组件</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Admin</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      header: <span class="string">'测试'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  run = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  getChildren = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  getHeader = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.refs.header)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Row className=<span class="string">"container"</span>&gt;</span><br><span class="line">          &lt;Header title=&#123;<span class="keyword">this</span>.state.header&#125; run=&#123;<span class="keyword">this</span>.run&#125; parent=&#123;<span class="keyword">this</span>&#125;             child=&#123;<span class="keyword">this</span>.getChildren&#125;/&gt;</span><br><span class="line">      &lt;<span class="regexp">/Row&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  getParent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.props.parent)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"header"</span>&gt;</span><br><span class="line">        &lt;span&gt;&#123;<span class="keyword">this</span>.props.title&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div className="logo-wrapper"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;img src="" alt="" className="logo" /</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div className="login-group-wrapper"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;button onClick=&#123;this.props.run&#125;&gt;登陆&lt;/</span>button&gt;</span><br><span class="line">          &lt;button onClick=&#123;<span class="keyword">this</span>.getParent&#125;&gt;获取父组件&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Header.PropsTypes = &#123;</span></span><br><span class="line"><span class="regexp">  title: PropsTypes.element.isRequired</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Header.defaultProps = &#123;</span></span><br><span class="line"><span class="regexp">  title: '头部标题'</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h3><h4 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (url, params, type) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (type === <span class="string">'get'</span>) &#123;</span><br><span class="line">    axios.get(url, &#123; params &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="fetch-jsonp"><a href="#fetch-jsonp" class="headerlink" title="fetch-jsonp"></a>fetch-jsonp</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchJsonp = <span class="function"><span class="params">url</span> =&gt;</span> &#123;</span><br><span class="line">  fetchJsonp(url)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><p>Life1: 构造函数<br>Life2: 组件将要挂载<br>Life3: 模版渲染<br>Life4: 组件挂载完成</p><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><p>Life5: 是否更新, nextProps &amp; nextState<br>Life6: 将要更新<br>Life3: 模版渲染<br>Life7: 更新完成</p><h4 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h4><p>Life8: 组件将要卸载</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.scss'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Life1: 构造函数'</span>)</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      todoList: [<span class="string">'下午学习'</span>],</span><br><span class="line">      todoItem: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Life2: 组件将要挂载'</span>)</span><br><span class="line">    <span class="keyword">if</span> (localStorage.getItem(<span class="string">'todoList'</span>)) &#123;</span><br><span class="line">      <span class="keyword">const</span> todoList = <span class="built_in">JSON</span>.parse([localStorage.getItem(<span class="string">'todoList'</span>)])</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        todoList: todoList</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Life4: 组件挂载完成'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Life5: 是否更新, nextProps &amp; nextState`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(nextProps)</span><br><span class="line">    <span class="built_in">console</span>.log(nextState)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUpdate() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Life6: 将要更新'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Life7: 更新完成'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Life8: 将要挂载'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillReceiveProps() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Lifex: 父子组件传值'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  inputChange = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      todoItem: e.target.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleAdd = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.state.todoList.push(<span class="keyword">this</span>.state.todoItem)</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      todoList: <span class="keyword">this</span>.state.todoList,</span><br><span class="line">      todoItem: <span class="string">''</span></span><br><span class="line">    &#125;)</span><br><span class="line">    localStorage.setItem(<span class="string">'todoList'</span>, <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.state.todoList))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleDel = <span class="function"><span class="params">index</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.state.todoList.splice(index, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      todoList: <span class="keyword">this</span>.state.todoList</span><br><span class="line">    &#125;)</span><br><span class="line">    localStorage.setItem(<span class="string">'todoList'</span>, <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.state.todoList))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Life3: 模版渲染'</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"todo"</span>&gt;</span><br><span class="line">        &lt;h2 className=<span class="string">"todo-header"</span>&gt; TODO &lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div className="todo-body"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;input</span></span><br><span class="line"><span class="regexp">            className="todo-input"</span></span><br><span class="line"><span class="regexp">            value=&#123;this.state.todoItem&#125;</span></span><br><span class="line"><span class="regexp">            onChange=&#123;this.inputChange&#125;</span></span><br><span class="line"><span class="regexp">          /</span>&gt;</span><br><span class="line">          &lt;input</span><br><span class="line">            className=<span class="string">"todo-add-btn"</span></span><br><span class="line">            type=<span class="string">"submit"</span></span><br><span class="line">            value=<span class="string">"Add"</span></span><br><span class="line">            onClick=&#123;<span class="keyword">this</span>.handleAdd&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;ul className="todolist"&gt;</span></span><br><span class="line"><span class="regexp">          &#123;this.state.todoList.map((item, index, arr) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">            return (</span></span><br><span class="line"><span class="regexp">              &lt;li key=&#123;index&#125;&gt;</span></span><br><span class="line"><span class="regexp">                &lt;span&gt;&#123;item&#125;&lt;/</span>span&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.handleDel.bind(<span class="keyword">this</span>, index)&#125;&gt;X&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">              &lt;/</span>li&gt;</span><br><span class="line">            )</span><br><span class="line">          &#125;)&#125;</span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-router-dom</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ReactRouterDom <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ul><li>Router 配置</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">'../components/Header'</span></span><br><span class="line"><span class="keyword">import</span> Todo <span class="keyword">from</span> <span class="string">'../components/Todo'</span></span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route, Link &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">RouterApp</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      router: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">'/'</span>,</span><br><span class="line">          component: Header</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">'/todo'</span>,</span><br><span class="line">          component: Todo</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">        path: <span class="string">'/todo/detail/:id'</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Router&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.state.router.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">              &lt;Route exact path=&#123;item.path&#125; component=&#123;item.component&#125; key=&#123;index&#125; /&gt;</span><br><span class="line">            )</span><br><span class="line">          &#125;)&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Router&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Link 跳转（a标签）</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">to</span>=<span class="string">&#123;this.state.href&#125;</span> &gt;</span></span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="路由传值"><a href="#路由传值" class="headerlink" title="路由传值"></a>路由传值</h4><ul><li>动态路由</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">router: [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    component: Header</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/todo'</span>,</span><br><span class="line">    component: Todo</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">  path: <span class="string">'/todo/detail/:id'</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">    id: <span class="keyword">this</span>.props.params.id</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>get 传值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">    id: <span class="keyword">this</span>.props.location.search.id</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用url 模块解析id</span></span><br></pre></td></tr></table></figure><ul><li>localStroage</li></ul><h4 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// redirect</span></span><br><span class="line"><span class="keyword">import</span> &#123; Redirect &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">  <span class="keyword">super</span>(props)</span><br><span class="line">  state = &#123;</span><br><span class="line">    to: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.state.to) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">'/login'</span>&gt;</span></span></span><br><span class="line"><span class="xml">&#125; else &#123;</span></span><br><span class="line"><span class="xml">return <span class="tag">&lt;<span class="name">div</span> /&gt;</span></span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="antd"><a href="#antd" class="headerlink" title="antd"></a>antd</h3><h3 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h3><h4 id="理念"><a href="#理念" class="headerlink" title="理念"></a>理念</h4><ul><li>数据存在store里面</li><li>组件commit到store</li><li>store分发到其他组件</li></ul><h4 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h4><ul><li>Redux = Reducer + Flux</li></ul><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p><img src="/Users/suosmile/Pictures/%E6%88%AA%E5%9B%BE/Xnip2019-05-16_17-17-20.jpg" alt="Xnip2019-05-16_17-17-20"></p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add redux</span><br></pre></td></tr></table></figure><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><ul><li>store.createStore</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducer'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">  reducer,</span><br><span class="line">  <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION__()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><ul><li>reducer</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; CHNAGE_INPUT_VALUE, ADD_TODO_LIST, DEL_TODO_LIST &#125; <span class="keyword">from</span> <span class="string">'./actionTypes'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defaultState = &#123;</span><br><span class="line">  inputValue: <span class="string">''</span>,</span><br><span class="line">  list: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state = defaultState, action) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> newState = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(state))</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> CHNAGE_INPUT_VALUE:</span><br><span class="line">      newState.inputValue = action.value</span><br><span class="line">      <span class="keyword">return</span> newState</span><br><span class="line">    <span class="keyword">case</span> ADD_TODO_LIST:</span><br><span class="line">      newState.list.push(newState.inputValue)</span><br><span class="line">      newState.inputValue = <span class="string">''</span></span><br><span class="line">      <span class="keyword">return</span> newState</span><br><span class="line">    <span class="keyword">case</span> DEL_TODO_LIST:</span><br><span class="line">      newState.list.splice(action.index, <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> newState</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>store.dispatch &amp; store.getState</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Input, Button, List &#125; <span class="keyword">from</span> <span class="string">'antd'</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  getInputChangeAction,</span><br><span class="line">  getAddTodoAction,</span><br><span class="line">  getDelTodoAction</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'../../store/actionCreators'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'../../store'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">todoRedux</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      list: store.getState().list</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.handleChangeStore()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleChangeInput = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    store.dispatch(getInputChangeAction(e.target.value))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleChangeStore = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(store.getState())</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleAdd = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    store.dispatch(getAddTodoAction())</span><br><span class="line">    <span class="keyword">this</span>.handleChangeStore()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleDel = <span class="function"><span class="params">index</span> =&gt;</span> &#123;</span><br><span class="line">    store.dispatch(getDelTodoAction(index))</span><br><span class="line">    <span class="keyword">this</span>.handleChangeStore()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Input</span><br><span class="line">          size=<span class="string">"large"</span></span><br><span class="line">          onChange=&#123;<span class="keyword">this</span>.handleChangeInput&#125;</span><br><span class="line">          style=&#123;&#123; <span class="attr">width</span>: <span class="string">'300px'</span>, <span class="attr">marginRight</span>: <span class="string">'16px'</span>, <span class="attr">marginBottom</span>: <span class="string">'8px'</span> &#125;&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;Button size=<span class="string">"large"</span> type=<span class="string">"primary"</span> onClick=&#123;<span class="keyword">this</span>.handleAdd&#125;&gt;</span><br><span class="line">          添加</span><br><span class="line">        &lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;List</span></span><br><span class="line"><span class="regexp">          style=&#123;&#123; width: '300px' &#125;&#125;</span></span><br><span class="line"><span class="regexp">          size="large"</span></span><br><span class="line"><span class="regexp">          header=&#123;&lt;div&gt;Header&lt;/</span>div&gt;&#125;</span><br><span class="line">          footer=&#123;&lt;div&gt;Footer&lt;<span class="regexp">/div&gt;&#125;</span></span><br><span class="line"><span class="regexp">          bordered</span></span><br><span class="line"><span class="regexp">          dataSource=&#123;this.state.list&#125;</span></span><br><span class="line"><span class="regexp">          renderItem=&#123;(item, index) =&gt; (</span></span><br><span class="line"><span class="regexp">            &lt;List.Item</span></span><br><span class="line"><span class="regexp">              actions=&#123;[</span></span><br><span class="line"><span class="regexp">                &lt;a onClick=&#123;this.handleDel.bind(this, index)&#125;&gt;delete&lt;/a&gt;</span></span><br><span class="line"><span class="regexp">              ]&#125;</span></span><br><span class="line"><span class="regexp">            &gt;</span></span><br><span class="line"><span class="regexp">              &#123;item&#125;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>List.Item&gt;</span><br><span class="line">          )&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>store.subscribe</li><li>actionType &amp; actionCreator</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// actionType</span></span><br><span class="line"><span class="keyword">const</span> CHNAGE_INPUT_VALUE = <span class="string">'change_input_value'</span></span><br><span class="line"><span class="keyword">const</span> ADD_TODO_LIST = <span class="string">'add_todo_list'</span></span><br><span class="line"><span class="keyword">const</span> DEL_TODO_LIST = <span class="string">'del_todo_list'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; CHNAGE_INPUT_VALUE, ADD_TODO_LIST, DEL_TODO_LIST &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// actionCreator</span></span><br><span class="line"><span class="keyword">import</span> &#123; CHNAGE_INPUT_VALUE, ADD_TODO_LIST, DEL_TODO_LIST &#125; <span class="keyword">from</span> <span class="string">'./actionTypes'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getInputChangeAction = <span class="function"><span class="params">value</span> =&gt;</span> (&#123;</span><br><span class="line">  type: CHNAGE_INPUT_VALUE,</span><br><span class="line">  value</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getAddTodoAction = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">  type: ADD_TODO_LIST</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getDelTodoAction = <span class="function"><span class="params">index</span> =&gt;</span> (&#123;</span><br><span class="line">  type: DEL_TODO_LIST,</span><br><span class="line">  index</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><ul><li>store 是唯一的</li><li>只有store能改变自己的内容（数据是store自己改的，reducer只是返回一个新值而已）</li><li>reducer 是纯函数（返回结果是固定的，不允许异步，不允许时间操作，不允许副作用）</li><li>API</li></ul><h4 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h4><ul><li>拆分成容器组件和UI组件</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 容器组件</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  getInputChangeAction,</span><br><span class="line">  getAddTodoAction,</span><br><span class="line">  getDelTodoAction</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'../../store/actionCreators'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'../../store'</span></span><br><span class="line"><span class="keyword">import</span> TodoListUI <span class="keyword">from</span> <span class="string">'./todoListUI'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoList</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      list: store.getState().list,</span><br><span class="line">      value: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.handleChangeStore()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleChangeInput = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    store.dispatch(getInputChangeAction(e.target.value))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleChangeStore = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(store.getState())</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleAdd = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    store.dispatch(getAddTodoAction())</span><br><span class="line">    <span class="keyword">this</span>.handleChangeStore()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleDel = <span class="function"><span class="params">index</span> =&gt;</span> &#123;</span><br><span class="line">    store.dispatch(getDelTodoAction(index))</span><br><span class="line">    <span class="keyword">this</span>.handleChangeStore()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;TodoListUI</span><br><span class="line">        list=&#123;<span class="keyword">this</span>.state.list&#125;</span><br><span class="line">        handleChangeInput=&#123;<span class="keyword">this</span>.handleChangeInput&#125;</span><br><span class="line">        handleAdd=&#123;<span class="keyword">this</span>.handleAdd&#125;</span><br><span class="line">        handleDel=&#123;<span class="keyword">this</span>.handleDel&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UI组件</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Input, Button, List &#125; <span class="keyword">from</span> <span class="string">'antd'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoListUI</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Input</span><br><span class="line">          size=<span class="string">"large"</span></span><br><span class="line">          onChange=&#123;<span class="keyword">this</span>.props.handleChangeInput&#125;</span><br><span class="line">          style=&#123;&#123; <span class="attr">width</span>: <span class="string">'300px'</span>, <span class="attr">marginRight</span>: <span class="string">'16px'</span>, <span class="attr">marginBottom</span>: <span class="string">'8px'</span> &#125;&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;Button size=<span class="string">"large"</span> type=<span class="string">"primary"</span> onClick=&#123;<span class="keyword">this</span>.props.handleAdd&#125;&gt;</span><br><span class="line">          添加</span><br><span class="line">        &lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;List</span></span><br><span class="line"><span class="regexp">          style=&#123;&#123; width: '300px' &#125;&#125;</span></span><br><span class="line"><span class="regexp">          size="large"</span></span><br><span class="line"><span class="regexp">          header=&#123;&lt;div&gt;Header&lt;/</span>div&gt;&#125;</span><br><span class="line">          footer=&#123;&lt;div&gt;Footer&lt;<span class="regexp">/div&gt;&#125;</span></span><br><span class="line"><span class="regexp">          bordered</span></span><br><span class="line"><span class="regexp">          dataSource=&#123;this.props.list&#125;</span></span><br><span class="line"><span class="regexp">          renderItem=&#123;(item, index) =&gt; (</span></span><br><span class="line"><span class="regexp">            &lt;List.Item</span></span><br><span class="line"><span class="regexp">              actions=&#123;[</span></span><br><span class="line"><span class="regexp">                &lt;a onClick=&#123;this.props.handleDel.bind(this, index)&#125;&gt;delete&lt;/a&gt;</span></span><br><span class="line"><span class="regexp">              ]&#125;</span></span><br><span class="line"><span class="regexp">            &gt;</span></span><br><span class="line"><span class="regexp">              &#123;item&#125;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>List.Item&gt;</span><br><span class="line">          )&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>无状态组件（无逻辑使用）</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todoList = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>props.name<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>redux + ajax</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'http://localhost:3200/data'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  store.dispatch(initDataAction(res.data))</span><br><span class="line">  <span class="keyword">this</span>.handleChangeStore()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="redux-中间件"><a href="#redux-中间件" class="headerlink" title="redux 中间件"></a>redux 中间件</h4><ul><li><code>thunk</code> 中间件</li><li><ul><li><code>action</code> + <code>store</code> 中间</li></ul></li><li><ul><li>升级<code>action</code>函数</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware, compose &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducer'</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> composeEnhancers = <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span><br><span class="line">  ? <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(&#123;&#125;)</span><br><span class="line">  : compose</span><br><span class="line"><span class="keyword">const</span> enhancer = composeEnhancers(applyMiddleware(thunk))</span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer, enhancer)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// actionCreator</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getTodoList = <span class="function"><span class="params">update</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line">    axios.get(<span class="string">'http://localhost:3200/data'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> action = initDataAction(res.data)</span><br><span class="line">      dispatch(action)</span><br><span class="line">      update()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;React&quot;&gt;&lt;a href=&quot;#React&quot; class=&quot;headerlink&quot; title=&quot;React&quot;&gt;&lt;/a&gt;React&lt;/h1&gt;&lt;h2 id=&quot;基础用法&quot;&gt;&lt;a href=&quot;#基础用法&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>各大编辑器快捷键收集</title>
    <link href="http://yoursite.com/2018/01/17/t-note_kj_001/"/>
    <id>http://yoursite.com/2018/01/17/t-note_kj_001/</id>
    <published>2018-01-17T14:34:22.000Z</published>
    <updated>2018-06-30T16:32:58.900Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Sublime-text-转载"><a href="#Sublime-text-转载" class="headerlink" title="Sublime text [转载]"></a>Sublime text [转载]</h4><ul><li>Mac版</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">作者：77plus</span><br><span class="line">链接：https://www.zhihu.com/question/39190896/answer/264524567</span><br><span class="line"></span><br><span class="line">cmd+n 新建页面</span><br><span class="line">cmd+数字键 切换到对应页面</span><br><span class="line">cmd+p 搜索跳转到对应页</span><br><span class="line">cmd+w 关闭页面</span><br><span class="line">cmd+j 合并一行</span><br><span class="line">cmd+d 选中当前单词，继续敲可以选中多个</span><br><span class="line">cmd+l 选中当前行</span><br><span class="line">cmd+z 撤销</span><br><span class="line">cmd+c 复制</span><br><span class="line">cmd+v 粘贴</span><br><span class="line">cmd+s 保存</span><br><span class="line">cmd+x 删除当前行</span><br><span class="line">cmd+delete 删除光标定位到当前行起始的一块</span><br><span class="line">cmd+]缩进当前行，[回缩当前行，对应tab/<span class="built_in">shift</span>+tab功能</span><br><span class="line">cmd+enter 向下开辟一行</span><br><span class="line">cmd+<span class="built_in">shift</span>+enter 向上开辟一行</span><br><span class="line">cmd+f 查询内容</span><br><span class="line">cmd+<span class="built_in">shift</span>+f 全局查询，可替换</span><br><span class="line">cmd+g 查询到的内容下一个</span><br><span class="line">cmd+鼠标右键 多点编辑</span><br><span class="line">cmd+~ 调出控制台</span><br><span class="line">cmd+k <span class="keyword">then</span> u 大写</span><br><span class="line">cmd+k <span class="keyword">then</span> l 小写</span><br><span class="line">cmd+<span class="built_in">shift</span>+p 调出命令面板</span><br><span class="line">cmd+⬅️ 光标定位到当前行最前 +<span class="built_in">shift</span> 选中</span><br><span class="line">cmd+➡️ 光标定位到当前行最后 +<span class="built_in">shift</span> 选中</span><br><span class="line">cmd+⬇️ 光标定位到当前页最后 +<span class="built_in">shift</span> 选中</span><br><span class="line">cmd+⬆️ 光标定位到当前页最前 +<span class="built_in">shift</span> 选中</span><br><span class="line"></span><br><span class="line">ctrl+g 跳转到对应行号</span><br><span class="line">ctrl+tab 切换到下一个页面</span><br><span class="line">ctrl+<span class="built_in">shift</span>+tab 切换到上一个页面</span><br><span class="line">ctrl+delete 删除光标定位到当前单词起始的一块</span><br><span class="line"></span><br><span class="line">opt+鼠标左键 纵向选择编辑</span><br><span class="line">opt+⬅️ 光标定位到当前块最前 +<span class="built_in">shift</span> 选中</span><br><span class="line">opt+➡️ 光标定位到当前块最后 +<span class="built_in">shift</span> 选中</span><br></pre></td></tr></table></figure><h4 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Sublime-text-转载&quot;&gt;&lt;a href=&quot;#Sublime-text-转载&quot; class=&quot;headerlink&quot; title=&quot;Sublime text [转载]&quot;&gt;&lt;/a&gt;Sublime text [转载]&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Mac版&lt;/li
      
    
    </summary>
    
      <category term="通用工具" scheme="http://yoursite.com/categories/%E9%80%9A%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="编辑器" scheme="http://yoursite.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>git熟练运用</title>
    <link href="http://yoursite.com/2017/12/23/t-note_git_001/"/>
    <id>http://yoursite.com/2017/12/23/t-note_git_001/</id>
    <published>2017-12-23T12:33:23.000Z</published>
    <updated>2018-01-17T06:10:59.010Z</updated>
    
    <content type="html"><![CDATA[<h4 id="git与gitflow使用"><a href="#git与gitflow使用" class="headerlink" title="git与gitflow使用"></a>git与gitflow使用</h4><p>自从接触 git 来一直用一些简单的命令，但是最近工作经常遇到一些 git 的这种那种麻烦冲突，所以决定一定要熟练使用，先列出一个清单，然后多记多用，直到熟练为止</p><h4 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建本地 git 仓库</span></span><br><span class="line">git init [repoName]</span><br><span class="line"><span class="comment"># 克隆远程仓库</span></span><br><span class="line">git <span class="built_in">clone</span> [repoUrl]</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看配置内容</span></span><br><span class="line">git config --list</span><br><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">git config -e</span><br><span class="line"><span class="comment"># 配置姓名</span></span><br><span class="line">git config [--global] user.name <span class="string">"suoyue"</span></span><br><span class="line"><span class="comment"># 配置邮箱 </span></span><br><span class="line">git config [--glabal] .user.email <span class="string">"email"</span></span><br></pre></td></tr></table></figure><h4 id="分解"><a href="#分解" class="headerlink" title="分解"></a>分解</h4><p>平时我们</p><ul><li>工作区(workspace):平时编写代码的地方,本地的文件</li><li>暂存区(stash):我们在提交到本地仓库前的一个暂存处</li><li>本地仓库(repo)：提交后的本地仓库</li><li>远程仓库(remote)：远端的一个代码托管的仓库</li></ul><h4 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h4><ul><li>未跟踪(untracked)</li><li>未修改(ummodified)</li><li>已修改(modified)</li><li>已暂存(stashed)</li></ul><h4 id="添加、删除"><a href="#添加、删除" class="headerlink" title="添加、删除"></a>添加、删除</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加工作区改变的到暂存区</span></span><br><span class="line">git add [file1] [file2]</span><br><span class="line"><span class="comment"># 编辑工作区与本地不同的地方</span></span><br><span class="line">git add -e</span><br><span class="line"><span class="comment"># 添加所有修改或者删除的文件</span></span><br><span class="line">git add -u</span><br><span class="line"><span class="comment"># 添加变动的文件到暂存区</span></span><br><span class="line">git add -A</span><br><span class="line"><span class="comment"># 移除暂存区文件</span></span><br><span class="line">git rm [file1] [file2]</span><br><span class="line"><span class="comment"># 停止追踪某个文件</span></span><br><span class="line">git rm --cached [file1] [file2]</span><br><span class="line"><span class="comment"># 改名</span></span><br><span class="line">git mv [oriFile] [distFile]</span><br></pre></td></tr></table></figure><h4 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区的文件到仓库</span></span><br><span class="line">git commit -m <span class="string">"test commit"</span></span><br><span class="line">git commit [file1] [file2] -m <span class="string">"test commit"</span></span><br><span class="line"><span class="comment"># 全部直接提交</span></span><br><span class="line">git commit -a</span><br><span class="line"><span class="comment"># 显示diff</span></span><br><span class="line">git commit -v</span><br><span class="line"><span class="comment"># 替代上次提交</span></span><br><span class="line">git commit -ament -m <span class="string">"replace commit last"</span></span><br><span class="line">git commit -ament [file1] [file2] -m <span class="string">"replace commit last"</span></span><br></pre></td></tr></table></figure><h4 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用checkout </span></span><br><span class="line"><span class="comment"># 恢复暂存区文件到工作区 stash --&gt; work （撤销暂存）</span></span><br><span class="line">git checkout [file]</span><br><span class="line">git checkout</span><br><span class="line"><span class="comment"># 恢复某个commit到暂存区和工作区</span></span><br><span class="line">git checkout [commit] [file]</span><br><span class="line"><span class="comment"># 重置暂存区到仓库 stash --&gt; repo</span></span><br><span class="line">git reset [file]</span><br><span class="line">git reset [commit]</span><br><span class="line"><span class="comment"># 回滚commit stash &amp; work --&gt; repo (回滚提交)</span></span><br><span class="line">git reset --hard <span class="comment">#上一次</span></span><br><span class="line">git reset --hard [commit] <span class="comment">#指定</span></span><br><span class="line"><span class="comment"># 回滚commit 但是工作区和暂存区不变</span></span><br><span class="line">git reset --keep [commit] <span class="comment">#指定</span></span><br><span class="line"><span class="comment"># 新建commit 回滚应用当前分支</span></span><br><span class="line">git revert [commit]</span><br></pre></td></tr></table></figure><h4 id="忽略"><a href="#忽略" class="headerlink" title="忽略"></a>忽略</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑 git 忽略配置文件</span></span><br><span class="line">vim .gitignore</span><br><span class="line"><span class="comment"># 被写 git 忽略文件, git add 会自动忽略它</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># .gitignore 自动忽略log文件和文件名为suo结尾的文件</span></span><br><span class="line">*.<span class="built_in">log</span></span><br><span class="line">*suo</span><br></pre></td></tr></table></figure><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看本地分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="comment"># 查看远程的分支</span></span><br><span class="line">git branch -vgit</span><br><span class="line"><span class="comment"># 查看已跟踪到远程和本地所有分支</span></span><br><span class="line">git branch -a</span><br><span class="line"><span class="comment"># 新建一个分支名为ss的分支（不切换）</span></span><br><span class="line">git branch ss</span><br><span class="line"><span class="comment"># 新建一个分支名为test的分支并切换过去</span></span><br><span class="line">git checkout -b <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 切换分支并更新工作区</span></span><br><span class="line">git checkout ss</span><br><span class="line"><span class="comment"># 合并分支到当前</span></span><br><span class="line">git merge <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 如果有冲突手动改代码在添加提交</span></span><br><span class="line"><span class="comment"># 删除不用分支</span></span><br><span class="line">git checkout -d <span class="built_in">test</span> -m</span><br><span class="line"><span class="comment"># 新建远程分支</span></span><br><span class="line">git push origin ss:ss</span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">git push origin --delete ss</span><br><span class="line"><span class="comment"># 建立远程追踪关系</span></span><br><span class="line">git branch --<span class="built_in">set</span>-upstream-to=origin/ss <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h4 id="远程"><a href="#远程" class="headerlink" title="远程"></a>远程</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载远程变动</span></span><br><span class="line">git fetch xx </span><br><span class="line"><span class="comment"># 显示远程分支</span></span><br><span class="line">git remote -v</span><br><span class="line"><span class="comment"># 显示远程仓库信息</span></span><br><span class="line">git remote show xx</span><br><span class="line"><span class="comment"># 增加远程仓库</span></span><br><span class="line">git remote add xx[name] xx[url]</span><br><span class="line"><span class="comment"># 拉取远程变化,合并本地</span></span><br><span class="line">git pull xx[remote] xx[b]</span><br><span class="line"><span class="comment"># 推送本地到远程仓库</span></span><br><span class="line">git push xx[remote] xx[b]</span><br><span class="line"><span class="comment"># 强推，全推</span></span><br><span class="line">git push xx[remote] --force/--all</span><br></pre></td></tr></table></figure><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示变更文件</span></span><br><span class="line">git status</span><br><span class="line"><span class="comment"># 当前分支版本信息</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line">git reflog</span><br><span class="line">git <span class="built_in">log</span> --follow [file]</span><br><span class="line">git whatchanged [file] <span class="comment"># 追踪文件修改</span></span><br><span class="line">git <span class="built_in">log</span> -p [file] <span class="comment"># 文件相关diff</span></span><br><span class="line">git blame [file] <span class="comment"># 追责</span></span><br><span class="line"><span class="comment"># 比较</span></span><br><span class="line">git diff <span class="comment"># 暂存区与工作区</span></span><br><span class="line">git diff --cached [file] <span class="comment"># 暂存区与上一个commit</span></span><br><span class="line">git diff HEAD <span class="comment"># 工作区与最新commit</span></span><br><span class="line">git show [commit] <span class="comment"># commit的内容变化</span></span><br><span class="line">git show [commit] [file]</span><br></pre></td></tr></table></figure><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><ul><li>拉取远程合并本地（切换分支-&gt;拉取-&gt;修改-&gt;提交-&gt;推送）</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git commit -am <span class="string">'xx'</span> [提交] [or] git stash [暂存]</span><br><span class="line">git checkout xx [切换分支]</span><br><span class="line">git status [查看状态]</span><br><span class="line">git pull [拉取远程并合并]</span><br><span class="line">git <span class="built_in">log</span> [查看历史]</span><br><span class="line">git diff [对比]</span><br><span class="line">git status [查看忽略文件]</span><br><span class="line">git commit -am <span class="string">'xx'</span> [提交修改]</span><br><span class="line">git push [推到远程]</span><br></pre></td></tr></table></figure><ul><li>本地修复issue分支 (切换并新建分支-&gt;修改-&gt;提交-&gt;切回-&gt;合并-&gt;删除临时分支)</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b new-issue [切换新分支]</span><br><span class="line">git status [重要]</span><br><span class="line">git diff [对比]</span><br><span class="line">git commit -am <span class="string">"xx"</span></span><br><span class="line">git checkout ss [切换]</span><br><span class="line">git merge new-issue [合并分支]</span><br><span class="line">git checkout -d new-issue [删除分支]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;git与gitflow使用&quot;&gt;&lt;a href=&quot;#git与gitflow使用&quot; class=&quot;headerlink&quot; title=&quot;git与gitflow使用&quot;&gt;&lt;/a&gt;git与gitflow使用&lt;/h4&gt;&lt;p&gt;自从接触 git 来一直用一些简单的命令，但是最近工
      
    
    </summary>
    
      <category term="通用工具" scheme="http://yoursite.com/categories/%E9%80%9A%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>各大编辑器快捷键收集</title>
    <link href="http://yoursite.com/2017/12/17/t-note_tools_001/"/>
    <id>http://yoursite.com/2017/12/17/t-note_tools_001/</id>
    <published>2017-12-17T14:34:22.000Z</published>
    <updated>2019-06-14T07:04:02.111Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Sublime-text-转载"><a href="#Sublime-text-转载" class="headerlink" title="Sublime text [转载]"></a>Sublime text [转载]</h4><ul><li>Mac版</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">作者：77plus</span><br><span class="line">链接：https://www.zhihu.com/question/39190896/answer/264524567</span><br><span class="line"></span><br><span class="line">cmd+n 新建页面</span><br><span class="line">cmd+数字键 切换到对应页面</span><br><span class="line">cmd+p 搜索跳转到对应页</span><br><span class="line">cmd+w 关闭页面</span><br><span class="line">cmd+j 合并一行</span><br><span class="line">cmd+d 选中当前单词，继续敲可以选中多个</span><br><span class="line">cmd+l 选中当前行</span><br><span class="line">cmd+z 撤销</span><br><span class="line">cmd+c 复制</span><br><span class="line">cmd+v 粘贴</span><br><span class="line">cmd+s 保存</span><br><span class="line">cmd+x 删除当前行</span><br><span class="line">cmd+delete 删除光标定位到当前行起始的一块</span><br><span class="line">cmd+]缩进当前行，[回缩当前行，对应tab/<span class="built_in">shift</span>+tab功能</span><br><span class="line">cmd+enter 向下开辟一行</span><br><span class="line">cmd+<span class="built_in">shift</span>+enter 向上开辟一行</span><br><span class="line">cmd+f 查询内容</span><br><span class="line">cmd+<span class="built_in">shift</span>+f 全局查询，可替换</span><br><span class="line">cmd+g 查询到的内容下一个</span><br><span class="line">cmd+鼠标右键 多点编辑</span><br><span class="line">cmd+~ 调出控制台</span><br><span class="line">cmd+k <span class="keyword">then</span> u 大写</span><br><span class="line">cmd+k <span class="keyword">then</span> l 小写</span><br><span class="line">cmd+<span class="built_in">shift</span>+p 调出命令面板</span><br><span class="line">cmd+⬅️ 光标定位到当前行最前 +<span class="built_in">shift</span> 选中</span><br><span class="line">cmd+➡️ 光标定位到当前行最后 +<span class="built_in">shift</span> 选中</span><br><span class="line">cmd+⬇️ 光标定位到当前页最后 +<span class="built_in">shift</span> 选中</span><br><span class="line">cmd+⬆️ 光标定位到当前页最前 +<span class="built_in">shift</span> 选中</span><br><span class="line"></span><br><span class="line">ctrl+g 跳转到对应行号</span><br><span class="line">ctrl+tab 切换到下一个页面</span><br><span class="line">ctrl+<span class="built_in">shift</span>+tab 切换到上一个页面</span><br><span class="line">ctrl+delete 删除光标定位到当前单词起始的一块</span><br><span class="line"></span><br><span class="line">opt+鼠标左键 纵向选择编辑</span><br><span class="line">opt+⬅️ 光标定位到当前块最前 +<span class="built_in">shift</span> 选中</span><br><span class="line">opt+➡️ 光标定位到当前块最后 +<span class="built_in">shift</span> 选中</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Sublime-text-转载&quot;&gt;&lt;a href=&quot;#Sublime-text-转载&quot; class=&quot;headerlink&quot; title=&quot;Sublime text [转载]&quot;&gt;&lt;/a&gt;Sublime text [转载]&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Mac版&lt;/li
      
    
    </summary>
    
      <category term="通用工具" scheme="http://yoursite.com/categories/%E9%80%9A%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="编辑器" scheme="http://yoursite.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>一周上手 vue 框架：&lt;下篇&gt;</title>
    <link href="http://yoursite.com/2017/12/13/t-note_vue_002/"/>
    <id>http://yoursite.com/2017/12/13/t-note_vue_002/</id>
    <published>2017-12-13T12:33:23.000Z</published>
    <updated>2017-12-13T01:39:58.940Z</updated>
    
    <content type="html"><![CDATA[<h4 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h4><p>1.单组件过渡<br>2.初始渲染过渡<br>3.多组件过渡<br>4.列表过渡<br>5.可复用过渡<br>6.动态过渡<br>7.状态过渡</p><h4 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h4><p>混合mixins 分发vue组件中可复用功能的非常灵活的方式，混合对象可以包含任意组件选项<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">myMinxi = &#123;</span><br><span class="line">    created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hello()</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        hello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'hello from mixin!'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Component = Vue.extend(&#123;</span><br><span class="line">    mixins: [myMixin]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> component = <span class="keyword">new</span> Component()</span><br></pre></td></tr></table></figure></p><p>1.选项合并<br>组件和混合对象含有同名选项时，这些选项以恰当的方式混合<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mixin = &#123;</span><br><span class="line">    created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'混合对象的钩子被调用'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    mixins: [mixin],</span><br><span class="line">    created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'组件的钩子被调用'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 注意，命名冲突取组件对象的键值对</span></span><br></pre></td></tr></table></figure></p><p>2.全局混合<br>全局注册混合对象，一旦使用全局混合对象，将会影响到所有之后创建的vue 实例。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue.mixin(&#123;</span><br><span class="line">    created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> myOption = <span class="keyword">this</span>.$option.myOption</span><br><span class="line">        <span class="keyword">if</span> (myOption) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(myOption)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    myOption: <span class="string">'hello'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>3.自定义选项合并(省)</p><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><p>1.开发插件<br>全局插件</p><ul><li>添加全局方法或者属性</li><li>添加全局资源</li><li>通过全局 mixin 方法，添加一些组件选项</li><li>添加 Vue 实例方法，通过把他们添加到 Vue.prototype 上实现</li><li>一个库，提供自己的API，同时提供提到的一个或者多个功能<br>方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">myPlugin.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">    Vue.myGlobalMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    Vue.directive(<span class="string">'my-directive'</span>, &#123;</span><br><span class="line">        bind(el, binding, vnode, oldVnode)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>2.使用插件<br>通过全局方法使用插件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.use(MyPlugin)</span><br><span class="line"><span class="comment">// </span></span><br><span class="line">Vue.use(MyPlugin, &#123; <span class="attr">someOption</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"><span class="comment">// 自动阻止多次注册相同插件，只会注册一次</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用 Browserify 或者 webpack 提供的commonJS模块环境时</span></span><br><span class="line"><span class="keyword">var</span> Vue = <span class="built_in">require</span>(<span class="string">'vue'</span>)</span><br><span class="line"><span class="keyword">var</span> VueRouter = <span class="built_in">require</span>(<span class="string">'vue-router'</span>)</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br></pre></td></tr></table></figure><h4 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h4><p>用于常见的文本格式化，过滤用在两个地方：双花括号插值和v-bind表达式<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; msg | capitalize &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"rawId|formatId"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p>单页应用非常简单，增加路由后，要将组件映射到路由，然后告诉vue-router在哪里渲染他们<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello App<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用 router-link 组件来导航 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通过传人 `to` 属性指定链接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/foo"</span>&gt;</span>Go to Foo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/bar"</span>&gt;</span>Go to Bar<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由出口 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.定义组件</span></span><br><span class="line"><span class="keyword">const</span> Foo = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;foo&lt;/div&gt;'</span> &#125;</span><br><span class="line"><span class="keyword">const</span> Bar = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;bar&lt;/div&gt;'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.定义路由</span></span><br><span class="line"><span class="keyword">const</span> routers = [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/foo'</span>, <span class="attr">component</span>: Foo &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/bar'</span>, <span class="attr">component</span>: Bar &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.创建 router 实例，然后 `routers` 配置</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.创建和挂载根实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    router</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><h4 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h4><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;动画&quot;&gt;&lt;a href=&quot;#动画&quot; class=&quot;headerlink&quot; title=&quot;动画&quot;&gt;&lt;/a&gt;动画&lt;/h4&gt;&lt;p&gt;1.单组件过渡&lt;br&gt;2.初始渲染过渡&lt;br&gt;3.多组件过渡&lt;br&gt;4.列表过渡&lt;br&gt;5.可复用过渡&lt;br&gt;6.动态过渡&lt;br&gt;7.状态过
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="框架" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>一周上手 vue 框架：&lt;上篇&gt;</title>
    <link href="http://yoursite.com/2017/12/12/t-note_vue_001/"/>
    <id>http://yoursite.com/2017/12/12/t-note_vue_001/</id>
    <published>2017-12-12T12:33:23.000Z</published>
    <updated>2018-01-17T06:53:47.500Z</updated>
    
    <content type="html"><![CDATA[<p>接触 vue 时间并不长，之前一直用的 react，也很想学习一下 Vue，但是没有什么机会去接触。刚入职不久，公司用的 Vue，用了3-5天的时间学习了下 Vue 的官方教程。知识点还挺多的，现在重新梳理一遍，以备后续查看。</p><h2 id="一周内-Vue-框架快速上手"><a href="#一周内-Vue-框架快速上手" class="headerlink" title="一周内 Vue 框架快速上手"></a>一周内 Vue 框架快速上手</h2><p>首先列一个计划，打算一个星期能上手 Vue 的中型项目，任务还有点重，给自己加下油。</p><h3 id="计划表"><a href="#计划表" class="headerlink" title="计划表"></a>计划表</h3><table><thead><tr><th>时间</th><th>任务 </th></tr></thead><tbody><tr><td>周一</td><td><a href="https://cn.vuejs.org/v2/guide/list.html" target="_blank" rel="noopener">学习官方教程</a></td></tr><tr><td>周二</td><td><a href="">vue-demo</a></td></tr><tr><td>周三</td><td><a href="">vue-todo-list</a></td></tr><tr><td>周四</td><td><a href="">vue-exam-system</a></td></tr><tr><td>周五</td><td><a href="">vue-elma-admin</a></td></tr><tr><td>周六</td><td><a href="">总结</a></td></tr><tr><td>周日</td><td><a href="">整理</a></td></tr></tbody></table><h3 id="基础准备"><a href="#基础准备" class="headerlink" title="基础准备"></a>基础准备</h3><ul><li>HTML 基本标签语法(掌握）</li><li>CSS 基本语法(掌握）</li><li>JavaScript ES5以上的语法（掌握)</li><li>Jslint (掌握）</li><li>前端组件化(了解)</li><li>前端工程化 webpack(掌握)</li><li>UMD 模块标准(掌握)</li><li>Sass css编程式写法</li><li>npm 命令基本使用</li></ul><h3 id="官方教程知识点汇总"><a href="#官方教程知识点汇总" class="headerlink" title="官方教程知识点汇总"></a>官方教程知识点汇总</h3><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ol><li><p>直接引入 vue.js 文件<br>新手入门先用引入的js文件来做一些 demo，再过渡到大型的单文件的环境中去</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在线引入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 本地引入 这个js文件需要到官方网站里面下载，有压缩版的，和非压缩的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>构建工具环境<br>之后学习完路由之后才能理解里面的构建形式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 全局安装vue-cli</span></span><br><span class="line">npm install --global vue-cli</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一个webpack 模版的新项目</span></span><br><span class="line">vue init webpack my-project</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖</span></span><br><span class="line">cd my-project</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure></li></ol><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><p>1.插值<br>简单的理解就是，我们现在在 html 里面增加我们的模版的语法，框架后期会帮我编译成原生的 html<br>插入的值的部分就是我们页面中动态的部分，也就是可以变化的。不仅可以插入变量，还可以插入 js 的值表达式，甚至动态的属性<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 插文本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 插HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">"rawHtml"</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 插特性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"dynamicId"</span>&gt;</span>suo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 插js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; number + 1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>2.指令（directives）<br>这些带有 v- 前缀的属性就是我们所说的指令。作用是响应式的作用于 dom，也就是让我们可以通过我们插值的变化来改变 dom</p><p>(1)常用指令汇总</p><table><thead><tr><th>指令</th><th>作用 </th></tr></thead><tbody><tr><td>v-model</td><td>表单输入绑定</td></tr><tr><td>v-html</td><td>插入原生html</td></tr><tr><td>v-bind</td><td>对属性绑定值</td></tr><tr><td>v-on</td><td>对组件绑定事件</td></tr><tr><td>v-if</td><td>分支判断功能</td></tr><tr><td>v-show</td><td>切换CSS的display</td></tr><tr><td>v-for</td><td>循环迭代功能</td></tr></tbody></table><p>(2)指令的参数<br>每个指令有不同的功能，而每个功能有不同的小功能，所以可以使用参数来，缩小功能的范围，比如<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- v-bind:参数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 给href绑定一个动态的URL --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- v-on:参数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加一个点击事件行为 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">v-on:click</span>=<span class="string">"action"</span> &gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>(3)指令的修饰符<br>这个是来说明以什么样的方式来绑定<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 告诉v-on指令对于触发的事件调用event.preventDefault --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>3.缩写</p><ul><li>v-on 缩写成@</li><li>v-bind 缩写成：</li></ul><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>我们写好了模版，现在要使用 js 来操作这个模版，Vue 已经封装好了一个操作的方法，我们之间实例化就好了<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; reversedMsg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="comment">// 选择结点</span></span><br><span class="line">    el: <span class="string">'#example'</span>,</span><br><span class="line">    <span class="comment">// 数据</span></span><br><span class="line">    data: &#123;</span><br><span class="line">        msg: <span class="string">'suo'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 计算方法</span></span><br><span class="line">    computed: &#123;</span><br><span class="line">        reversedMsg: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.msg.split(<span class="string">''</span>).reversedMsg().join(<span class="string">''</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        fullname: &#123;</span><br><span class="line">            get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            set: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 通用方法</span></span><br><span class="line">    methods: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 侦听方法</span></span><br><span class="line">    watch: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 组件列表</span></span><br><span class="line">    components: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h4><p>1.属性绑定 v-bind<br>(1)Class<br>动态的操作 class, 可以与普通 class共存<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123; active: isActive, 'text-danger': hasError&#125;"</span> <span class="attr">class</span>=<span class="string">"static"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#example'</span>,</span><br><span class="line">    date: &#123;</span><br><span class="line">        isActive: <span class="literal">true</span>,</span><br><span class="line">        hasError: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>(2)Style<br>动态绑定内联样式<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    activeColor: <span class="string">'red'</span>,</span><br><span class="line">    fontSize: <span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.条件渲染 v-if 与 v-show<br>简单的判断指令的使用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"name"</span>&gt;</span>suo<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>yue<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>使用一组元素<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>what's app?<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>author: shaosuo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>新增多分支的判断<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"type === 'A"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"type === 'B"</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"type === 'C"</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>Not A/B/C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>使用 v-show 来控制显示</p><p>3.列表渲染 v-for<br>使用 v-for 指令来循环，减少代码的冗余，每个列表都是一样的，尽量绑定一个id来识别选项<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 模板中使用 v-for，items 数组中，迭代每一项 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lu</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">        &#123;&#123; item.msg &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">lu</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只要在 data 中写好数组 item 中的值，模板中就会自动添加进去</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#example'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        items: [</span><br><span class="line">            &#123; <span class="attr">msg</span>: <span class="string">'wo'</span>, <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">msg</span>: <span class="string">'shi'</span>, <span class="attr">id</span>: <span class="number">2</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">msg</span>: <span class="string">'suo'</span>, <span class="attr">id</span>: <span class="number">3</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>4.事件处理 v-on<br>使用 v-on 给组件绑定事件,可以直接用表达式，但是更多的是，写在js的方法里<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"counter += 1"</span>&gt;</span>Add 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"hello"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;counter&#125;&#125;times.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#example'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        greet: <span class="string">'你好啊'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        hello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="keyword">this</span>.greet)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>监听鼠标时，经常会有一些模式，决定事件的触发形式，下面是鼠标修饰符汇总</p><table><thead><tr><th>修饰符</th><th>作用</th></tr></thead><tbody><tr><td>stop</td><td>阻止单击事件继续传播</td></tr><tr><td>prevent</td><td>提交事件不再重载页面</td></tr><tr><td>capture</td><td>捕获模式</td></tr><tr><td>self</td><td>事件不是从内部触发</td></tr><tr><td>once</td><td>点击事件只会触发一次</td></tr></tbody></table><p>监听按键事件时，也有一些常见的键值，下面是键值汇总</p><table><thead><tr><th>修饰符</th><th>作用</th></tr></thead><tbody><tr><td>enter</td><td>enter键</td></tr><tr><td>tab</td><td>tab键</td></tr><tr><td>delete</td><td>删除键</td></tr><tr><td>esc</td><td>esc键</td></tr><tr><td>space</td><td>空白符键</td></tr><tr><td>up</td><td>上方向键</td></tr><tr><td>down</td><td>下方向键</td></tr><tr><td>left</td><td>左方向键</td></tr><tr><td>right</td><td>右方向键</td></tr><tr><td>ctrl</td><td>ctrl键</td></tr><tr><td>alt</td><td>alt键</td></tr><tr><td>shift</td><td>shift键</td></tr><tr><td>meta</td><td>meta键</td></tr></tbody></table><p>5.输入绑定 v-model<br>使用 v-model 指令在表单控件上实现双向绑定，负责监听输入事件并更新数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span> <span class="attr">placeholder</span>=<span class="string">"edit me"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其他的用法差不多，不用细写了</p><h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><p>为了扩展 HTML 元素，封装可重用的代码。有些情况下，组件也可以表现为 is 特性进行了扩展的原生 HTML 元素<br>1.使用组件<br>(1)全局注册<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component'</span>, &#123;</span><br><span class="line">    template: <span class="string">'&lt;div&gt; component &lt;/div&gt;'</span>,</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#example'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>(2)局部注册<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Child = &#123;</span><br><span class="line">    template: <span class="string">'&lt;div&gt; A custom component!&lt;/div&gt;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        <span class="string">'my-component'</span>: Child</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>(3)模板限制<br>(4)data函数<br>(5)组件组合</p><p>2.Prop<br>(1)传递数据<br>(2)单向数据流<br>(3)prop验证</p><p>3.非Prop特性<br>替换/合并现有特性</p><p>4.自定义事件<br>(1)使用 v-on 绑定自定义事件<br>(2)给组件绑定原生事件<br>(3).sync 修饰符<br>(4)使用自定义事件的表单输入组件<br>(5)自定义组件的 v-model</p><p>5.插槽<br>(1)单插槽<br>(2)具名插槽<br>(3)作用域插槽</p><p>6.动态组件</p><p>7.杂项<br>(1)编写可复用组件<br>(2)子组件引用<br>(3)异步组件<br>(4)高级异步组件<br>(5)组件名约定<br>(6)递归组件<br>(7)组件间的循环引用<br>(8)内联模板<br>(9)X-Template<br>(10)对低开销的静态组件使用 v-once</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;接触 vue 时间并不长，之前一直用的 react，也很想学习一下 Vue，但是没有什么机会去接触。刚入职不久，公司用的 Vue，用了3-5天的时间学习了下 Vue 的官方教程。知识点还挺多的，现在重新梳理一遍，以备后续查看。&lt;/p&gt;
&lt;h2 id=&quot;一周内-Vue-框架快
      
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="框架" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>生活杂感</title>
    <link href="http://yoursite.com/2017/10/22/l-tell_thought_001/"/>
    <id>http://yoursite.com/2017/10/22/l-tell_thought_001/</id>
    <published>2017-10-22T02:28:51.000Z</published>
    <updated>2017-10-23T07:43:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>快毕业了，面临着各种各样的选择，同时也不停的思考着，到底自己想过怎样的生活，该拥有怎样的生活态度。经过一番的思考体悟，便写下这一小段杂感。</p><h4 id="入门：独善其身"><a href="#入门：独善其身" class="headerlink" title="入门：独善其身"></a>入门：独善其身</h4><ul><li>有明确的目标，并为之努力奋斗着</li><li>做着自己感兴趣的事情</li><li>善待家人，善待自己</li></ul><h4 id="进阶：年轻有为"><a href="#进阶：年轻有为" class="headerlink" title="进阶：年轻有为"></a>进阶：年轻有为</h4><ul><li>一步一步实现了自己的小目标</li><li>做自己喜欢的事情，并小有成就</li><li>有着稳固的社交圈，相处和睦融洽 </li></ul><h4 id="精通：海阔鱼跃"><a href="#精通：海阔鱼跃" class="headerlink" title="精通：海阔鱼跃"></a>精通：海阔鱼跃</h4><ul><li>带着一群小伙伴，成就了一番事业</li><li>在喜欢的领域中，结交了不少志趣相投的朋友</li><li>家庭和睦温馨，社交游刃有余，生活不受拘束，自由自在</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;快毕业了，面临着各种各样的选择，同时也不停的思考着，到底自己想过怎样的生活，该拥有怎样的生活态度。经过一番的思考体悟，便写下这一小段杂感。&lt;/p&gt;
&lt;h4 id=&quot;入门：独善其身&quot;&gt;&lt;a href=&quot;#入门：独善其身&quot; class=&quot;headerlink&quot; title=&quot;入
      
    
    </summary>
    
    
      <category term="生活杂感" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB%E6%9D%82%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>浅析设计模式在web开发中的应用&lt;一&gt;：单一职责</title>
    <link href="http://yoursite.com/2017/09/25/t-book_php_001/"/>
    <id>http://yoursite.com/2017/09/25/t-book_php_001/</id>
    <published>2017-09-25T03:13:05.000Z</published>
    <updated>2017-10-13T01:53:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>经过接近两年的前端知识的学习，多多少少积累了不少知识和经验。一直想着写点东西，由于时间和自己学艺不精的原因，没有太多心思去写博客，现在暂时有点闲功夫了。想着还是写一点东西吧，所以这篇博客出来了。</p><h3 id="单一职责（SRP）"><a href="#单一职责（SRP）" class="headerlink" title="单一职责（SRP）"></a>单一职责（SRP）</h3><h4 id="1-简单举个例子"><a href="#1-简单举个例子" class="headerlink" title="1.简单举个例子"></a>1.简单举个例子</h4><p>一家 2000 人的工厂生产出 1000 辆汽车，如果每 2 个人负责一辆汽车的制造，要完成这个生产任务，可能几十年都完成不了。但是如果把这个任务拆分成一个一个小的任务，这里的每个工人都有自己独有的任务，有着专业的技能，那么每个人的职责是单一的，制作轮子的不必管制作灯泡的。这样效率就大大的提升了。是不是很容易理解呢</p><h4 id="2-在敏捷软件开发中，把“职责”定义为“变化的原因”"><a href="#2-在敏捷软件开发中，把“职责”定义为“变化的原因”" class="headerlink" title="2.在敏捷软件开发中，把“职责”定义为“变化的原因”"></a>2.在敏捷软件开发中，把“职责”定义为“变化的原因”</h4><p>对于一个类而言，应该只有一个引起它变化的原因，这句话怎么理解呢？<br>简单的说：就是一个类只负责一个功能领域里的一个职责，不同变化的原因放在不同的类中。<br>比如说 MVC 框架中，表单插入数据库字段过滤与安全检查应该放在 controller 层还是 model 层？<br>数据库过滤与安全检查是表单插入这一个功能领域里的一个职责，它应该单独封装成类，所以应该放在 model 层。<br>从上面的描述中可以看出，单一职责有 2 层含义：第一是避免相同的职责分散到不同的类中，第二避免一个类承担了太多的职责。</p><h4 id="3-单一职责的好处在于"><a href="#3-单一职责的好处在于" class="headerlink" title="3.单一职责的好处在于:"></a>3.单一职责的好处在于:</h4><ul><li>减少类之间的耦合：需求发生变化时，只修改一个类从而隔离了变化。如果一个类有不同的职责，当这些职责都耦合在一起，当一个职责发生变化时就会影响其他的职责。</li><li>提高类的复用性：当需要修改某个职责时，只需要替换掉这个类，不会影响其他的类的职责。<br>现在流行的组件化开发，就是使用了单一职责这一模式。</li></ul><h4 id="4-单一职责的体现"><a href="#4-单一职责的体现" class="headerlink" title="4.单一职责的体现"></a>4.单一职责的体现</h4><p>(1)工厂模式：负责生产对象，提供不同的参数生产不同的对象<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Db_Adapter</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">($config)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">query</span><span class="params">($query, $handle)</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 抽象的接口，并未给出具体的实现</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Db_Adapter_Mysql</span> <span class="keyword">implements</span> <span class="title">Db_Adapter</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $_dbLink;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">($config)</span> </span>&#123;</span><br><span class="line">            <span class="comment">/** code */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// MySQL的操作类，也可以是SQLite或者Oracle等等</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">sqlFactory</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">factory</span><span class="params">($type)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">include_once</span> <span class="string">'Drivers/'</span>.$type.<span class="string">'.php'</span>) &#123;</span><br><span class="line">                $classname = <span class="string">'Db_Adapter_'</span>.$type;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> $classname;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Driver not found'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 工厂模式，生成不同的对象</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>思考：工厂模式与单一职责有什么关系呢？</strong><br>其实有很大关系的，从上面我们可以看出，MySQL 操作，还有 SQLite 等等数据库的操作，都是用单独的类写出来的，这样做的原因就是，避免这些职责耦合到一个功能类里，所以把这些职责用单独的类封装起来了。但是单独封装了就会有个问题，一旦产生了功能变化，就应该可以自由的切换到各自的类中生成不同的对象。所以使用工厂模式来实现这一性质，当功能发生变化时，在执行的时候，传入恰当的参数就可以切换到相应的类生成相应的对象了。</p><p>(2)命令模式<br>命令模式将“命令请求者”和“命令执行者”职责分开，生成单独的职责。<br>举个例子，你去餐馆吃饭，餐馆有员工，厨师等角色，作为顾客，你需要把菜单投递给员工，由员工去通知厨师主管去实现，厨师收到菜单后，就按照菜单上的内容开始做菜。这里命令的请求和实现就完成了解耦。<br>代码模拟这一过程<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 模拟厨师</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cooker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">meal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'meal'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'drink'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">over</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'ok'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 模拟员工和厨师,绑定命令接受者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MealCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(cooker $cooker)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;cooker = $cooker;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;cooker-&gt;meal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrinkCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(cooker $cooker)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;cooker = $cooker;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;cooker-&gt;drink();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟员工与顾客</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cookerControl</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $mealcommand;</span><br><span class="line">    <span class="keyword">private</span> $drinkcommand;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addCommand</span><span class="params">(Command $mealcommand, Command $drinkcommand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mealcommand = $mealcommand;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;drinkcommand = $drinkcommand;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calldrink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mealcommand-&gt;execute();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calldrink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;drinkcommand-&gt;exexute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现命令模式</span></span><br><span class="line">$control = <span class="keyword">new</span> cookControl;</span><br><span class="line">$cooker = <span class="keyword">new</span> cooker;</span><br><span class="line">$mealcommand = <span class="keyword">new</span> MealCommand($cooker);</span><br><span class="line">$drinkcommand = <span class="keyword">new</span> DrinkCommand($cooker);</span><br><span class="line">$control-&gt;addCommand($mealCommand, $drinkcommand);</span><br><span class="line">$control-&gt;callmeal();</span><br><span class="line">$control-&gt;calldrink();</span><br></pre></td></tr></table></figure><p>代码模拟出来了，为啥要这么写呢?当然是解耦啦，但这是怎么个解耦法呢？这样做有好处呢？<br>由上可以看出，第一个好处，厨师的做饭和做喝的是分离的，是两个不同的类，做饭这一职责和做菜这一职责相互独立互不影响。第二个好处，顾客的命令和厨师的执行是分离的，一旦厨师的执行出现了问题，重新执行就可以了，但是如果顾客未与厨师功能分离开来，这整个命令的过程都会受到影响。<br>(3)MVC 模式<br><img src="/images/dm1.png" alt="img"><br>由上图可知，这些业务是非常复杂的，各层之间分层很细，有很多子模块，系统的总体设计的原则是，把复杂的业务逻辑分成各种子模块，子系统。这样的架构更加利用，各个模块之间的解耦和分工合作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;经过接近两年的前端知识的学习，多多少少积累了不少知识和经验。一直想着写点东西，由于时间和自己学艺不精的原因，没有太多心思去写博客，现在暂时有点闲功夫了。想着还是写一点东西吧，所以这篇博客出来了。&lt;/p&gt;
&lt;h3 id=&quot;单一职责（SRP）&quot;&gt;&lt;a href=&quot;#单一职责（S
      
    
    </summary>
    
      <category term="web开发" scheme="http://yoursite.com/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
</feed>
